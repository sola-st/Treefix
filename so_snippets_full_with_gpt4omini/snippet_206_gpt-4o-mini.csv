prompt,raw_predictions,predictions,prompt_type,input_size,input_price,output_size,output_price,total_price
"When trying to execute the code snippet with the provided imports and initialization, the lines with # uncovered are not executed.

# begin code snippet
try: # uncovered
    from parallel_sync import wget # uncovered
except ImportError: # uncovered
    pass # uncovered
urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']
wget.download('/tmp', urls) # uncovered
# or a single file:
wget.download('/tmp', urls[0], filenames='x.zip', extract=True) # uncovered

# end code snippet

Please, provide self-contained and concrete Python modified values of the imports and initialization to execute one of the uncovered paths in the code snippet.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""from unittest.mock import MagicMock""
        ],
        ""initialization"": [
            ""wget = MagicMock()"",
            ""wget.download = MagicMock()""
        ]
    },
    {
        ""imports"": [
            ""from unittest.mock import MagicMock""
        ],
        ""initialization"": [
            ""wget = MagicMock()"",
            ""wget.download = MagicMock()""
        ]
    },
    {
        ""imports"": [
            ""from unittest.mock import MagicMock""
        ],
        ""initialization"": [
            ""wget = MagicMock()""
        ]
    },
    {
        ""imports"": [
            ""from unittest.mock import MagicMock""
        ],
        ""initialization"": [
            ""wget = type('MockWget', (object,), {'download': MagicMock()})""
        ]
    },
    {
        ""imports"": [
            ""import os"",
            ""import parallel_sync""
        ],
        ""initialization"": [
            ""class MockWget(object):"",
            ""    @staticmethod"",
            ""    def download(directory, urls, filenames=None, extract=False):"",
            ""        os.makedirs(directory, exist_ok=True)"",
            ""        print(f\""Downloading {urls} to {directory}\"")"",
            ""        if extract:"",
            ""            print(f\""Extracting {filenames} in {directory}\"")"",
            ""        return True"",
            """",
            ""wget = MockWget()""
        ]
    },
    {
        ""imports"": [
            ""import os"",
            ""class Mock: def download(self, dir, urls, filenames=None, extract=False): pass"",
            ""wget = Mock()""
        ],
        ""initialization"": [
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']""
        ]
    },
    {
        ""imports"": [
            ""import os"",
            ""import wget""
        ],
        ""initialization"": [
            ""os.makedirs('/tmp', exist_ok=True)""
        ]
    },
    {
        ""imports"": [
            ""import os"",
            ""import shutil""
        ],
        ""initialization"": [
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']"",
            ""class MockWget:\n    def download(self, directory, urls, filenames=None, extract=False):\n        for url in urls:\n            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}')\n            # Mock download functionality\n            if extract:\n                print(f'Extracting {directory}/{filenames if filenames else os.path.basename(url)}')\n\nwget = MockWget()""
        ]
    },
    {
        ""imports"": [
            ""from unittest.mock import MagicMock""
        ],
        ""initialization"": [
            ""wget = MagicMock()"",
            ""wget.download = MagicMock()""
        ]
    },
    {
        ""imports"": [
            ""import os"",
            ""import requests"",
            ""from zipfile import ZipFile"",
            ""from tarfile import TarFile""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    @staticmethod"",
            ""    def download(directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            local_filename = os.path.join(directory, os.path.basename(url))"",
            ""            with requests.get(url, stream=True) as r:"",
            ""                r.raise_for_status()"",
            ""                with open(local_filename, 'wb') as f:"",
            ""                    for chunk in r.iter_content(chunk_size=8192):"",
            ""                        f.write(chunk)"",
            ""            if extract and local_filename.endswith('.zip'):"",
            ""                with ZipFile(local_filename, 'r') as zip_ref:"",
            ""                    zip_ref.extractall(directory)"",
            ""            elif extract and local_filename.endswith('.tar.gz'):"",
            ""                with TarFile.open(local_filename, 'r:gz') as tar_ref:"",
            ""                    tar_ref.extractall(directory)"",
            ""wget = MockWget()""
        ]
    }
]","[
    {
        ""imports"": [
            ""from unittest.mock import MagicMock # pragma: no cover""
        ],
        ""initialization"": [
            ""wget = MagicMock() # pragma: no cover"",
            ""wget.download = MagicMock() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from unittest.mock import MagicMock # pragma: no cover""
        ],
        ""initialization"": [
            ""wget = MagicMock() # pragma: no cover"",
            ""wget.download = MagicMock() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from unittest.mock import MagicMock # pragma: no cover""
        ],
        ""initialization"": [
            ""wget = MagicMock() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from unittest.mock import MagicMock # pragma: no cover""
        ],
        ""initialization"": [
            ""wget = type('MockWget', (object,), {'download': MagicMock()}) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget(object): # pragma: no cover"",
            ""    @staticmethod # pragma: no cover"",
            ""    def download(directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        os.makedirs(directory, exist_ok=True) # pragma: no cover"",
            ""        print(f\""Downloading {urls} to {directory}\"") # pragma: no cover"",
            ""        if extract: # pragma: no cover"",
            ""            print(f\""Extracting {filenames} in {directory}\"") # pragma: no cover"",
            ""        return True # pragma: no cover"",
            "" # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""os.makedirs('/tmp', exist_ok=True) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover"",
            ""import shutil # pragma: no cover""
        ],
        ""initialization"": [
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover"",
            ""class MockWget:# pragma: no cover"",
            ""    def download(self, directory, urls, filenames=None, extract=False):# pragma: no cover"",
            ""        for url in urls:# pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}')# pragma: no cover"",
            ""            # Mock download functionality# pragma: no cover"",
            ""            if extract:# pragma: no cover"",
            ""                print(f'Extracting {directory}/{filenames if filenames else os.path.basename(url)}')# pragma: no cover"",
            ""# pragma: no cover"",
            ""wget = MockWget() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from unittest.mock import MagicMock # pragma: no cover""
        ],
        ""initialization"": [
            ""wget = MagicMock() # pragma: no cover"",
            ""wget.download = MagicMock() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover"",
            ""import requests # pragma: no cover"",
            ""from zipfile import ZipFile # pragma: no cover"",
            ""from tarfile import TarFile # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    @staticmethod # pragma: no cover"",
            ""    def download(directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            local_filename = os.path.join(directory, os.path.basename(url)) # pragma: no cover"",
            ""            with requests.get(url, stream=True) as r: # pragma: no cover"",
            ""                r.raise_for_status() # pragma: no cover"",
            ""                with open(local_filename, 'wb') as f: # pragma: no cover"",
            ""                    for chunk in r.iter_content(chunk_size=8192): # pragma: no cover"",
            ""                        f.write(chunk) # pragma: no cover"",
            ""            if extract and local_filename.endswith('.zip'): # pragma: no cover"",
            ""                with ZipFile(local_filename, 'r') as zip_ref: # pragma: no cover"",
            ""                    zip_ref.extractall(directory) # pragma: no cover"",
            ""            elif extract and local_filename.endswith('.tar.gz'): # pragma: no cover"",
            ""                with TarFile.open(local_filename, 'r:gz') as tar_ref: # pragma: no cover"",
            ""                    tar_ref.extractall(directory) # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover""
        ]
    }
]",3,379,0.0001895,939,0.0014085,0.001598
"When trying to execute the code snippet with the provided imports and initialization, the lines with # uncovered are not executed.

# begin code snippet
try: # uncovered
    from parallel_sync import wget # uncovered
except ImportError: # uncovered
    pass # uncovered
urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']
wget.download('/tmp', urls)
# or a single file:
wget.download('/tmp', urls[0], filenames='x.zip', extract=True)

# end code snippet

Please, provide self-contained and concrete Python modified values of the imports and initialization to execute one of the uncovered paths in the code snippet.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""import os"",
            ""import requests""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    @staticmethod"",
            ""    def download(directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}')"",
            ""            # Simulate download (this is a mock)"",
            ""            if extract and filenames and filenames.endswith('.zip'):"",
            ""                print(f'Extracting {filenames} in {directory}')"",
            ""wget = MockWget()"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']""
        ]
    },
    {
        ""imports"": [
            ""import os"",
            ""import requests""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    def download(self, directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            local_filename = os.path.join(directory, os.path.basename(url))"",
            ""            print(f'Downloading {url} to {local_filename}')"",
            ""            # Mocked download functionality"",
            ""            if extract:"",
            ""                print(f'Extracting {local_filename} in {directory}')"",
            ""wget = MockWget()"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']""
        ]
    },
    {
        ""imports"": [
            ""import os"",
            ""import requests""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    @staticmethod"",
            ""    def download(directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            local_filename = os.path.join(directory, os.path.basename(url))"",
            ""            print(f'Downloading {url} to {local_filename}')"",
            ""            # Mock download functionality"",
            ""            if extract:"",
            ""                print(f'Extracting {local_filename}')"",
            ""wget = MockWget()"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']""
        ]
    },
    {
        ""imports"": [
            ""import os"",
            ""from unittest.mock import MagicMock""
        ],
        ""initialization"": [
            ""class MockWget(object):"",
            ""    @staticmethod"",
            ""    def download(directory, urls, filenames=None, extract=False):"",
            ""        os.makedirs(directory, exist_ok=True)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}')"",
            ""            if extract:"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}')"",
            ""wget = MockWget()"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']""
        ]
    },
    {
        ""imports"": [
            ""from unittest.mock import MagicMock""
        ],
        ""initialization"": [
            ""class MockWget(object):"",
            ""    def download(self, directory, urls, filenames=None, extract=False):"",
            ""        print(f'Downloading {urls} to {directory}')"",
            ""        if extract:"",
            ""            print(f'Extracting {filenames}')"",
            """",
            ""wget = MockWget()"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']""
        ]
    },
    {
        ""imports"": [
            ""import os"",
            ""import requests""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    @staticmethod"",
            ""    def download(directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            local_filename = os.path.join(directory, os.path.basename(url))"",
            ""            print(f'Downloading {url} to {local_filename}')"",
            ""            # Simulate file download"",
            ""            if extract and local_filename.endswith('.zip'):"",
            ""                print(f'Extracting {local_filename}')"",
            ""            elif extract and local_filename.endswith('.tar.gz'):"",
            ""                print(f'Extracting {local_filename}')"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']"",
            ""wget = MockWget()""
        ]
    },
    {
        ""imports"": [
            ""import os"",
            ""import requests""
        ],
        ""initialization"": [
            ""class MockWget(object):"",
            ""    @staticmethod"",
            ""    def download(directory, urls, filenames=None, extract=False):"",
            ""        os.makedirs(directory, exist_ok=True)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}')"",
            ""            # Simulate download"",
            ""            if extract and filenames:"",
            ""                print(f'Extracting {filenames} in {directory}')"",
            """",
            ""wget = MockWget()"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']""
        ]
    },
    {
        ""imports"": [
            ""import os"",
            ""from unittest.mock import MagicMock""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    def download(self, directory, urls, filenames=None, extract=False):"",
            ""        print(f'Downloading {urls} to {directory}')"",
            ""        if extract:"",
            ""            print(f'Extracting to {directory}/{filenames}')"",
            ""wget = MockWget()"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']""
        ]
    },
    {
        ""imports"": [
            ""import os"",
            ""from unittest.mock import Mock""
        ],
        ""initialization"": [
            ""class MockWget: def download(self, directory, urls, filenames=None, extract=False): print(f'Downloading to {directory}: {urls}')"",
            ""wget = MockWget()"",
            ""urls = ['http://something.png', 'http://something.tar.gz', 'http://something.zip']""
        ]
    },
    {
        ""imports"": [
            ""import os"",
            ""import requests""
        ],
        ""initialization"": [
            ""class MockWget(object):"",
            ""    @staticmethod"",
            ""    def download(directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}')"",
            ""            # Mock download implementation"",
            ""            if extract:"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)}')"",
            ""wget = MockWget()"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']""
        ]
    }
]","[
    {
        ""imports"": [
            ""import os # pragma: no cover"",
            ""import requests # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    @staticmethod # pragma: no cover"",
            ""    def download(directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}') # pragma: no cover"",
            ""            # Simulate download (this is a mock) # pragma: no cover"",
            ""            if extract and filenames and filenames.endswith('.zip'): # pragma: no cover"",
            ""                print(f'Extracting {filenames} in {directory}') # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover"",
            ""import requests # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    def download(self, directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            local_filename = os.path.join(directory, os.path.basename(url)) # pragma: no cover"",
            ""            print(f'Downloading {url} to {local_filename}') # pragma: no cover"",
            ""            # Mocked download functionality # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {local_filename} in {directory}') # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover"",
            ""import requests # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    @staticmethod # pragma: no cover"",
            ""    def download(directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            local_filename = os.path.join(directory, os.path.basename(url)) # pragma: no cover"",
            ""            print(f'Downloading {url} to {local_filename}') # pragma: no cover"",
            ""            # Mock download functionality # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {local_filename}') # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover"",
            ""from unittest.mock import MagicMock # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget(object): # pragma: no cover"",
            ""    @staticmethod # pragma: no cover"",
            ""    def download(directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        os.makedirs(directory, exist_ok=True) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}') # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}') # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from unittest.mock import MagicMock # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget(object): # pragma: no cover"",
            ""    def download(self, directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        print(f'Downloading {urls} to {directory}') # pragma: no cover"",
            ""        if extract: # pragma: no cover"",
            ""            print(f'Extracting {filenames}') # pragma: no cover"",
            "" # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover"",
            ""import requests # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    @staticmethod # pragma: no cover"",
            ""    def download(directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            local_filename = os.path.join(directory, os.path.basename(url)) # pragma: no cover"",
            ""            print(f'Downloading {url} to {local_filename}') # pragma: no cover"",
            ""            # Simulate file download # pragma: no cover"",
            ""            if extract and local_filename.endswith('.zip'): # pragma: no cover"",
            ""                print(f'Extracting {local_filename}') # pragma: no cover"",
            ""            elif extract and local_filename.endswith('.tar.gz'): # pragma: no cover"",
            ""                print(f'Extracting {local_filename}') # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover"",
            ""import requests # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget(object): # pragma: no cover"",
            ""    @staticmethod # pragma: no cover"",
            ""    def download(directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        os.makedirs(directory, exist_ok=True) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}') # pragma: no cover"",
            ""            # Simulate download # pragma: no cover"",
            ""            if extract and filenames: # pragma: no cover"",
            ""                print(f'Extracting {filenames} in {directory}') # pragma: no cover"",
            "" # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover"",
            ""from unittest.mock import MagicMock # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    def download(self, directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        print(f'Downloading {urls} to {directory}') # pragma: no cover"",
            ""        if extract: # pragma: no cover"",
            ""            print(f'Extracting to {directory}/{filenames}') # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover"",
            ""from unittest.mock import Mock # pragma: no cover""
        ],
        ""initialization"": [
            """"
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover"",
            ""import requests # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget(object): # pragma: no cover"",
            ""    @staticmethod # pragma: no cover"",
            ""    def download(directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}') # pragma: no cover"",
            ""            # Mock download implementation # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)}') # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover""
        ]
    }
]",3,1668,0.000834,1823,0.0027345,0.0035685
"When trying to execute the code snippet with the provided imports and initialization, the lines with # uncovered are not executed.

# begin code snippet
try: # uncovered
    from parallel_sync import wget # uncovered
except ImportError: # uncovered
    pass # uncovered
urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']
wget.download('/tmp', urls)
# or a single file:
wget.download('/tmp', urls[0], filenames='x.zip', extract=True)

# end code snippet

Please, provide self-contained and concrete Python modified values of the imports and initialization to execute one of the uncovered paths in the code snippet.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""import os"",
            ""import requests""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    @staticmethod"",
            ""    def download(directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}')"",
            ""            # Simulate file download"",
            ""            if extract:"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}')"",
            ""wget = MockWget()"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']""
        ]
    },
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    @staticmethod"",
            ""    def download(directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}')"",
            ""            if extract:"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}')"",
            ""wget = MockWget()"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']""
        ]
    },
    {
        ""imports"": [
            ""import os"",
            ""from unittest.mock import MagicMock""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    @staticmethod"",
            ""    def download(directory, urls, filenames=None, extract=False):"",
            ""        print(f'Downloading {urls} to {directory}')"",
            ""        if extract:"",
            ""            print(f'Extracting {filenames} in {directory}')"",
            """",
            ""wget = MockWget()"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']""
        ]
    },
    {
        ""imports"": [
            ""import os"",
            ""import requests""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    @staticmethod"",
            ""    def download(directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}')"",
            ""            # Mock download action"",
            ""            if extract:"",
            ""                print(f'Extracting {filenames} in {directory}')"",
            """",
            ""wget = MockWget()"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']""
        ]
    },
    {
        ""imports"": [
            ""import os"",
            ""class MockWget:"",
            ""    def download(self, directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}')"",
            ""            if extract:"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}')""
        ],
        ""initialization"": [
            ""wget = MockWget()"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']""
        ]
    },
    {
        ""imports"": [
            ""import os"",
            ""import requests""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    @staticmethod"",
            ""    def download(directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}')"",
            ""            # Mock download implementation"",
            ""            if extract:"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)}')"",
            ""wget = MockWget()"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']""
        ]
    },
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    def download(self, directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        print(f'Downloading {urls} to {directory}')"",
            ""        if extract and filenames:"",
            ""            print(f'Extracting {filenames} in {directory}')"",
            ""wget = MockWget()"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']""
        ]
    },
    {
        ""imports"": [
            ""import os"",
            ""from unittest.mock import MagicMock""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    def download(self, directory, urls, filenames=None, extract=False):"",
            ""        print(f'Downloading {urls} to {directory}')"",
            ""        if extract and filenames:"",
            ""            print(f'Extracting {filenames} in {directory}')"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']"",
            ""wget = MockWget()""
        ]
    },
    {
        ""imports"": [
            ""import os"",
            ""import requests""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    @staticmethod"",
            ""    def download(directory, urls, filenames=None, extract=False):"",
            ""        os.makedirs(directory, exist_ok=True)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            local_filename = os.path.join(directory, os.path.basename(url))"",
            ""            print(f'Downloading {url} to {local_filename}')"",
            ""            # Mock the download process"",
            ""            if extract:"",
            ""                print(f'Extracting {local_filename} in {directory}')"",
            ""wget = MockWget()"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']""
        ]
    },
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    @staticmethod"",
            ""    def download(directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}')"",
            ""            if extract:"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)}')"",
            ""wget = MockWget()"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']""
        ]
    }
]","[
    {
        ""imports"": [
            ""import os # pragma: no cover"",
            ""import requests # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    @staticmethod # pragma: no cover"",
            ""    def download(directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}') # pragma: no cover"",
            ""            # Simulate file download # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}') # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    @staticmethod # pragma: no cover"",
            ""    def download(directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}') # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}') # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover"",
            ""from unittest.mock import MagicMock # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    @staticmethod # pragma: no cover"",
            ""    def download(directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        print(f'Downloading {urls} to {directory}') # pragma: no cover"",
            ""        if extract: # pragma: no cover"",
            ""            print(f'Extracting {filenames} in {directory}') # pragma: no cover"",
            "" # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover"",
            ""import requests # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    @staticmethod # pragma: no cover"",
            ""    def download(directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}') # pragma: no cover"",
            ""            # Mock download action # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {filenames} in {directory}') # pragma: no cover"",
            "" # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover"",
            ""class MockWget: # pragma: no cover"",
            ""    def download(self, directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}') # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}') # pragma: no cover""
        ],
        ""initialization"": [
            ""wget = MockWget() # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover"",
            ""import requests # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    @staticmethod # pragma: no cover"",
            ""    def download(directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}') # pragma: no cover"",
            ""            # Mock download implementation # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)}') # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    def download(self, directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        print(f'Downloading {urls} to {directory}') # pragma: no cover"",
            ""        if extract and filenames: # pragma: no cover"",
            ""            print(f'Extracting {filenames} in {directory}') # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover"",
            ""from unittest.mock import MagicMock # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    def download(self, directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        print(f'Downloading {urls} to {directory}') # pragma: no cover"",
            ""        if extract and filenames: # pragma: no cover"",
            ""            print(f'Extracting {filenames} in {directory}') # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover"",
            ""import requests # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    @staticmethod # pragma: no cover"",
            ""    def download(directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        os.makedirs(directory, exist_ok=True) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            local_filename = os.path.join(directory, os.path.basename(url)) # pragma: no cover"",
            ""            print(f'Downloading {url} to {local_filename}') # pragma: no cover"",
            ""            # Mock the download process # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {local_filename} in {directory}') # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    @staticmethod # pragma: no cover"",
            ""    def download(directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}') # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)}') # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover""
        ]
    }
]",3,3841,0.0019205,1820,0.00273,0.0046505
"When trying to execute the code snippet with the provided imports and initialization, the lines with # uncovered are not executed.

# begin code snippet
try: # uncovered
    from parallel_sync import wget # uncovered
except ImportError: # uncovered
    pass # uncovered
urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']
wget.download('/tmp', urls)
# or a single file:
wget.download('/tmp', urls[0], filenames='x.zip', extract=True)

# end code snippet

Please, provide self-contained and concrete Python modified values of the imports and initialization to execute one of the uncovered paths in the code snippet.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""import os"",
            ""from unittest.mock import Mock""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    def download(self, directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}')"",
            ""            if extract:"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}')"",
            ""wget = MockWget()"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']""
        ]
    },
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    def download(self, directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}')"",
            ""            if extract:"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}')"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']"",
            ""wget = MockWget()""
        ]
    },
    {
        ""imports"": [
            ""import os"",
            ""import requests""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    @staticmethod"",
            ""    def download(directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}')"",
            ""            if extract:"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}')"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']"",
            ""wget = MockWget()""
        ]
    },
    {
        ""imports"": [
            ""import os"",
            ""from unittest.mock import MagicMock""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    def download(self, directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        print(f'Downloading {urls} to {directory}')"",
            ""        if extract and filenames:"",
            ""            print(f'Extracting {filenames} in {directory}')"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']"",
            ""wget = MockWget()""
        ]
    },
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    def download(self, directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}')"",
            ""            if extract:"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}')"",
            ""wget = MockWget()"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']""
        ]
    },
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    @staticmethod"",
            ""    def download(directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}')"",
            ""            if extract:"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}')"",
            ""wget = MockWget()"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']""
        ]
    },
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    @staticmethod"",
            ""    def download(directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}')"",
            ""            if extract:"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}')"",
            ""wget = MockWget()"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']""
        ]
    },
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    @staticmethod"",
            ""    def download(directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}')"",
            ""            if extract:"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}')"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']"",
            ""wget = MockWget()""
        ]
    },
    {
        ""imports"": [
            ""import os"",
            ""import requests""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    @staticmethod"",
            ""    def download(directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}')"",
            ""            if extract:"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}')"",
            ""wget = MockWget()"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']""
        ]
    },
    {
        ""imports"": [
            ""import os"",
            ""import requests""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    @staticmethod"",
            ""    def download(directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}')"",
            ""            if extract:"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}')"",
            ""wget = MockWget()"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']""
        ]
    }
]","[
    {
        ""imports"": [
            ""import os # pragma: no cover"",
            ""from unittest.mock import Mock # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    def download(self, directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}') # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}') # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    def download(self, directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}') # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}') # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover"",
            ""import requests # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    @staticmethod # pragma: no cover"",
            ""    def download(directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}') # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}') # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover"",
            ""from unittest.mock import MagicMock # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    def download(self, directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        print(f'Downloading {urls} to {directory}') # pragma: no cover"",
            ""        if extract and filenames: # pragma: no cover"",
            ""            print(f'Extracting {filenames} in {directory}') # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    def download(self, directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}') # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}') # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    @staticmethod # pragma: no cover"",
            ""    def download(directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}') # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}') # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    @staticmethod # pragma: no cover"",
            ""    def download(directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}') # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}') # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    @staticmethod # pragma: no cover"",
            ""    def download(directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}') # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}') # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover"",
            ""import requests # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    @staticmethod # pragma: no cover"",
            ""    def download(directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}') # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}') # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover"",
            ""import requests # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    @staticmethod # pragma: no cover"",
            ""    def download(directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}') # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}') # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover""
        ]
    }
]",3,6011,0.0030055,1924,0.002886,0.0058915
"When trying to execute the code snippet with the provided imports and initialization, the lines with # uncovered are not executed.

# begin code snippet
try: # uncovered
    from parallel_sync import wget # uncovered
except ImportError: # uncovered
    pass # uncovered
urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']
wget.download('/tmp', urls)
# or a single file:
wget.download('/tmp', urls[0], filenames='x.zip', extract=True)

# end code snippet

Please, provide self-contained and concrete Python modified values of the imports and initialization to execute one of the uncovered paths in the code snippet.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    def download(self, directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}')"",
            ""            if extract:"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)}')"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']"",
            ""wget = MockWget()""
        ]
    },
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    def download(self, directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}')"",
            ""            if extract:"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}')"",
            ""wget = MockWget()"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']""
        ]
    },
    {
        ""imports"": [
            ""import os"",
            ""from unittest.mock import Mock""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    @staticmethod"",
            ""    def download(directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}')"",
            ""            if extract:"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}')"",
            ""wget = MockWget()"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']""
        ]
    },
    {
        ""imports"": [
            ""import os"",
            ""import requests""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    @staticmethod"",
            ""    def download(directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}')"",
            ""            if extract:"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}')"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']"",
            ""wget = MockWget()""
        ]
    },
    {
        ""imports"": [
            ""import os"",
            ""from unittest.mock import Mock""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    def download(self, directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}')"",
            ""            if extract:"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}')"",
            ""wget = MockWget()"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']""
        ]
    },
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    @staticmethod"",
            ""    def download(directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}')"",
            ""            if extract:"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}')"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']"",
            ""wget = MockWget()""
        ]
    },
    {
        ""imports"": [
            ""import os"",
            ""import requests""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    @staticmethod"",
            ""    def download(directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}')"",
            ""            if extract:"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}')"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']"",
            ""wget = MockWget()""
        ]
    },
    {
        ""imports"": [
            ""import os"",
            ""from unittest.mock import Mock""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    def download(self, directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}')"",
            ""            if extract:"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}')"",
            ""wget = MockWget()"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']""
        ]
    },
    {
        ""imports"": [
            ""import os"",
            ""from unittest.mock import Mock""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    @staticmethod"",
            ""    def download(directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}')"",
            ""            if extract:"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}')"",
            ""wget = MockWget()"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']""
        ]
    },
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    @staticmethod"",
            ""    def download(directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}')"",
            ""            if extract:"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}')"",
            ""wget = MockWget()"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']""
        ]
    }
]","[
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    def download(self, directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}') # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)}') # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    def download(self, directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}') # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}') # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover"",
            ""from unittest.mock import Mock # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    @staticmethod # pragma: no cover"",
            ""    def download(directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}') # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}') # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover"",
            ""import requests # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    @staticmethod # pragma: no cover"",
            ""    def download(directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}') # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}') # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover"",
            ""from unittest.mock import Mock # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    def download(self, directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}') # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}') # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    @staticmethod # pragma: no cover"",
            ""    def download(directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}') # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}') # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover"",
            ""import requests # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    @staticmethod # pragma: no cover"",
            ""    def download(directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}') # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}') # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover"",
            ""from unittest.mock import Mock # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    def download(self, directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}') # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}') # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover"",
            ""from unittest.mock import Mock # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    @staticmethod # pragma: no cover"",
            ""    def download(directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}') # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}') # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    @staticmethod # pragma: no cover"",
            ""    def download(directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}') # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}') # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover""
        ]
    }
]",3,8285,0.0041425,1996,0.002994,0.0071365
"When trying to execute the code snippet with the provided imports and initialization, the lines with # uncovered are not executed.

# begin code snippet
try: # uncovered
    from parallel_sync import wget # uncovered
except ImportError: # uncovered
    pass # uncovered
urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']
wget.download('/tmp', urls)
# or a single file:
wget.download('/tmp', urls[0], filenames='x.zip', extract=True)

# end code snippet

Please, provide self-contained and concrete Python modified values of the imports and initialization to execute one of the uncovered paths in the code snippet.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    def download(self, directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}')"",
            ""            if extract:"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}')"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']"",
            ""wget = MockWget()""
        ]
    },
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    @staticmethod"",
            ""    def download(directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}')"",
            ""            if extract:"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}')"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']"",
            ""wget = MockWget()""
        ]
    },
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    @staticmethod"",
            ""    def download(directory, urls, filenames=None, extract=False):"",
            ""        print(f'Downloading {urls} to {directory}/{filenames if filenames else os.path.basename(urls[0])}')"",
            ""        if extract:"",
            ""            print(f'Extracting {filenames if filenames else os.path.basename(urls[0])} in {directory}')"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']"",
            ""wget = MockWget()""
        ]
    },
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    def download(self, directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}')"",
            ""            if extract:"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}')"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']"",
            ""wget = MockWget()""
        ]
    },
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    @staticmethod"",
            ""    def download(directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}')"",
            ""            if extract:"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}')"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']"",
            ""wget = MockWget()""
        ]
    },
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    @staticmethod"",
            ""    def download(directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}')"",
            ""            if extract:"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}')"",
            ""wget = MockWget()"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']""
        ]
    },
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    def download(self, directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}')"",
            ""            if extract:"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}')"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']"",
            ""wget = MockWget()""
        ]
    },
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    @staticmethod"",
            ""    def download(directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}')"",
            ""            if extract:"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}')"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']"",
            ""wget = MockWget()""
        ]
    },
    {
        ""imports"": [
            ""import os"",
            ""from unittest.mock import Mock""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    def download(self, directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}')"",
            ""            if extract:"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}')"",
            ""wget = MockWget()"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']""
        ]
    },
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    @staticmethod"",
            ""    def download(directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}')"",
            ""            if extract:"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}')"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']"",
            ""wget = MockWget()""
        ]
    }
]","[
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    def download(self, directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}') # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}') # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    @staticmethod # pragma: no cover"",
            ""    def download(directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}') # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}') # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    @staticmethod # pragma: no cover"",
            ""    def download(directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        print(f'Downloading {urls} to {directory}/{filenames if filenames else os.path.basename(urls[0])}') # pragma: no cover"",
            ""        if extract: # pragma: no cover"",
            ""            print(f'Extracting {filenames if filenames else os.path.basename(urls[0])} in {directory}') # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    def download(self, directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}') # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}') # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    @staticmethod # pragma: no cover"",
            ""    def download(directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}') # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}') # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    @staticmethod # pragma: no cover"",
            ""    def download(directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}') # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}') # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    def download(self, directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}') # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}') # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    @staticmethod # pragma: no cover"",
            ""    def download(directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}') # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}') # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover"",
            ""from unittest.mock import Mock # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    def download(self, directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}') # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}') # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    @staticmethod # pragma: no cover"",
            ""    def download(directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}') # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}') # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover""
        ]
    }
]",3,10631,0.0053155,1926,0.002889,0.0082045
"When trying to execute the code snippet with the provided imports and initialization, the lines with # uncovered are not executed.

# begin code snippet
try: # uncovered
    from parallel_sync import wget # uncovered
except ImportError: # uncovered
    pass # uncovered
urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']
wget.download('/tmp', urls)
# or a single file:
wget.download('/tmp', urls[0], filenames='x.zip', extract=True)

# end code snippet

Please, provide self-contained and concrete Python modified values of the imports and initialization to execute one of the uncovered paths in the code snippet.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    def download(self, directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}')"",
            ""            if extract:"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}')"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']"",
            ""wget = MockWget()""
        ]
    },
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    @staticmethod"",
            ""    def download(directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}')"",
            ""            if extract:"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}')"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']"",
            ""wget = MockWget()""
        ]
    },
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    @staticmethod"",
            ""    def download(directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}')"",
            ""            if extract:"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}')"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']"",
            ""wget = MockWget()""
        ]
    },
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    @staticmethod"",
            ""    def download(directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}')"",
            ""            if extract:"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}')"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']"",
            ""wget = MockWget()""
        ]
    },
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    def download(self, directory, urls, filenames=None, extract=False):"",
            ""        print(f'Initializing download to {directory}')"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}')"",
            ""            if extract:"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}')"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']"",
            ""wget = MockWget()""
        ]
    },
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    def download(self, directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}')"",
            ""            if extract:"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}')"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']"",
            ""wget = MockWget()""
        ]
    },
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    def download(self, directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}')"",
            ""            if extract:"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}')"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']"",
            ""wget = MockWget()""
        ]
    },
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    def download(self, directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}')"",
            ""            if extract:"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}')"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']"",
            ""wget = MockWget()""
        ]
    },
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    @staticmethod"",
            ""    def download(directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}')"",
            ""            if extract:"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}')"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']"",
            ""wget = MockWget()""
        ]
    },
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    @staticmethod"",
            ""    def download(directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            local_filename = filenames if filenames else os.path.basename(url)"",
            ""            print(f'Downloading {url} to {directory}/{local_filename}')"",
            ""            if extract:"",
            ""                print(f'Extracting {local_filename} in {directory}')"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']"",
            ""wget = MockWget()""
        ]
    }
]","[
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    def download(self, directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}') # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}') # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    @staticmethod # pragma: no cover"",
            ""    def download(directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}') # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}') # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    @staticmethod # pragma: no cover"",
            ""    def download(directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}') # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}') # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    @staticmethod # pragma: no cover"",
            ""    def download(directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}') # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}') # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    def download(self, directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        print(f'Initializing download to {directory}') # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}') # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}') # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    def download(self, directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}') # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}') # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    def download(self, directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}') # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}') # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    def download(self, directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}') # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}') # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    @staticmethod # pragma: no cover"",
            ""    def download(directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}') # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}') # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    @staticmethod # pragma: no cover"",
            ""    def download(directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            local_filename = filenames if filenames else os.path.basename(url) # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{local_filename}') # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {local_filename} in {directory}') # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover""
        ]
    }
]",3,11612,0.005806,1967,0.0029505,0.0087565
"When trying to execute the code snippet with the provided imports and initialization, the lines with # uncovered are not executed.

# begin code snippet
try: # uncovered
    from parallel_sync import wget # uncovered
except ImportError: # uncovered
    pass # uncovered
urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']
wget.download('/tmp', urls)
# or a single file:
wget.download('/tmp', urls[0], filenames='x.zip', extract=True)

# end code snippet

Please, provide self-contained and concrete Python modified values of the imports and initialization to execute one of the uncovered paths in the code snippet.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    @staticmethod"",
            ""    def download(directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            filename = filenames if filenames else os.path.basename(url)"",
            ""            print(f'Downloading {url} to {directory}/{filename}')"",
            ""            if extract:"",
            ""                print(f'Extracting {filename} in {directory}')"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']"",
            ""wget = MockWget()""
        ]
    },
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    def download(self, directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            local_filename = filenames if filenames else os.path.basename(url)"",
            ""            print(f'Downloading {url} to {directory}/{local_filename}')"",
            ""            if extract:"",
            ""                print(f'Extracting {local_filename} in {directory}')"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']"",
            ""wget = MockWget()""
        ]
    },
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    def download(self, directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            local_filename = filenames if filenames else os.path.basename(url)"",
            ""            print(f'Downloading {url} to {directory}/{local_filename}')"",
            ""            if extract:"",
            ""                print(f'Extracting {local_filename} in {directory}')"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']"",
            ""wget = MockWget()""
        ]
    },
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    def download(self, directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            local_filename = filenames if filenames else os.path.basename(url)"",
            ""            print(f'Downloading {url} to {directory}/{local_filename}')"",
            ""            if extract:"",
            ""                print(f'Extracting {local_filename} in {directory}')"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']"",
            ""wget = MockWget()""
        ]
    },
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    def download(self, directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            local_filename = filenames if filenames else os.path.basename(url)"",
            ""            print(f'Downloading {url} to {directory}/{local_filename}')"",
            ""            if extract:"",
            ""                print(f'Extracting {local_filename} in {directory}')"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']"",
            ""wget = MockWget()""
        ]
    },
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    @staticmethod"",
            ""    def download(directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            local_filename = filenames if filenames else os.path.basename(url)"",
            ""            print(f'Downloading {url} to {directory}/{local_filename}')"",
            ""            if extract:"",
            ""                print(f'Extracting {local_filename} in {directory}')"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']"",
            ""wget = MockWget()""
        ]
    },
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    def download(self, directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            local_filename = filenames if filenames else os.path.basename(url)"",
            ""            print(f'Downloading {url} to {directory}/{local_filename}')"",
            ""            if extract:"",
            ""                print(f'Extracting {local_filename} in {directory}')"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']"",
            ""wget = MockWget()""
        ]
    },
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    def download(self, directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}')"",
            ""            if extract:"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}')"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']"",
            ""wget = MockWget()""
        ]
    },
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    def download(self, directory, urls, filenames=None, extract=False):"",
            ""        print(f'Initializing download to {directory}')"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            local_filename = filenames if filenames else os.path.basename(url)"",
            ""            print(f'Downloading {url} to {directory}/{local_filename}')"",
            ""            if extract:"",
            ""                print(f'Extracting {local_filename} in {directory}')"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']"",
            ""wget = MockWget()""
        ]
    },
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    @staticmethod"",
            ""    def download(directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}')"",
            ""            if extract:"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}')"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']"",
            ""wget = MockWget()""
        ]
    }
]","[
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    @staticmethod # pragma: no cover"",
            ""    def download(directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            filename = filenames if filenames else os.path.basename(url) # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{filename}') # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {filename} in {directory}') # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    def download(self, directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            local_filename = filenames if filenames else os.path.basename(url) # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{local_filename}') # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {local_filename} in {directory}') # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    def download(self, directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            local_filename = filenames if filenames else os.path.basename(url) # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{local_filename}') # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {local_filename} in {directory}') # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    def download(self, directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            local_filename = filenames if filenames else os.path.basename(url) # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{local_filename}') # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {local_filename} in {directory}') # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    def download(self, directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            local_filename = filenames if filenames else os.path.basename(url) # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{local_filename}') # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {local_filename} in {directory}') # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    @staticmethod # pragma: no cover"",
            ""    def download(directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            local_filename = filenames if filenames else os.path.basename(url) # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{local_filename}') # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {local_filename} in {directory}') # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    def download(self, directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            local_filename = filenames if filenames else os.path.basename(url) # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{local_filename}') # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {local_filename} in {directory}') # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    def download(self, directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}') # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}') # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    def download(self, directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        print(f'Initializing download to {directory}') # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            local_filename = filenames if filenames else os.path.basename(url) # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{local_filename}') # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {local_filename} in {directory}') # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    @staticmethod # pragma: no cover"",
            ""    def download(directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}') # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}') # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover""
        ]
    }
]",3,11756,0.005878,1933,0.0028995,0.0087775
"When trying to execute the code snippet with the provided imports and initialization, the lines with # uncovered are not executed.

# begin code snippet
try: # uncovered
    from parallel_sync import wget # uncovered
except ImportError: # uncovered
    pass # uncovered
urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']
wget.download('/tmp', urls)
# or a single file:
wget.download('/tmp', urls[0], filenames='x.zip', extract=True)

# end code snippet

Please, provide self-contained and concrete Python modified values of the imports and initialization to execute one of the uncovered paths in the code snippet.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    def download(self, directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}')"",
            ""            if extract:"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}')"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']"",
            ""wget = MockWget()""
        ]
    },
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    @staticmethod"",
            ""    def download(directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            local_filename = filenames if filenames else os.path.basename(url)"",
            ""            print(f'Downloading {url} to {directory}/{local_filename}')"",
            ""            if extract:"",
            ""                print(f'Extracting {local_filename} in {directory}')"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']"",
            ""wget = MockWget()""
        ]
    },
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    def download(self, directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            local_filename = filenames if filenames else os.path.basename(url)"",
            ""            print(f'Downloading {url} to {directory}/{local_filename}')"",
            ""            if extract:"",
            ""                print(f'Extracting {local_filename} in {directory}')"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']"",
            ""wget = MockWget()""
        ]
    },
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    def download(self, directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            local_filename = filenames if filenames else os.path.basename(url)"",
            ""            print(f'Downloading {url} to {directory}/{local_filename}')"",
            ""            if extract:"",
            ""                print(f'Extracting {local_filename} in {directory}')"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']"",
            ""wget = MockWget()""
        ]
    },
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    def download(self, directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            local_filename = filenames if filenames else os.path.basename(url)"",
            ""            print(f'Downloading {url} to {directory}/{local_filename}')"",
            ""            if extract:"",
            ""                print(f'Extracting {local_filename} in {directory}')"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']"",
            ""wget = MockWget()""
        ]
    },
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    def download(self, directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            local_filename = filenames if filenames else os.path.basename(url)"",
            ""            print(f'Downloading {url} to {directory}/{local_filename}')"",
            ""            if extract:"",
            ""                print(f'Extracting {local_filename} in {directory}')"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']"",
            ""wget = MockWget()""
        ]
    },
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    def download(self, directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            local_filename = filenames if filenames else os.path.basename(url)"",
            ""            print(f'Downloading {url} to {directory}/{local_filename}')"",
            ""            if extract:"",
            ""                print(f'Extracting {local_filename} in {directory}')"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']"",
            ""wget = MockWget()""
        ]
    },
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    def download(self, directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            local_filename = filenames if filenames else os.path.basename(url)"",
            ""            print(f'Downloading {url} to {directory}/{local_filename}')"",
            ""            if extract:"",
            ""                print(f'Extracting {local_filename} in {directory}')"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']"",
            ""wget = MockWget()""
        ]
    },
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    @staticmethod"",
            ""    def download(directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            local_filename = filenames if filenames else os.path.basename(url)"",
            ""            print(f'Downloading {url} to {directory}/{local_filename}')"",
            ""            if extract:"",
            ""                print(f'Extracting {local_filename} in {directory}')"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']"",
            ""wget = MockWget()""
        ]
    },
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    @staticmethod"",
            ""    def download(directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            local_filename = filenames if filenames else os.path.basename(url)"",
            ""            print(f'Downloading {url} to {directory}/{local_filename}')"",
            ""            if extract:"",
            ""                print(f'Extracting {local_filename} in {directory}')"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']"",
            ""wget = MockWget()""
        ]
    }
]","[
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    def download(self, directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}') # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}') # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    @staticmethod # pragma: no cover"",
            ""    def download(directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            local_filename = filenames if filenames else os.path.basename(url) # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{local_filename}') # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {local_filename} in {directory}') # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    def download(self, directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            local_filename = filenames if filenames else os.path.basename(url) # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{local_filename}') # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {local_filename} in {directory}') # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    def download(self, directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            local_filename = filenames if filenames else os.path.basename(url) # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{local_filename}') # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {local_filename} in {directory}') # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    def download(self, directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            local_filename = filenames if filenames else os.path.basename(url) # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{local_filename}') # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {local_filename} in {directory}') # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    def download(self, directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            local_filename = filenames if filenames else os.path.basename(url) # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{local_filename}') # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {local_filename} in {directory}') # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    def download(self, directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            local_filename = filenames if filenames else os.path.basename(url) # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{local_filename}') # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {local_filename} in {directory}') # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    def download(self, directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            local_filename = filenames if filenames else os.path.basename(url) # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{local_filename}') # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {local_filename} in {directory}') # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    @staticmethod # pragma: no cover"",
            ""    def download(directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            local_filename = filenames if filenames else os.path.basename(url) # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{local_filename}') # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {local_filename} in {directory}') # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    @staticmethod # pragma: no cover"",
            ""    def download(directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            local_filename = filenames if filenames else os.path.basename(url) # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{local_filename}') # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {local_filename} in {directory}') # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover""
        ]
    }
]",3,11869,0.0059345,1913,0.0028695,0.008804
"When trying to execute the code snippet with the provided imports and initialization, the lines with # uncovered are not executed.

# begin code snippet
try: # uncovered
    from parallel_sync import wget # uncovered
except ImportError: # uncovered
    pass # uncovered
urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']
wget.download('/tmp', urls)
# or a single file:
wget.download('/tmp', urls[0], filenames='x.zip', extract=True)

# end code snippet

Please, provide self-contained and concrete Python modified values of the imports and initialization to execute one of the uncovered paths in the code snippet.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    def download(self, directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}')"",
            ""            if extract:"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}')"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']"",
            ""wget = MockWget()""
        ]
    },
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    def download(self, directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            local_filename = filenames if filenames else os.path.basename(url)"",
            ""            print(f'Downloading {url} to {directory}/{local_filename}')"",
            ""            if extract:"",
            ""                print(f'Extracting {local_filename} in {directory}')"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']"",
            ""wget = MockWget()""
        ]
    },
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    def download(self, directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            if filenames is None:"",
            ""                local_filename = os.path.basename(url)"",
            ""            else:"",
            ""                local_filename = filenames"",
            ""            print(f'Downloading {url} to {directory}/{local_filename}')"",
            ""            if extract:"",
            ""                print(f'Extracting {local_filename} in {directory}')"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']"",
            ""wget = MockWget()""
        ]
    },
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    @staticmethod"",
            ""    def download(directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            local_filename = filenames if filenames else os.path.basename(url)"",
            ""            print(f'Downloading {url} to {directory}/{local_filename}')"",
            ""            if extract:"",
            ""                print(f'Extracting {local_filename} in {directory}')"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']"",
            ""wget = MockWget()""
        ]
    },
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    @staticmethod"",
            ""    def download(directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            local_filename = filenames if filenames else os.path.basename(url)"",
            ""            print(f'Downloading {url} to {directory}/{local_filename}')"",
            ""            if extract:"",
            ""                print(f'Extracting {local_filename} in {directory}')"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']"",
            ""wget = MockWget()""
        ]
    },
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    def download(self, directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            local_filename = filenames if filenames else os.path.basename(url)"",
            ""            print(f'Downloading {url} to {directory}/{local_filename}')"",
            ""            if extract:"",
            ""                print(f'Extracting {local_filename} in {directory}')"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']"",
            ""wget = MockWget()""
        ]
    },
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    def download(self, directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            local_filename = filenames if filenames else os.path.basename(url)"",
            ""            print(f'Downloading {url} to {directory}/{local_filename}')"",
            ""            if extract:"",
            ""                print(f'Extracting {local_filename} in {directory}')"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']"",
            ""wget = MockWget()""
        ]
    },
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    def download(self, directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            local_filename = filenames if filenames else os.path.basename(url)"",
            ""            print(f'Downloading {url} to {directory}/{local_filename}')"",
            ""            if extract:"",
            ""                print(f'Extracting {local_filename} in {directory}')"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']"",
            ""wget = MockWget()""
        ]
    },
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    def download(self, directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            local_filename = filenames if filenames else os.path.basename(url)"",
            ""            # Simulate file download action"",
            ""            print(f'Downloading {url} to {directory}/{local_filename}')"",
            ""            if extract:"",
            ""                # Simulate extraction action"",
            ""                print(f'Extracting {local_filename} in {directory}')"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']"",
            ""wget = MockWget()""
        ]
    },
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""class MockWget:"",
            ""    def download(self, directory, urls, filenames=None, extract=False):"",
            ""        if not os.path.exists(directory):"",
            ""            os.makedirs(directory)"",
            ""        if isinstance(urls, str):"",
            ""            urls = [urls]"",
            ""        for url in urls:"",
            ""            local_filename = filenames if filenames else os.path.basename(url)"",
            ""            print(f'Downloading {url} to {directory}/{local_filename}')"",
            ""            if extract:"",
            ""                print(f'Extracting {local_filename} in {directory}')"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip']"",
            ""wget = MockWget()""
        ]
    }
]","[
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    def download(self, directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{filenames if filenames else os.path.basename(url)}') # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {filenames if filenames else os.path.basename(url)} in {directory}') # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    def download(self, directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            local_filename = filenames if filenames else os.path.basename(url) # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{local_filename}') # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {local_filename} in {directory}') # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    def download(self, directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            if filenames is None: # pragma: no cover"",
            ""                local_filename = os.path.basename(url) # pragma: no cover"",
            ""            else: # pragma: no cover"",
            ""                local_filename = filenames # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{local_filename}') # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {local_filename} in {directory}') # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    @staticmethod # pragma: no cover"",
            ""    def download(directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            local_filename = filenames if filenames else os.path.basename(url) # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{local_filename}') # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {local_filename} in {directory}') # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    @staticmethod # pragma: no cover"",
            ""    def download(directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            local_filename = filenames if filenames else os.path.basename(url) # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{local_filename}') # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {local_filename} in {directory}') # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    def download(self, directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            local_filename = filenames if filenames else os.path.basename(url) # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{local_filename}') # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {local_filename} in {directory}') # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    def download(self, directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            local_filename = filenames if filenames else os.path.basename(url) # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{local_filename}') # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {local_filename} in {directory}') # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    def download(self, directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            local_filename = filenames if filenames else os.path.basename(url) # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{local_filename}') # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {local_filename} in {directory}') # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    def download(self, directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            local_filename = filenames if filenames else os.path.basename(url) # pragma: no cover"",
            ""            # Simulate file download action # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{local_filename}') # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                # Simulate extraction action # pragma: no cover"",
            ""                print(f'Extracting {local_filename} in {directory}') # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockWget: # pragma: no cover"",
            ""    def download(self, directory, urls, filenames=None, extract=False): # pragma: no cover"",
            ""        if not os.path.exists(directory): # pragma: no cover"",
            ""            os.makedirs(directory) # pragma: no cover"",
            ""        if isinstance(urls, str): # pragma: no cover"",
            ""            urls = [urls] # pragma: no cover"",
            ""        for url in urls: # pragma: no cover"",
            ""            local_filename = filenames if filenames else os.path.basename(url) # pragma: no cover"",
            ""            print(f'Downloading {url} to {directory}/{local_filename}') # pragma: no cover"",
            ""            if extract: # pragma: no cover"",
            ""                print(f'Extracting {local_filename} in {directory}') # pragma: no cover"",
            ""urls = ['http://something.png', 'http://somthing.tar.gz', 'http://somthing.zip'] # pragma: no cover"",
            ""wget = MockWget() # pragma: no cover""
        ]
    }
]",3,11858,0.005929,1934,0.002901,0.008830000000000001
