prompt,raw_predictions,predictions,prompt_type,input_size,input_price,output_size,output_price,total_price
"Provide self-contained and concrete Python values to initialize the undefined variables in the code snippet.

# begin code snippet
class Gouda(Cheese):
    def __init__(self):
        super(Gouda).__init__(num_holes=10)


class Parmesan(Cheese):
    def __init__(self):
        super(Parmesan).__init__(num_holes=15) 


# end code snippet

# begin undefined variables
Cheese
# end undefined variables

# begin undefined attributes and methods

# end undefined attributes and methods

Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Cheese = type('Cheese', (), {'__init__': lambda self, num_holes: setattr(self, 'num_holes', num_holes)})""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:""
        ],
        ""initialization"": [
            ""Cheese = type('Cheese', (object,), {'__init__': lambda self, num_holes: setattr(self, 'num_holes', num_holes)}) )""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: pass""
        ],
        ""initialization"": [
            ""Cheese = type('Cheese', (object,), {'__init__': lambda self, num_holes: setattr(self, 'num_holes', num_holes)})  # Mock implementation of Cheese""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:""
        ],
        ""initialization"": [
            ""Cheese = type('Cheese', (object,), {'num_holes': 0})""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: pass""
        ],
        ""initialization"": [
            ""Cheese = type('Cheese', (object,), {})""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Cheese = type('Cheese', (object,), {'__init__': Cheese.__init__})""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Cheese = type('Cheese', (object,), {'__init__': Cheese.__init__})""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Cheese = type('Cheese', (object,), {'__init__': lambda self, num_holes: setattr(self, 'num_holes', num_holes)}) )""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: pass""
        ],
        ""initialization"": [
            ""Cheese = type('Cheese', (object,), {})""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:""
        ],
        ""initialization"": [
            ""Cheese = type('Cheese', (object,), {'num_holes': 0})""
        ]
    }
]","[
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Cheese = type('Cheese', (), {'__init__': lambda self, num_holes: setattr(self, 'num_holes', num_holes)}) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            """"
        ],
        ""initialization"": [
            """"
        ]
    },
    {
        ""imports"": [
            ""class Cheese: pass # pragma: no cover""
        ],
        ""initialization"": [
            ""Cheese = type('Cheese', (object,), {'__init__': lambda self, num_holes: setattr(self, 'num_holes', num_holes)})  # Mock implementation of Cheese # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            """"
        ],
        ""initialization"": [
            ""Cheese = type('Cheese', (object,), {'num_holes': 0}) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: pass # pragma: no cover""
        ],
        ""initialization"": [
            ""Cheese = type('Cheese', (object,), {}) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Cheese = type('Cheese', (object,), {'__init__': Cheese.__init__}) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Cheese = type('Cheese', (object,), {'__init__': Cheese.__init__}) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            """"
        ]
    },
    {
        ""imports"": [
            ""class Cheese: pass # pragma: no cover""
        ],
        ""initialization"": [
            ""Cheese = type('Cheese', (object,), {}) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            """"
        ],
        ""initialization"": [
            ""Cheese = type('Cheese', (object,), {'num_holes': 0}) # pragma: no cover""
        ]
    }
]",1,345,0.0001725,664,0.000996,0.0011684999999999
"When trying to execute the code snippet with the provided imports and initialization, the following error happens:
# begin error message
Execution error at line 2:
    class Gouda(Cheese):
NameError: name 'Cheese' is not defined
# end error message

Please, provide self-contained and concrete Python fixed values of the imports and initialization to solve the error and make the code snippet executable.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [],
        ""initialization"": [
            ""class Cheese:\n    def __init__(self, num_holes):\n        self.num_holes = num_holes""
        ]
    },
    {
        ""imports"": [],
        ""initialization"": [
            ""class Cheese:\n    def __init__(self, num_holes):\n        self.num_holes = num_holes""
        ]
    },
    {
        ""imports"": [],
        ""initialization"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ]
    },
    {
        ""imports"": [],
        ""initialization"": [
            ""class Cheese:\n    def __init__(self, num_holes):\n        self.num_holes = num_holes""
        ]
    },
    {
        ""imports"": [],
        ""initialization"": [
            ""class Cheese: def __init__(self, num_holes): self.num_holes = num_holes""
        ]
    },
    {
        ""imports"": [],
        ""initialization"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ]
    },
    {
        ""imports"": [],
        ""initialization"": [
            ""class Cheese: \n    def __init__(self, num_holes): \n        self.num_holes = num_holes""
        ]
    },
    {
        ""imports"": [],
        ""initialization"": [
            ""class Cheese:\n    def __init__(self, num_holes):\n        self.num_holes = num_holes""
        ]
    },
    {
        ""imports"": [],
        ""initialization"": [
            ""class Cheese:\n    def __init__(self, num_holes):\n        self.num_holes = num_holes""
        ]
    },
    {
        ""imports"": [],
        ""initialization"": [
            ""class Cheese: "",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ]
    }
]","[
    {
        ""imports"": [
            """"
        ],
        ""initialization"": [
            ""class Cheese:# pragma: no cover"",
            ""    def __init__(self, num_holes):# pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            """"
        ],
        ""initialization"": [
            ""class Cheese:# pragma: no cover"",
            ""    def __init__(self, num_holes):# pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            """"
        ],
        ""initialization"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            """"
        ],
        ""initialization"": [
            ""class Cheese:# pragma: no cover"",
            ""    def __init__(self, num_holes):# pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            """"
        ],
        ""initialization"": [
            """"
        ]
    },
    {
        ""imports"": [
            """"
        ],
        ""initialization"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            """"
        ],
        ""initialization"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            """"
        ],
        ""initialization"": [
            ""class Cheese:# pragma: no cover"",
            ""    def __init__(self, num_holes):# pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            """"
        ],
        ""initialization"": [
            ""class Cheese:# pragma: no cover"",
            ""    def __init__(self, num_holes):# pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            """"
        ],
        ""initialization"": [
            ""class Cheese:  # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ]
    }
]",2,705,0.0003525,493,0.0007395,0.001092
"When trying to execute the code snippet with the provided imports and initialization, the lines with # uncovered are not executed.

# begin code snippet
class Gouda(Cheese):
    def __init__(self): # uncovered
        super(Gouda).__init__(num_holes=10) # uncovered
class Parmesan(Cheese):
    def __init__(self): # uncovered
        super(Parmesan).__init__(num_holes=15)  # uncovered

# end code snippet

Please, provide self-contained and concrete Python modified values of the imports and initialization to execute one of the uncovered paths in the code snippet.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""class Cheese: pass""
        ],
        ""initialization"": [
            ""Cheese = type('Cheese', (object,), {'__init__': lambda self, num_holes: None})""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {})"",
            ""Parmesan = type('Parmesan', (Cheese,), {})""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {})"",
            ""Parmesan = type('Parmesan', (Cheese,), {})""
        ]
    },
    {
        ""imports"": [
            ""class Cheese(object):"",
            ""def __init__(self, num_holes):"",
            ""self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Cheese = type('Cheese', (object,), {'__init__': lambda self, num_holes: setattr(self, 'num_holes', num_holes)})""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: pass""
        ],
        ""initialization"": [
            ""Cheese = type('Cheese', (object,), {'num_holes': 0})"",
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__()})"",
            ""Parmesan = type('Parmesan', (Cheese,), {'__init__': lambda self: super(Parmesan, self).__init__()})""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: pass""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {})"",
            ""Parmesan = type('Parmesan', (Cheese,), {})""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: pass""
        ],
        ""initialization"": [
            ""Cheese = type('Cheese', (object,), {'__init__': lambda self, num_holes: None})""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: pass""
        ],
        ""initialization"": [
            ""Cheese = type('Cheese', (object,), {'__init__': lambda self, num_holes: setattr(self, 'num_holes', num_holes)}) )""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: pass""
        ],
        ""initialization"": [
            ""Cheese = type('Cheese', (object,), {'num_holes': 0})""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {})"",
            ""Parmesan = type('Parmesan', (Cheese,), {})"",
            ""gouda_cheese = Gouda()"",
            ""parmesan_cheese = Parmesan()""
        ]
    }
]","[
    {
        ""imports"": [
            ""class Cheese: pass # pragma: no cover""
        ],
        ""initialization"": [
            ""Cheese = type('Cheese', (object,), {'__init__': lambda self, num_holes: None}) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {}) # pragma: no cover"",
            ""Parmesan = type('Parmesan', (Cheese,), {}) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {}) # pragma: no cover"",
            ""Parmesan = type('Parmesan', (Cheese,), {}) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            """"
        ],
        ""initialization"": [
            ""Cheese = type('Cheese', (object,), {'__init__': lambda self, num_holes: setattr(self, 'num_holes', num_holes)}) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: pass # pragma: no cover""
        ],
        ""initialization"": [
            ""Cheese = type('Cheese', (object,), {'num_holes': 0}) # pragma: no cover"",
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__()}) # pragma: no cover"",
            ""Parmesan = type('Parmesan', (Cheese,), {'__init__': lambda self: super(Parmesan, self).__init__()}) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: pass # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {}) # pragma: no cover"",
            ""Parmesan = type('Parmesan', (Cheese,), {}) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: pass # pragma: no cover""
        ],
        ""initialization"": [
            ""Cheese = type('Cheese', (object,), {'__init__': lambda self, num_holes: None}) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: pass # pragma: no cover""
        ],
        ""initialization"": [
            """"
        ]
    },
    {
        ""imports"": [
            ""class Cheese: pass # pragma: no cover""
        ],
        ""initialization"": [
            ""Cheese = type('Cheese', (object,), {'num_holes': 0}) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {}) # pragma: no cover"",
            ""Parmesan = type('Parmesan', (Cheese,), {}) # pragma: no cover""
        ]
    }
]",3,363,0.0001815,805,0.0012075,0.001389
"When trying to execute the code snippet with the provided imports and initialization, the lines with # uncovered are not executed.

# begin code snippet
class Gouda(Cheese):
    def __init__(self): # uncovered
        super(Gouda).__init__(num_holes=10) # uncovered
class Parmesan(Cheese):
    def __init__(self): # uncovered
        super(Parmesan).__init__(num_holes=15)  # uncovered

# end code snippet

Please, provide self-contained and concrete Python modified values of the imports and initialization to execute one of the uncovered paths in the code snippet.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""Parmesan = type('Parmesan', (Cheese,), {'__init__': lambda self: super(Parmesan, self).__init__(15)})""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""Parmesan = type('Parmesan', (Cheese,), {'__init__': lambda self: super(Parmesan, self).__init__(15)})""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""Parmesan = type('Parmesan', (Cheese,), {'__init__': lambda self: super(Parmesan, self).__init__(15)})""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(num_holes=10)})"",
            ""Parmesan = type('Parmesan', (Cheese,), {'__init__': lambda self: super(Parmesan, self).__init__(num_holes=15)})""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(num_holes=10)})"",
            ""Parmesan = type('Parmesan', (Cheese,), {'__init__': lambda self: super(Parmesan, self).__init__(num_holes=15)})""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: pass""
        ],
        ""initialization"": [
            ""Cheese = type('Cheese', (object,), {'__init__': lambda self, num_holes: setattr(self, 'num_holes', num_holes)})"",
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(num_holes=10)})"",
            ""Parmesan = type('Parmesan', (Cheese,), {'__init__': lambda self: super(Parmesan, self).__init__(num_holes=15)})""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""Parmesan = type('Parmesan', (Cheese,), {'__init__': lambda self: super(Parmesan, self).__init__(15)})""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""Parmesan = type('Parmesan', (Cheese,), {'__init__': lambda self: super(Parmesan, self).__init__(15)})""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""Parmesan = type('Parmesan', (Cheese,), {'__init__': lambda self: super(Parmesan, self).__init__(15)})""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""Parmesan = type('Parmesan', (Cheese,), {'__init__': lambda self: super(Parmesan, self).__init__(15)})""
        ]
    }
]","[
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""Parmesan = type('Parmesan', (Cheese,), {'__init__': lambda self: super(Parmesan, self).__init__(15)}) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""Parmesan = type('Parmesan', (Cheese,), {'__init__': lambda self: super(Parmesan, self).__init__(15)}) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""Parmesan = type('Parmesan', (Cheese,), {'__init__': lambda self: super(Parmesan, self).__init__(15)}) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(num_holes=10)}) # pragma: no cover"",
            ""Parmesan = type('Parmesan', (Cheese,), {'__init__': lambda self: super(Parmesan, self).__init__(num_holes=15)}) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(num_holes=10)}) # pragma: no cover"",
            ""Parmesan = type('Parmesan', (Cheese,), {'__init__': lambda self: super(Parmesan, self).__init__(num_holes=15)}) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: pass # pragma: no cover""
        ],
        ""initialization"": [
            ""Cheese = type('Cheese', (object,), {'__init__': lambda self, num_holes: setattr(self, 'num_holes', num_holes)}) # pragma: no cover"",
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(num_holes=10)}) # pragma: no cover"",
            ""Parmesan = type('Parmesan', (Cheese,), {'__init__': lambda self: super(Parmesan, self).__init__(num_holes=15)}) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""Parmesan = type('Parmesan', (Cheese,), {'__init__': lambda self: super(Parmesan, self).__init__(15)}) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""Parmesan = type('Parmesan', (Cheese,), {'__init__': lambda self: super(Parmesan, self).__init__(15)}) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""Parmesan = type('Parmesan', (Cheese,), {'__init__': lambda self: super(Parmesan, self).__init__(15)}) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""Parmesan = type('Parmesan', (Cheese,), {'__init__': lambda self: super(Parmesan, self).__init__(15)}) # pragma: no cover""
        ]
    }
]",3,1508,0.000754,1319,0.0019785,0.0027324999999999
"When trying to execute the code snippet with the provided imports and initialization, the lines with # uncovered are not executed.

# begin code snippet
class Gouda(Cheese):
    def __init__(self): # uncovered
        super(Gouda).__init__(num_holes=10) # uncovered
class Parmesan(Cheese):
    def __init__(self): # uncovered
        super(Parmesan).__init__(num_holes=15)  # uncovered

# end code snippet

Please, provide self-contained and concrete Python modified values of the imports and initialization to execute one of the uncovered paths in the code snippet.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""Parmesan = type('Parmesan', (Cheese,), {'__init__': lambda self: super(Parmesan, self).__init__(15)})""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""Parmesan = type('Parmesan', (Cheese,), {'__init__': lambda self: super(Parmesan, self).__init__(15)})"",
            ""gouda_cheese = Gouda()"",
            ""parmesan_cheese = Parmesan()""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""Parmesan = type('Parmesan', (Cheese,), {'__init__': lambda self: super(Parmesan, self).__init__(15)})"",
            ""gouda_cheese = Gouda()""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""Parmesan = type('Parmesan', (Cheese,), {'__init__': lambda self: super(Parmesan, self).__init__(15)})"",
            ""gouda_instance = Gouda()"",
            ""parmesan_instance = Parmesan()""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""gouda = Gouda()"",
            ""parmesan = Parmesan()""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""Parmesan = type('Parmesan', (Cheese,), {'__init__': lambda self: super(Parmesan, self).__init__(15)})"",
            ""gouda_cheese = Gouda()""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""Parmesan = type('Parmesan', (Cheese,), {'__init__': lambda self: super(Parmesan, self).__init__(15)})"",
            ""gouda_cheese_instance = Gouda()""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""parmesan_cheese = Parmesan()""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""gouda = Gouda()"",
            ""parmesan = Parmesan()""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""Parmesan = type('Parmesan', (Cheese,), {'__init__': lambda self: super(Parmesan, self).__init__(15)})"",
            ""gouda_cheese = Gouda()""
        ]
    }
]","[
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""Parmesan = type('Parmesan', (Cheese,), {'__init__': lambda self: super(Parmesan, self).__init__(15)}) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""Parmesan = type('Parmesan', (Cheese,), {'__init__': lambda self: super(Parmesan, self).__init__(15)}) # pragma: no cover"",
            ""gouda_cheese = Gouda() # pragma: no cover"",
            ""parmesan_cheese = Parmesan() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""Parmesan = type('Parmesan', (Cheese,), {'__init__': lambda self: super(Parmesan, self).__init__(15)}) # pragma: no cover"",
            ""gouda_cheese = Gouda() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""Parmesan = type('Parmesan', (Cheese,), {'__init__': lambda self: super(Parmesan, self).__init__(15)}) # pragma: no cover"",
            ""gouda_instance = Gouda() # pragma: no cover"",
            ""parmesan_instance = Parmesan() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""Parmesan = type('Parmesan', (Cheese,), {'__init__': lambda self: super(Parmesan, self).__init__(15)}) # pragma: no cover"",
            ""gouda_cheese = Gouda() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""Parmesan = type('Parmesan', (Cheese,), {'__init__': lambda self: super(Parmesan, self).__init__(15)}) # pragma: no cover"",
            ""gouda_cheese_instance = Gouda() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""Parmesan = type('Parmesan', (Cheese,), {'__init__': lambda self: super(Parmesan, self).__init__(15)}) # pragma: no cover"",
            ""gouda_cheese = Gouda() # pragma: no cover""
        ]
    }
]",3,3167,0.0015835,1234,0.001851,0.0034345
"When trying to execute the code snippet with the provided imports and initialization, the lines with # uncovered are not executed.

# begin code snippet
class Gouda(Cheese):
    def __init__(self): # uncovered
        super(Gouda).__init__(num_holes=10) # uncovered
class Parmesan(Cheese):
    def __init__(self): # uncovered
        super(Parmesan).__init__(num_holes=15)  # uncovered

# end code snippet

Please, provide self-contained and concrete Python modified values of the imports and initialization to execute one of the uncovered paths in the code snippet.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""gouda_instance = Gouda()""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""gouda_instance = Gouda()"",
            ""parmesan_instance = Parmesan()""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""gouda_instance = Gouda()"",
            ""parmesan_instance = Parmesan()""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""gouda_instance = Gouda()""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""gouda_instance = Gouda()""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""gouda_instance = Gouda()""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""Parmesan = type('Parmesan', (Cheese,), {'__init__': lambda self: super(Parmesan, self).__init__(15)})"",
            ""gouda_instance = Gouda()""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""gouda_instance = Gouda()""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(num_holes=10)})"",
            ""Parmesan = type('Parmesan', (Cheese,), {'__init__': lambda self: super(Parmesan, self).__init__(num_holes=15)})"",
            ""gouda_instance = Gouda()""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""Parmesan = type('Parmesan', (Cheese,), {'__init__': lambda self: super(Parmesan, self).__init__(15)})"",
            ""gouda_instance = Gouda()""
        ]
    }
]","[
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""gouda_instance = Gouda() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""gouda_instance = Gouda() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""gouda_instance = Gouda() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""gouda_instance = Gouda() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""Parmesan = type('Parmesan', (Cheese,), {'__init__': lambda self: super(Parmesan, self).__init__(15)}) # pragma: no cover"",
            ""gouda_instance = Gouda() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""gouda_instance = Gouda() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(num_holes=10)}) # pragma: no cover"",
            ""Parmesan = type('Parmesan', (Cheese,), {'__init__': lambda self: super(Parmesan, self).__init__(num_holes=15)}) # pragma: no cover"",
            ""gouda_instance = Gouda() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""Parmesan = type('Parmesan', (Cheese,), {'__init__': lambda self: super(Parmesan, self).__init__(15)}) # pragma: no cover"",
            ""gouda_instance = Gouda() # pragma: no cover""
        ]
    }
]",3,4741,0.0023705,1078,0.001617,0.0039875
"When trying to execute the code snippet with the provided imports and initialization, the lines with # uncovered are not executed.

# begin code snippet
class Gouda(Cheese):
    def __init__(self): # uncovered
        super(Gouda).__init__(num_holes=10) # uncovered
class Parmesan(Cheese):
    def __init__(self): # uncovered
        super(Parmesan).__init__(num_holes=15)  # uncovered

# end code snippet

Please, provide self-contained and concrete Python modified values of the imports and initialization to execute one of the uncovered paths in the code snippet.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""gouda_instance = Gouda()""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""gouda_instance = Gouda()""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""gouda_instance = Gouda()""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""gouda_instance = Gouda()""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""gouda_instance = Gouda()""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""gouda_instance = Gouda()""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""gouda_instance = Gouda()""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""gouda_instance = Gouda()""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""gouda_instance = Gouda()""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""gouda_instance = Gouda()""
        ]
    }
]","[
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""gouda_instance = Gouda() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""gouda_instance = Gouda() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""gouda_instance = Gouda() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""gouda_instance = Gouda() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""gouda_instance = Gouda() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""gouda_instance = Gouda() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""gouda_instance = Gouda() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""gouda_instance = Gouda() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""gouda_instance = Gouda() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""gouda_instance = Gouda() # pragma: no cover""
        ]
    }
]",3,6159,0.0030795,1010,0.001515,0.0045945
"When trying to execute the code snippet with the provided imports and initialization, the lines with # uncovered are not executed.

# begin code snippet
class Gouda(Cheese):
    def __init__(self): # uncovered
        super(Gouda).__init__(num_holes=10) # uncovered
class Parmesan(Cheese):
    def __init__(self): # uncovered
        super(Parmesan).__init__(num_holes=15)  # uncovered

# end code snippet

Please, provide self-contained and concrete Python modified values of the imports and initialization to execute one of the uncovered paths in the code snippet.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""gouda_instance = Gouda()""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""gouda_instance = Gouda()""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""gouda_instance = Gouda()""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(num_holes=10)})"",
            ""gouda_instance = Gouda()""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""gouda_instance = Gouda()""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""parmesan_instance = Parmesan()""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""gouda_instance = Gouda()""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""gouda_instance = Gouda()""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""gouda_instance = Gouda()""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""gouda_instance = Gouda()""
        ]
    }
]","[
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""gouda_instance = Gouda() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""gouda_instance = Gouda() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""gouda_instance = Gouda() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(num_holes=10)}) # pragma: no cover"",
            ""gouda_instance = Gouda() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""gouda_instance = Gouda() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""gouda_instance = Gouda() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""gouda_instance = Gouda() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""gouda_instance = Gouda() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""gouda_instance = Gouda() # pragma: no cover""
        ]
    }
]",3,7509,0.0037545,1013,0.0015195,0.005274
"When trying to execute the code snippet with the provided imports and initialization, the lines with # uncovered are not executed.

# begin code snippet
class Gouda(Cheese):
    def __init__(self): # uncovered
        super(Gouda).__init__(num_holes=10) # uncovered
class Parmesan(Cheese):
    def __init__(self): # uncovered
        super(Parmesan).__init__(num_holes=15)  # uncovered

# end code snippet

Please, provide self-contained and concrete Python modified values of the imports and initialization to execute one of the uncovered paths in the code snippet.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""gouda_instance = Gouda()""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""Parmesan = type('Parmesan', (Cheese,), {'__init__': lambda self: super(Parmesan, self).__init__(15)})"",
            ""gouda_instance = Gouda()""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""gouda_instance = Gouda()""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""gouda_instance = Gouda()""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""gouda_instance = Gouda()""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""gouda_instance = Gouda()""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: "",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""Parmesan = type('Parmesan', (Cheese,), {'__init__': lambda self: super(Parmesan, self).__init__(15)})"",
            ""gouda_instance = Gouda()""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""Parmesan = type('Parmesan', (Cheese,), {'__init__': lambda self: super(Parmesan, self).__init__(15)})"",
            ""gouda_instance = Gouda()""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""gouda_instance = Gouda()""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""gouda_instance = Gouda()""
        ]
    }
]","[
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""gouda_instance = Gouda() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""Parmesan = type('Parmesan', (Cheese,), {'__init__': lambda self: super(Parmesan, self).__init__(15)}) # pragma: no cover"",
            ""gouda_instance = Gouda() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""gouda_instance = Gouda() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""gouda_instance = Gouda() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""gouda_instance = Gouda() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""gouda_instance = Gouda() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:  # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""Parmesan = type('Parmesan', (Cheese,), {'__init__': lambda self: super(Parmesan, self).__init__(15)}) # pragma: no cover"",
            ""gouda_instance = Gouda() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""Parmesan = type('Parmesan', (Cheese,), {'__init__': lambda self: super(Parmesan, self).__init__(15)}) # pragma: no cover"",
            ""gouda_instance = Gouda() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""gouda_instance = Gouda() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""gouda_instance = Gouda() # pragma: no cover""
        ]
    }
]",3,8862,0.004431,1125,0.0016875,0.0061185
"When trying to execute the code snippet with the provided imports and initialization, the lines with # uncovered are not executed.

# begin code snippet
class Gouda(Cheese):
    def __init__(self): # uncovered
        super(Gouda).__init__(num_holes=10) # uncovered
class Parmesan(Cheese):
    def __init__(self): # uncovered
        super(Parmesan).__init__(num_holes=15)  # uncovered

# end code snippet

Please, provide self-contained and concrete Python modified values of the imports and initialization to execute one of the uncovered paths in the code snippet.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(num_holes=10)})"",
            ""gouda_instance = Gouda()""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""gouda_instance = Gouda()""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""Parmesan = type('Parmesan', (Cheese,), {'__init__': lambda self: super(Parmesan, self).__init__(15)})"",
            ""gouda_instance = Gouda()""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""gouda_instance = Gouda()""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: "",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""gouda_instance = Gouda()""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""gouda_instance = Gouda()""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""Parmesan = type('Parmesan', (Cheese,), {'__init__': lambda self: super(Parmesan, self).__init__(15)})"",
            ""gouda_instance = Gouda()""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""gouda_instance = Gouda()""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""gouda_instance = Gouda()""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""Parmesan = type('Parmesan', (Cheese,), {'__init__': lambda self: super(Parmesan, self).__init__(15)})"",
            ""gouda_instance = Gouda()""
        ]
    }
]","[
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(num_holes=10)}) # pragma: no cover"",
            ""gouda_instance = Gouda() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""gouda_instance = Gouda() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""Parmesan = type('Parmesan', (Cheese,), {'__init__': lambda self: super(Parmesan, self).__init__(15)}) # pragma: no cover"",
            ""gouda_instance = Gouda() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""gouda_instance = Gouda() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:  # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""gouda_instance = Gouda() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""gouda_instance = Gouda() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""Parmesan = type('Parmesan', (Cheese,), {'__init__': lambda self: super(Parmesan, self).__init__(15)}) # pragma: no cover"",
            ""gouda_instance = Gouda() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""gouda_instance = Gouda() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""gouda_instance = Gouda() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""Parmesan = type('Parmesan', (Cheese,), {'__init__': lambda self: super(Parmesan, self).__init__(15)}) # pragma: no cover"",
            ""gouda_instance = Gouda() # pragma: no cover""
        ]
    }
]",3,10327,0.0051635,1129,0.0016935,0.0068569999999999
"When trying to execute the code snippet with the provided imports and initialization, the lines with # uncovered are not executed.

# begin code snippet
class Gouda(Cheese):
    def __init__(self): # uncovered
        super(Gouda).__init__(num_holes=10) # uncovered
class Parmesan(Cheese):
    def __init__(self): # uncovered
        super(Parmesan).__init__(num_holes=15)  # uncovered

# end code snippet

Please, provide self-contained and concrete Python modified values of the imports and initialization to execute one of the uncovered paths in the code snippet.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""gouda_instance = Gouda()""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""gouda_instance = Gouda()""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""Parmesan = type('Parmesan', (Cheese,), {'__init__': lambda self: super(Parmesan, self).__init__(15)})"",
            ""gouda_instance = Gouda()""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""gouda_instance = Gouda()""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""gouda_instance = Gouda()""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""gouda_instance = Gouda()""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""gouda_instance = Gouda()""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""gouda_instance = Gouda()""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""gouda_instance = Gouda()""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""gouda_instance = Gouda()""
        ]
    }
]","[
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""gouda_instance = Gouda() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""gouda_instance = Gouda() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""Parmesan = type('Parmesan', (Cheese,), {'__init__': lambda self: super(Parmesan, self).__init__(15)}) # pragma: no cover"",
            ""gouda_instance = Gouda() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""gouda_instance = Gouda() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""gouda_instance = Gouda() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""gouda_instance = Gouda() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""gouda_instance = Gouda() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""gouda_instance = Gouda() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""gouda_instance = Gouda() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""gouda_instance = Gouda() # pragma: no cover""
        ]
    }
]",3,11796,0.005898,1048,0.001572,0.0074699999999999
"When trying to execute the code snippet with the provided imports and initialization, the lines with # uncovered are not executed.

# begin code snippet
class Gouda(Cheese):
    def __init__(self): # uncovered
        super(Gouda).__init__(num_holes=10) # uncovered
class Parmesan(Cheese):
    def __init__(self): # uncovered
        super(Parmesan).__init__(num_holes=15)  # uncovered

# end code snippet

Please, provide self-contained and concrete Python modified values of the imports and initialization to execute one of the uncovered paths in the code snippet.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(num_holes=10)})"",
            ""gouda_instance = Gouda()""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""gouda_instance = Gouda()""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""gouda_instance = Gouda()""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""gouda_instance = Gouda()""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""gouda_instance = Gouda()""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""gouda_instance = Gouda()""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""gouda_instance = Gouda()""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""gouda_instance = Gouda()"",
            ""Parmesan = type('Parmesan', (Cheese,), {'__init__': lambda self: super(Parmesan, self).__init__(15)})""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""gouda_instance = Gouda()""
        ]
    },
    {
        ""imports"": [
            ""class Cheese:"",
            ""    def __init__(self, num_holes):"",
            ""        self.num_holes = num_holes""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)})"",
            ""gouda_instance = Gouda()""
        ]
    }
]","[
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(num_holes=10)}) # pragma: no cover"",
            ""gouda_instance = Gouda() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""gouda_instance = Gouda() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""gouda_instance = Gouda() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""gouda_instance = Gouda() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""gouda_instance = Gouda() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""gouda_instance = Gouda() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""gouda_instance = Gouda() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""gouda_instance = Gouda() # pragma: no cover"",
            ""Parmesan = type('Parmesan', (Cheese,), {'__init__': lambda self: super(Parmesan, self).__init__(15)}) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""gouda_instance = Gouda() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""class Cheese: # pragma: no cover"",
            ""    def __init__(self, num_holes): # pragma: no cover"",
            ""        self.num_holes = num_holes # pragma: no cover""
        ],
        ""initialization"": [
            ""Gouda = type('Gouda', (Cheese,), {'__init__': lambda self: super(Gouda, self).__init__(10)}) # pragma: no cover"",
            ""gouda_instance = Gouda() # pragma: no cover""
        ]
    }
]",3,12039,0.0060195,1052,0.001578,0.0075975
