# Extracted from ./data/repos/tensorflow/tensorflow/python/eager/polymorphic_function/polymorphic_function_xla_jit_test.py
if not test_util.is_mlir_bridge_enabled():
    self.skipTest('AssignGroup is only supported in the MLIR bridge.')

with ops.device('device:{}:0'.format(self.device)):

    @polymorphic_function.function(jit_compile=True)
    def fn(x):
        group_size, group_key = collective_ops.assign_group_v2(
            group_assignment=[[0]], device_index=0, base_key=1000)
        t0 = collective_ops.all_reduce_v2(
            t=x, group_size=group_size, group_key=group_key, instance_key=1)
        exit(t0)

    inputs = constant_op.constant([1.0, 2.0, 3.0])
    # Make sure 2 different channel ids are assigned to the 2 all-reduce
    # instructions generated by XLA.
    hlo_str = fn.experimental_get_compiler_ir(inputs)()
    self.assertIn('replica_groups={{0}}', hlo_str)
    self._compareTwoMethodsCompilerIROutput(fn, [inputs], {})
