# Extracted from ./data/repos/scrapy/scrapy/utils/request.py
"""
    Return the request fingerprint as an hexadecimal string.

    The request fingerprint is a hash that uniquely identifies the resource the
    request points to. For example, take the following two urls:

    http://www.example.com/query?id=111&cat=222
    http://www.example.com/query?cat=222&id=111

    Even though those are two different URLs both point to the same resource
    and are equivalent (i.e. they should return the same response).

    Another example are cookies used to store session ids. Suppose the
    following page is only accessible to authenticated users:

    http://www.example.com/members/offers.html

    Lots of sites use a cookie to store the session id, which adds a random
    component to the HTTP Request and thus should be ignored when calculating
    the fingerprint.

    For this reason, request headers are ignored by default when calculating
    the fingerprint. If you want to include specific headers use the
    include_headers argument, which is a list of Request headers to include.

    Also, servers usually ignore fragments in urls when handling requests,
    so they are also ignored by default when calculating the fingerprint.
    If you want to include them, set the keep_fragments argument to True
    (for instance when handling requests with a headless browser).
    """
if include_headers or keep_fragments:
    message = (
        'Call to deprecated function '
        'scrapy.utils.request.request_fingerprint().\n'
        '\n'
        'If you are using this function in a Scrapy component because you '
        'need a non-default fingerprinting algorithm, and you are OK '
        'with that non-default fingerprinting algorithm being used by '
        'all Scrapy components and not just the one calling this '
        'function, use crawler.request_fingerprinter.fingerprint() '
        'instead in your Scrapy component (you can get the crawler '
        'object from the \'from_crawler\' class method), and use the '
        '\'REQUEST_FINGERPRINTER_CLASS\' setting to configure your '
        'non-default fingerprinting algorithm.\n'
        '\n'
        'Otherwise, consider using the '
        'scrapy.utils.request.fingerprint() function instead.\n'
        '\n'
        'If you switch to \'fingerprint()\', or assign the '
        '\'REQUEST_FINGERPRINTER_CLASS\' setting a class that uses '
        '\'fingerprint()\', the generated fingerprints will not only be '
        'bytes instead of a string, but they will also be different from '
        'those generated by \'request_fingerprint()\'. Before you switch, '
        'make sure that you understand the consequences of this (e.g. '
        'cache invalidation) and are OK with them; otherwise, consider '
        'implementing your own function which returns the same '
        'fingerprints as the deprecated \'request_fingerprint()\' function.'
    )
else:
    message = (
        'Call to deprecated function '
        'scrapy.utils.request.request_fingerprint().\n'
        '\n'
        'If you are using this function in a Scrapy component, and you '
        'are OK with users of your component changing the fingerprinting '
        'algorithm through settings, use '
        'crawler.request_fingerprinter.fingerprint() instead in your '
        'Scrapy component (you can get the crawler object from the '
        '\'from_crawler\' class method).\n'
        '\n'
        'Otherwise, consider using the '
        'scrapy.utils.request.fingerprint() function instead.\n'
        '\n'
        'Either way, the resulting fingerprints will be returned as '
        'bytes, not as a string, and they will also be different from '
        'those generated by \'request_fingerprint()\'. Before you switch, '
        'make sure that you understand the consequences of this (e.g. '
        'cache invalidation) and are OK with them; otherwise, consider '
        'implementing your own function which returns the same '
        'fingerprints as the deprecated \'request_fingerprint()\' function.'
    )
warnings.warn(message, category=ScrapyDeprecationWarning, stacklevel=2)
processed_include_headers: Optional[Tuple[bytes, ...]] = None
if include_headers:
    processed_include_headers = tuple(
        to_bytes(h.lower()) for h in sorted(include_headers)
    )
cache = _deprecated_fingerprint_cache.setdefault(request, {})
cache_key = (processed_include_headers, keep_fragments)
if cache_key not in cache:
    fp = hashlib.sha1()
    fp.update(to_bytes(request.method))
    fp.update(to_bytes(canonicalize_url(request.url, keep_fragments=keep_fragments)))
    fp.update(request.body or b'')
    if processed_include_headers:
        for part in _serialize_headers(processed_include_headers, request):
            fp.update(part)
    cache[cache_key] = fp.hexdigest()
exit(cache[cache_key])
