prompt,raw_predictions,predictions,prompt_type,input_size,input_price,output_size,output_price,total_price
"Provide self-contained and concrete Python values to initialize the undefined variables in the code snippet.

# begin code snippet
if prev_siblings_are(
    leaf.parent, [None, token.NEWLINE, token.INDENT, syms.simple_stmt]
):
    exit(True)

# Multiline docstring on the same line as the `def`.
if prev_siblings_are(leaf.parent, [syms.parameters, token.COLON, syms.simple_stmt]):
    # `syms.parameters` is only used in funcdefs and async_funcdefs in the Python
    # grammar. We're safe to return True without further checks.
    exit(True)

exit(False)

# end code snippet

# begin undefined variables
prev_siblings_are
leaf
token
syms
# end undefined variables

# begin undefined attributes and methods
leaf.parent
token.NEWLINE
token.INDENT
syms.simple_stmt
syms.parameters
token.COLON
# end undefined attributes and methods

Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""from typing import List, Any""
        ],
        ""initialization"": [
            ""class Mock: pass"",
            ""def prev_siblings_are(node: Any, siblings: List[Any]) -> bool: return True"",
            ""leaf = Mock()"",
            ""leaf.parent = Mock()"",
            ""token = Mock()"",
            ""token.NEWLINE = 'NEWLINE'"",
            ""token.INDENT = 'INDENT'"",
            ""syms = Mock()"",
            ""syms.simple_stmt = 'simple_stmt'"",
            ""syms.parameters = 'parameters'"",
            ""token.COLON = 'COLON'""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Any"",
            ""import token""
        ],
        ""initialization"": [
            ""class MockNode: pass"",
            ""class Symbols: simple_stmt = 'simple_stmt'; parameters = 'parameters'"",
            ""leaf = MockNode()"",
            ""leaf.parent = None"",
            ""syms = Symbols()"",
            ""def prev_siblings_are(parent: Any, tokens: List[Any]) -> bool: return False""
        ]
    },
    {
        ""imports"": [
            ""import token"",
            ""from types import SimpleNamespace""
        ],
        ""initialization"": [
            ""prev_siblings_are = lambda parent, lst: True"",
            ""leaf = SimpleNamespace(parent=SimpleNamespace())"",
            ""syms = type('Mock', (object,), {'simple_stmt': 0, 'parameters': 1})"",
            ""token.NEWLINE = 2"",
            ""token.INDENT = 3"",
            ""token.COLON = 4""
        ]
    },
    {
        ""imports"": [
            ""import token""
        ],
        ""initialization"": [
            ""def prev_siblings_are(parent, tokens):\n    # Dummy function to illustrate the structure\n    return True"",
            ""leaf = type('MockLeaf', (object,), {'parent': None})()"",
            ""syms = type('MockSyms', (object,), {'simple_stmt': 'SIMPLE_STMT', 'parameters': 'PARAMETERS'})()""
        ]
    },
    {
        ""imports"": [
            ""import token"",
            ""import types"",
            ""from typing import List""
        ],
        ""initialization"": [
            ""prev_siblings_are = lambda parent, tokens: True"",
            ""leaf = type('MockLeaf', (object,), {'parent': type('MockParent', (object,), {})()})()"",
            ""syms = type('MockSyms', (object,), {'simple_stmt': 1, 'parameters': 2})()"",
            ""leaf.parent = type('MockParent', (object,), {})()"",
            ""token.NEWLINE = 55"",
            ""token.INDENT = 56"",
            ""token.COLON = 57""
        ]
    },
    {
        ""imports"": [
            ""import token"",
            ""from types import SimpleNamespace""
        ],
        ""initialization"": [
            ""prev_siblings_are = lambda parent, types: True"",
            ""leaf = SimpleNamespace(parent=SimpleNamespace())"",
            ""syms = type('MockSyms', (object,), {'simple_stmt': 1, 'parameters': 2})"",
            ""token.NEWLINE = 3"",
            ""token.INDENT = 4"",
            ""token.COLON = 5""
        ]
    },
    {
        ""imports"": [
            ""import token"",
            ""from types import SimpleNamespace""
        ],
        ""initialization"": [
            ""prev_siblings_are = lambda parent, tokens: True"",
            ""leaf = SimpleNamespace(parent=SimpleNamespace())"",
            ""syms = type('MockSymbols', (object,), {'simple_stmt': 256, 'parameters': 257})()"",
            ""leaf.parent = SimpleNamespace()"",
            ""syms.simple_stmt = 256"",
            ""syms.parameters = 257"",
            ""token.NEWLINE = 4"",
            ""token.INDENT = 5"",
            ""token.COLON = 7""
        ]
    },
    {
        ""imports"": [
            ""import token"",
            ""from types import SimpleNamespace""
        ],
        ""initialization"": [
            ""prev_siblings_are = lambda parent, types: True"",
            ""leaf = SimpleNamespace(parent=None)"",
            ""syms = type('Mock', (object,), {'simple_stmt': 'fake_simple_stmt', 'parameters': 'fake_parameters'})"",
            ""token.NEWLINE = 'fake_newline'"",
            ""token.INDENT = 'fake_indent'"",
            ""token.COLON = 'fake_colon'""
        ]
    },
    {
        ""imports"": [
            ""from unittest.mock import Mock""
        ],
        ""initialization"": [
            ""prev_siblings_are = Mock(return_value=False)"",
            ""leaf = Mock()"",
            ""leaf.parent = Mock()"",
            ""token = Mock()"",
            ""token.NEWLINE = Mock()"",
            ""token.INDENT = Mock()"",
            ""token.COLON = Mock()"",
            ""syms = Mock()"",
            ""syms.simple_stmt = Mock()"",
            ""syms.parameters = Mock()""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Any"",
            ""import token""
        ],
        ""initialization"": [
            ""def prev_siblings_are(parent: Any, siblings: List[Any]) -> bool:\n    return True"",
            ""leaf = type('Mock', (object,), {'parent': None})()"",
            ""syms = type('Mock', (object,), {'simple_stmt': 'simple_stmt', 'parameters': 'parameters'})()"",
            ""leaf.parent = type('Mock', (object,), {'new_attr': None})()""
        ]
    }
]","[
    {
        ""imports"": [
            ""from typing import List, Any # pragma: no cover""
        ],
        ""initialization"": [
            ""class Mock: pass # pragma: no cover"",
            ""def prev_siblings_are(node: Any, siblings: List[Any]) -> bool: return True # pragma: no cover"",
            ""leaf = Mock() # pragma: no cover"",
            ""leaf.parent = Mock() # pragma: no cover"",
            ""token = Mock() # pragma: no cover"",
            ""token.NEWLINE = 'NEWLINE' # pragma: no cover"",
            ""token.INDENT = 'INDENT' # pragma: no cover"",
            ""syms = Mock() # pragma: no cover"",
            ""syms.simple_stmt = 'simple_stmt' # pragma: no cover"",
            ""syms.parameters = 'parameters' # pragma: no cover"",
            ""token.COLON = 'COLON' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Any # pragma: no cover"",
            ""import token # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockNode: pass # pragma: no cover"",
            ""class Symbols: simple_stmt = 'simple_stmt'; parameters = 'parameters' # pragma: no cover"",
            ""leaf = MockNode() # pragma: no cover"",
            ""leaf.parent = None # pragma: no cover"",
            ""syms = Symbols() # pragma: no cover"",
            ""def prev_siblings_are(parent: Any, tokens: List[Any]) -> bool: return False # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import token # pragma: no cover"",
            ""from types import SimpleNamespace # pragma: no cover""
        ],
        ""initialization"": [
            ""prev_siblings_are = lambda parent, lst: True # pragma: no cover"",
            ""leaf = SimpleNamespace(parent=SimpleNamespace()) # pragma: no cover"",
            ""syms = type('Mock', (object,), {'simple_stmt': 0, 'parameters': 1}) # pragma: no cover"",
            ""token.NEWLINE = 2 # pragma: no cover"",
            ""token.INDENT = 3 # pragma: no cover"",
            ""token.COLON = 4 # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import token # pragma: no cover""
        ],
        ""initialization"": [
            ""def prev_siblings_are(parent, tokens):# pragma: no cover"",
            ""    # Dummy function to illustrate the structure# pragma: no cover"",
            ""    return True # pragma: no cover"",
            ""leaf = type('MockLeaf', (object,), {'parent': None})() # pragma: no cover"",
            ""syms = type('MockSyms', (object,), {'simple_stmt': 'SIMPLE_STMT', 'parameters': 'PARAMETERS'})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import token # pragma: no cover"",
            ""import types # pragma: no cover"",
            ""from typing import List # pragma: no cover""
        ],
        ""initialization"": [
            ""prev_siblings_are = lambda parent, tokens: True # pragma: no cover"",
            ""leaf = type('MockLeaf', (object,), {'parent': type('MockParent', (object,), {})()})() # pragma: no cover"",
            ""syms = type('MockSyms', (object,), {'simple_stmt': 1, 'parameters': 2})() # pragma: no cover"",
            ""leaf.parent = type('MockParent', (object,), {})() # pragma: no cover"",
            ""token.NEWLINE = 55 # pragma: no cover"",
            ""token.INDENT = 56 # pragma: no cover"",
            ""token.COLON = 57 # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import token # pragma: no cover"",
            ""from types import SimpleNamespace # pragma: no cover""
        ],
        ""initialization"": [
            ""prev_siblings_are = lambda parent, types: True # pragma: no cover"",
            ""leaf = SimpleNamespace(parent=SimpleNamespace()) # pragma: no cover"",
            ""syms = type('MockSyms', (object,), {'simple_stmt': 1, 'parameters': 2}) # pragma: no cover"",
            ""token.NEWLINE = 3 # pragma: no cover"",
            ""token.INDENT = 4 # pragma: no cover"",
            ""token.COLON = 5 # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import token # pragma: no cover"",
            ""from types import SimpleNamespace # pragma: no cover""
        ],
        ""initialization"": [
            ""prev_siblings_are = lambda parent, tokens: True # pragma: no cover"",
            ""leaf = SimpleNamespace(parent=SimpleNamespace()) # pragma: no cover"",
            ""syms = type('MockSymbols', (object,), {'simple_stmt': 256, 'parameters': 257})() # pragma: no cover"",
            ""leaf.parent = SimpleNamespace() # pragma: no cover"",
            ""syms.simple_stmt = 256 # pragma: no cover"",
            ""syms.parameters = 257 # pragma: no cover"",
            ""token.NEWLINE = 4 # pragma: no cover"",
            ""token.INDENT = 5 # pragma: no cover"",
            ""token.COLON = 7 # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import token # pragma: no cover"",
            ""from types import SimpleNamespace # pragma: no cover""
        ],
        ""initialization"": [
            ""prev_siblings_are = lambda parent, types: True # pragma: no cover"",
            ""leaf = SimpleNamespace(parent=None) # pragma: no cover"",
            ""syms = type('Mock', (object,), {'simple_stmt': 'fake_simple_stmt', 'parameters': 'fake_parameters'}) # pragma: no cover"",
            ""token.NEWLINE = 'fake_newline' # pragma: no cover"",
            ""token.INDENT = 'fake_indent' # pragma: no cover"",
            ""token.COLON = 'fake_colon' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from unittest.mock import Mock # pragma: no cover""
        ],
        ""initialization"": [
            ""prev_siblings_are = Mock(return_value=False) # pragma: no cover"",
            ""leaf = Mock() # pragma: no cover"",
            ""leaf.parent = Mock() # pragma: no cover"",
            ""token = Mock() # pragma: no cover"",
            ""token.NEWLINE = Mock() # pragma: no cover"",
            ""token.INDENT = Mock() # pragma: no cover"",
            ""token.COLON = Mock() # pragma: no cover"",
            ""syms = Mock() # pragma: no cover"",
            ""syms.simple_stmt = Mock() # pragma: no cover"",
            ""syms.parameters = Mock() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Any # pragma: no cover"",
            ""import token # pragma: no cover""
        ],
        ""initialization"": [
            ""def prev_siblings_are(parent: Any, siblings: List[Any]) -> bool:# pragma: no cover"",
            ""    return True # pragma: no cover"",
            ""leaf = type('Mock', (object,), {'parent': None})() # pragma: no cover"",
            ""syms = type('Mock', (object,), {'simple_stmt': 'simple_stmt', 'parameters': 'parameters'})() # pragma: no cover"",
            ""leaf.parent = type('Mock', (object,), {'new_attr': None})() # pragma: no cover""
        ]
    }
]",1,432,0.000216,1249,0.0018735,0.0020894999999999
"When trying to execute the code snippet with the provided imports and initialization, the following error happens:
# begin error message
Execution error at line :

# end error message

Please, provide self-contained and concrete Python fixed values of the imports and initialization to solve the error and make the code snippet executable.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""import token"",
            ""from typing import Any, List""
        ],
        ""initialization"": [
            ""class Mock: pass"",
            ""def prev_siblings_are(node: Any, siblings: List[Any]) -> bool: return True"",
            ""leaf = Mock()"",
            ""leaf.parent = Mock()"",
            ""syms = type('SymsMock', (object,), {'simple_stmt': 'simple_stmt', 'parameters': 'parameters'})""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Any""
        ],
        ""initialization"": [
            ""class Mock: pass"",
            ""def prev_siblings_are(node: Any, siblings: List[Any]) -> bool: return True"",
            ""leaf = Mock()"",
            ""leaf.parent = None"",
            ""token = type('Token', (object,), {'NEWLINE': 'NEWLINE', 'INDENT': 'INDENT', 'COLON': 'COLON'})()"",
            ""syms = type('Syms', (object,), {'simple_stmt': 'simple_stmt', 'parameters': 'parameters'})()""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Any""
        ],
        ""initialization"": [
            ""class Mock: pass"",
            ""def prev_siblings_are(node: Any, siblings: List[Any]) -> bool: return True"",
            ""leaf = Mock()"",
            ""leaf.parent = Mock()"",
            ""token = type('Mock', (object,), {'NEWLINE': 'NEWLINE', 'INDENT': 'INDENT', 'COLON': 'COLON'})"",
            ""syms = type('Mock', (object,), {'simple_stmt': 'simple_stmt', 'parameters': 'parameters'})""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Any""
        ],
        ""initialization"": [
            ""class Mock: pass"",
            ""def prev_siblings_are(node: Any, siblings: List[Any]) -> bool: return isinstance(node, Mock) and all(isinstance(s, str) for s in siblings)"",
            ""leaf = Mock()"",
            ""leaf.parent = Mock()"",
            ""token = type('Mock', (object,), {'NEWLINE': 'NEWLINE', 'INDENT': 'INDENT', 'COLON': 'COLON'})"",
            ""syms = type('Mock', (object,), {'simple_stmt': 'simple_stmt', 'parameters': 'parameters'})""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Any""
        ],
        ""initialization"": [
            ""class MockNode: pass"",
            ""def prev_siblings_are(node: Any, siblings: List[Any]) -> bool: return True"",
            ""leaf = MockNode()"",
            ""leaf.parent = MockNode()"",
            ""token = type('MockToken', (object,), {'NEWLINE': 'NEWLINE', 'INDENT': 'INDENT', 'COLON': 'COLON'})"",
            ""syms = type('MockSyms', (object,), {'simple_stmt': 'simple_stmt', 'parameters': 'parameters'})""
        ]
    },
    {
        ""imports"": [],
        ""initialization"": [
            ""class Mock: pass"",
            ""def prev_siblings_are(node, siblings): return True"",
            ""class Leaf: pass"",
            ""leaf = Leaf()"",
            ""leaf.parent = Mock()"",
            ""token = type('token', (object,), {'NEWLINE': 'NEWLINE', 'INDENT': 'INDENT', 'COLON': 'COLON'})"",
            ""syms = type('syms', (object,), {'simple_stmt': 'simple_stmt', 'parameters': 'parameters'})""
        ]
    },
    {
        ""imports"": [
            ""import token"",
            ""from typed_ast import ast3 as ast""
        ],
        ""initialization"": [
            ""class MockParent: pass"",
            ""leaf = type('Leaf', (object,), {'parent': MockParent()})"",
            ""token.NEWLINE = 'NEWLINE'"",
            ""token.INDENT = 'INDENT'"",
            ""token.COLON = ':'"",
            ""syms = type('Syms', (object,), {'simple_stmt': 'simple_stmt', 'parameters': 'parameters'})()"",
            ""def prev_siblings_are(node, siblings):"",
            ""    return True""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Any""
        ],
        ""initialization"": [
            ""class Mock: pass"",
            ""def prev_siblings_are(node: Any, siblings: List[Any]) -> bool: return True"",
            ""leaf = Mock()"",
            ""leaf.parent = Mock()"",
            ""token = type('Token', (object,), {'NEWLINE': 'NEWLINE', 'INDENT': 'INDENT', 'COLON': 'COLON'})()"",
            ""syms = type('Syms', (object,), {'simple_stmt': 'simple_stmt', 'parameters': 'parameters'})()""
        ]
    },
    {
        ""imports"": [
            ""import token""
        ],
        ""initialization"": [
            ""class Mock: pass"",
            ""def prev_siblings_are(node, siblings): return True"",
            ""leaf = Mock()"",
            ""leaf.parent = Mock()"",
            ""syms = type('MockSyms', (object,), {'simple_stmt': 'simple_stmt', 'parameters': 'parameters'})()"",
            ""token.COLON = ':'""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Any""
        ],
        ""initialization"": [
            ""class Mock: pass"",
            ""def prev_siblings_are(node: Any, siblings: List[Any]) -> bool: return True"",
            ""leaf = Mock()"",
            ""leaf.parent = Mock()"",
            ""token = type('token', (object,), {'NEWLINE': 'NEWLINE', 'INDENT': 'INDENT', 'COLON': 'COLON'})"",
            ""syms = type('syms', (object,), {'simple_stmt': 'simple_stmt', 'parameters': 'parameters'})""
        ]
    }
]","[
    {
        ""imports"": [
            ""import token # pragma: no cover"",
            ""from typing import Any, List # pragma: no cover""
        ],
        ""initialization"": [
            ""class Mock: pass # pragma: no cover"",
            ""def prev_siblings_are(node: Any, siblings: List[Any]) -> bool: return True # pragma: no cover"",
            ""leaf = Mock() # pragma: no cover"",
            ""leaf.parent = Mock() # pragma: no cover"",
            ""syms = type('SymsMock', (object,), {'simple_stmt': 'simple_stmt', 'parameters': 'parameters'}) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Any # pragma: no cover""
        ],
        ""initialization"": [
            ""class Mock: pass # pragma: no cover"",
            ""def prev_siblings_are(node: Any, siblings: List[Any]) -> bool: return True # pragma: no cover"",
            ""leaf = Mock() # pragma: no cover"",
            ""leaf.parent = None # pragma: no cover"",
            ""token = type('Token', (object,), {'NEWLINE': 'NEWLINE', 'INDENT': 'INDENT', 'COLON': 'COLON'})() # pragma: no cover"",
            ""syms = type('Syms', (object,), {'simple_stmt': 'simple_stmt', 'parameters': 'parameters'})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Any # pragma: no cover""
        ],
        ""initialization"": [
            ""class Mock: pass # pragma: no cover"",
            ""def prev_siblings_are(node: Any, siblings: List[Any]) -> bool: return True # pragma: no cover"",
            ""leaf = Mock() # pragma: no cover"",
            ""leaf.parent = Mock() # pragma: no cover"",
            ""token = type('Mock', (object,), {'NEWLINE': 'NEWLINE', 'INDENT': 'INDENT', 'COLON': 'COLON'}) # pragma: no cover"",
            ""syms = type('Mock', (object,), {'simple_stmt': 'simple_stmt', 'parameters': 'parameters'}) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Any # pragma: no cover""
        ],
        ""initialization"": [
            ""class Mock: pass # pragma: no cover"",
            ""def prev_siblings_are(node: Any, siblings: List[Any]) -> bool: return isinstance(node, Mock) and all(isinstance(s, str) for s in siblings) # pragma: no cover"",
            ""leaf = Mock() # pragma: no cover"",
            ""leaf.parent = Mock() # pragma: no cover"",
            ""token = type('Mock', (object,), {'NEWLINE': 'NEWLINE', 'INDENT': 'INDENT', 'COLON': 'COLON'}) # pragma: no cover"",
            ""syms = type('Mock', (object,), {'simple_stmt': 'simple_stmt', 'parameters': 'parameters'}) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Any # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockNode: pass # pragma: no cover"",
            ""def prev_siblings_are(node: Any, siblings: List[Any]) -> bool: return True # pragma: no cover"",
            ""leaf = MockNode() # pragma: no cover"",
            ""leaf.parent = MockNode() # pragma: no cover"",
            ""token = type('MockToken', (object,), {'NEWLINE': 'NEWLINE', 'INDENT': 'INDENT', 'COLON': 'COLON'}) # pragma: no cover"",
            ""syms = type('MockSyms', (object,), {'simple_stmt': 'simple_stmt', 'parameters': 'parameters'}) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            """"
        ],
        ""initialization"": [
            ""class Mock: pass # pragma: no cover"",
            ""def prev_siblings_are(node, siblings): return True # pragma: no cover"",
            ""class Leaf: pass # pragma: no cover"",
            ""leaf = Leaf() # pragma: no cover"",
            ""leaf.parent = Mock() # pragma: no cover"",
            ""token = type('token', (object,), {'NEWLINE': 'NEWLINE', 'INDENT': 'INDENT', 'COLON': 'COLON'}) # pragma: no cover"",
            ""syms = type('syms', (object,), {'simple_stmt': 'simple_stmt', 'parameters': 'parameters'}) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import token # pragma: no cover"",
            ""from typed_ast import ast3 as ast # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockParent: pass # pragma: no cover"",
            ""leaf = type('Leaf', (object,), {'parent': MockParent()}) # pragma: no cover"",
            ""token.NEWLINE = 'NEWLINE' # pragma: no cover"",
            ""token.INDENT = 'INDENT' # pragma: no cover"",
            ""token.COLON = ':' # pragma: no cover"",
            ""syms = type('Syms', (object,), {'simple_stmt': 'simple_stmt', 'parameters': 'parameters'})() # pragma: no cover"",
            ""def prev_siblings_are(node, siblings): # pragma: no cover"",
            ""    return True # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Any # pragma: no cover""
        ],
        ""initialization"": [
            ""class Mock: pass # pragma: no cover"",
            ""def prev_siblings_are(node: Any, siblings: List[Any]) -> bool: return True # pragma: no cover"",
            ""leaf = Mock() # pragma: no cover"",
            ""leaf.parent = Mock() # pragma: no cover"",
            ""token = type('Token', (object,), {'NEWLINE': 'NEWLINE', 'INDENT': 'INDENT', 'COLON': 'COLON'})() # pragma: no cover"",
            ""syms = type('Syms', (object,), {'simple_stmt': 'simple_stmt', 'parameters': 'parameters'})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import token # pragma: no cover""
        ],
        ""initialization"": [
            ""class Mock: pass # pragma: no cover"",
            ""def prev_siblings_are(node, siblings): return True # pragma: no cover"",
            ""leaf = Mock() # pragma: no cover"",
            ""leaf.parent = Mock() # pragma: no cover"",
            ""syms = type('MockSyms', (object,), {'simple_stmt': 'simple_stmt', 'parameters': 'parameters'})() # pragma: no cover"",
            ""token.COLON = ':' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Any # pragma: no cover""
        ],
        ""initialization"": [
            ""class Mock: pass # pragma: no cover"",
            ""def prev_siblings_are(node: Any, siblings: List[Any]) -> bool: return True # pragma: no cover"",
            ""leaf = Mock() # pragma: no cover"",
            ""leaf.parent = Mock() # pragma: no cover"",
            ""token = type('token', (object,), {'NEWLINE': 'NEWLINE', 'INDENT': 'INDENT', 'COLON': 'COLON'}) # pragma: no cover"",
            ""syms = type('syms', (object,), {'simple_stmt': 'simple_stmt', 'parameters': 'parameters'}) # pragma: no cover""
        ]
    }
]",2,844,0.000422,1334,0.002001,0.0024230000000000002
