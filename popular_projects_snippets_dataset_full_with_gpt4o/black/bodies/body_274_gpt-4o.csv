prompt,raw_predictions,predictions,prompt_type,input_size,input_price,output_size,output_price,total_price
"Provide self-contained and concrete Python values to initialize the undefined variables in the code snippet.

# begin code snippet
""""""Find cell magic, extract header and body.""""""
if (
    isinstance(node.value, ast.Call)
    and _is_ipython_magic(node.value.func)
    and node.value.func.attr == ""run_cell_magic""
):
    args = _get_str_args(node.value.args)
    self.cell_magic = CellMagic(name=args[0], params=args[1], body=args[2])
self.generic_visit(node)

# end code snippet

# begin undefined variables
node
ast
_is_ipython_magic
_get_str_args
self
CellMagic
# end undefined variables

# begin undefined attributes and methods
node.value
ast.Call
self.cell_magic
self.generic_visit
# end undefined attributes and methods

Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""import ast""
        ],
        ""initialization"": [
            ""node = type('MockNode', (object,), {'value': type('MockValue', (object,), {'func': type('MockFunc', (object,), {'attr': 'run_cell_magic'})(), 'args': []})()})"",
            ""_is_ipython_magic = lambda func: func.attr == 'run_cell_magic'"",
            ""_get_str_args = lambda args: ['name', 'params', 'body']"",
            ""self = type('MockSelf', (object,), {'cell_magic': None, 'generic_visit': lambda self, node: None})()"",
            ""CellMagic = lambda name, params, body: type('CellMagic', (object,), {'name': name, 'params': params, 'body': body})('name', 'params', 'body')""
        ]
    },
    {
        ""imports"": [
            ""import ast""
        ],
        ""initialization"": [
            ""node = type('Mock', (object,), {'value': type('Mock', (object,), {'func': type('Mock', (object,), {'attr': 'run_cell_magic'})()})()})()"",
            ""_is_ipython_magic = lambda x: True"",
            ""_get_str_args = lambda x: ['header', 'params', 'body']"",
            ""self = type('Mock', (object,), {'cell_magic': None, 'generic_visit': lambda self, node: None, 'visit': lambda self, node: None})()"",
            ""CellMagic = lambda name, params, body: type('CellMagic', (object,), {'name': name, 'params': params, 'body': body})()""
        ]
    },
    {
        ""imports"": [
            ""import ast""
        ],
        ""initialization"": [
            ""node = type('Mock', (object,), {'value': type('MockValue', (object,), {'func': type('MockFunc', (object,), {'attr': 'run_cell_magic'})(), 'args': ['magic_name', 'param_value', 'body_value']})()})()"",
            ""def _is_ipython_magic(func): return True"",
            ""def _get_str_args(args): return args"",
            ""self = type('MockSelf', (object,), {'cell_magic': None, 'generic_visit': lambda self, node: None})()"",
            ""CellMagic = lambda name, params, body: type('CellMagic', (object,), {'name': name, 'params': params, 'body': body})()""
        ]
    },
    {
        ""imports"": [
            ""import ast""
        ],
        ""initialization"": [
            ""node = type('Mock', (object,), {'value': type('Mock', (object,), {'func': type('Mock', (object,), {'attr': 'run_cell_magic'})()})()})()"",
            ""_is_ipython_magic = lambda func: func.attr == 'run_cell_magic'"",
            ""_get_str_args = lambda args: ['magic_name', 'params', 'body']"",
            ""self = type('Mock', (object,), {'cell_magic': None, 'generic_visit': lambda node: None})()"",
            ""CellMagic = lambda name, params, body: type('CellMagic', (object,), {'name': name, 'params': params, 'body': body})('magic_name', 'params', 'body')""
        ]
    },
    {
        ""imports"": [
            ""import ast""
        ],
        ""initialization"": [
            ""node = type('MockNode', (object,), {'value': type('MockValue', (object,), {'func': type('MockFunc', (object,), {'attr': 'run_cell_magic'})()})()})()"",
            ""_is_ipython_magic = lambda func: True"",
            ""_get_str_args = lambda args: ['name', 'params', 'body']"",
            ""self = type('Mock', (object,), {'cell_magic': None, 'generic_visit': lambda self, node: None})()"",
            ""CellMagic = type('CellMagic', (object,), {'__init__': lambda self, name, params, body: None})"",
            ""node.value.args = ['arg1', 'arg2', 'arg3']""
        ]
    },
    {
        ""imports"": [
            ""import ast""
        ],
        ""initialization"": [
            ""node = type('Node', (object,), {'value': type('Value', (object,), {'func': type('Func', (object,), {'attr': 'run_cell_magic'})(), 'args': []})()})()"",
            ""_is_ipython_magic = lambda x: True"",
            ""_get_str_args = lambda x: ['arg1', 'arg2', 'arg3']"",
            ""self = type('Self', (object,), {'cell_magic': None, 'generic_visit': lambda self, node: None})()"",
            ""CellMagic = type('CellMagic', (object,), {'__init__': lambda self, name, params, body: None})""
        ]
    },
    {
        ""imports"": [
            ""import ast""
        ],
        ""initialization"": [
            ""node = type('Mock', (object,), {'value': type('Mock', (object,), {'func': type('Mock', (object,), {'attr': 'run_cell_magic'})})()})()"",
            ""_is_ipython_magic = lambda func: func.attr == 'run_cell_magic'"",
            ""_get_str_args = lambda args: ['magic_name', 'params', 'body']"",
            ""self = type('Mock', (object,), {'cell_magic': None, 'generic_visit': lambda self, node: None})()"",
            ""CellMagic = type('CellMagic', (object,), {'__init__': lambda self, name, params, body: (setattr(self, 'name', name), setattr(self, 'params', params), setattr(self, 'body', body))})""
        ]
    },
    {
        ""imports"": [
            ""import ast""
        ],
        ""initialization"": [
            ""node = type('MockNode', (object,), {'value': type('MockValue', (object,), {'func': type('MockFunc', (object,), {'attr': 'run_cell_magic'})(), 'args': ['arg1', 'arg2', 'arg3']})()})()"",
            ""_is_ipython_magic = lambda func: True"",
            ""_get_str_args = lambda args: ['name', 'params', 'body']"",
            ""self = type('MockSelf', (object,), {'cell_magic': None, 'generic_visit': lambda self, node: None})()"",
            ""CellMagic = lambda name, params, body: type('CellMagic', (object,), {'name': name, 'params': params, 'body': body})('MockName', 'MockParams', 'MockBody')""
        ]
    },
    {
        ""imports"": [
            ""import ast""
        ],
        ""initialization"": [
            ""node = type('MockNode', (object,), {'value': type('MockValue', (object,), {'func': type('MockFunc', (object,), {'attr': 'run_cell_magic'})()})()})()"",
            ""_is_ipython_magic = lambda func: True"",
            ""_get_str_args = lambda args: ['name',{},'body']"",
            ""self = type('MockSelf', (object,), {'cell_magic': None, 'generic_visit': lambda self, node: None})()"",
            ""CellMagic = lambda name, params, body: type('MockCellMagic', (object,), {'name': name, 'params': params, 'body': body})()"",
            ""ast.Call = type('MockCall', (object,), {})""
        ]
    },
    {
        ""imports"": [
            ""import ast""
        ],
        ""initialization"": [
            ""node = type('MockNode', (object,), {'value': type('MockValue', (object,), {'func': type('MockFunc', (object,), {'attr': 'run_cell_magic'})})()})"",
            ""_is_ipython_magic = lambda func: True"",
            ""_get_str_args = lambda args: ('magic_name', 'params', 'body')"",
            ""self = type('MockSelf', (object,), {'cell_magic': None, 'generic_visit': lambda self, node: None})()"",
            ""CellMagic = lambda name, params, body: type('CellMagic', (object,), {'name': name, 'params': params, 'body': body})()""
        ]
    }
]","[
    {
        ""imports"": [
            ""import ast # pragma: no cover""
        ],
        ""initialization"": [
            ""node = type('MockNode', (object,), {'value': type('MockValue', (object,), {'func': type('MockFunc', (object,), {'attr': 'run_cell_magic'})(), 'args': []})()}) # pragma: no cover"",
            ""_is_ipython_magic = lambda func: func.attr == 'run_cell_magic' # pragma: no cover"",
            ""_get_str_args = lambda args: ['name', 'params', 'body'] # pragma: no cover"",
            ""self = type('MockSelf', (object,), {'cell_magic': None, 'generic_visit': lambda self, node: None})() # pragma: no cover"",
            ""CellMagic = lambda name, params, body: type('CellMagic', (object,), {'name': name, 'params': params, 'body': body})('name', 'params', 'body') # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import ast # pragma: no cover""
        ],
        ""initialization"": [
            ""node = type('Mock', (object,), {'value': type('Mock', (object,), {'func': type('Mock', (object,), {'attr': 'run_cell_magic'})()})()})() # pragma: no cover"",
            ""_is_ipython_magic = lambda x: True # pragma: no cover"",
            ""_get_str_args = lambda x: ['header', 'params', 'body'] # pragma: no cover"",
            ""self = type('Mock', (object,), {'cell_magic': None, 'generic_visit': lambda self, node: None, 'visit': lambda self, node: None})() # pragma: no cover"",
            ""CellMagic = lambda name, params, body: type('CellMagic', (object,), {'name': name, 'params': params, 'body': body})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import ast # pragma: no cover""
        ],
        ""initialization"": [
            ""node = type('Mock', (object,), {'value': type('MockValue', (object,), {'func': type('MockFunc', (object,), {'attr': 'run_cell_magic'})(), 'args': ['magic_name', 'param_value', 'body_value']})()})() # pragma: no cover"",
            ""def _is_ipython_magic(func): return True # pragma: no cover"",
            ""def _get_str_args(args): return args # pragma: no cover"",
            ""self = type('MockSelf', (object,), {'cell_magic': None, 'generic_visit': lambda self, node: None})() # pragma: no cover"",
            ""CellMagic = lambda name, params, body: type('CellMagic', (object,), {'name': name, 'params': params, 'body': body})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import ast # pragma: no cover""
        ],
        ""initialization"": [
            ""node = type('Mock', (object,), {'value': type('Mock', (object,), {'func': type('Mock', (object,), {'attr': 'run_cell_magic'})()})()})() # pragma: no cover"",
            ""_is_ipython_magic = lambda func: func.attr == 'run_cell_magic' # pragma: no cover"",
            ""_get_str_args = lambda args: ['magic_name', 'params', 'body'] # pragma: no cover"",
            ""self = type('Mock', (object,), {'cell_magic': None, 'generic_visit': lambda node: None})() # pragma: no cover"",
            ""CellMagic = lambda name, params, body: type('CellMagic', (object,), {'name': name, 'params': params, 'body': body})('magic_name', 'params', 'body') # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import ast # pragma: no cover""
        ],
        ""initialization"": [
            ""node = type('MockNode', (object,), {'value': type('MockValue', (object,), {'func': type('MockFunc', (object,), {'attr': 'run_cell_magic'})()})()})() # pragma: no cover"",
            ""_is_ipython_magic = lambda func: True # pragma: no cover"",
            ""_get_str_args = lambda args: ['name', 'params', 'body'] # pragma: no cover"",
            ""self = type('Mock', (object,), {'cell_magic': None, 'generic_visit': lambda self, node: None})() # pragma: no cover"",
            ""CellMagic = type('CellMagic', (object,), {'__init__': lambda self, name, params, body: None}) # pragma: no cover"",
            ""node.value.args = ['arg1', 'arg2', 'arg3'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import ast # pragma: no cover""
        ],
        ""initialization"": [
            ""node = type('Node', (object,), {'value': type('Value', (object,), {'func': type('Func', (object,), {'attr': 'run_cell_magic'})(), 'args': []})()})() # pragma: no cover"",
            ""_is_ipython_magic = lambda x: True # pragma: no cover"",
            ""_get_str_args = lambda x: ['arg1', 'arg2', 'arg3'] # pragma: no cover"",
            ""self = type('Self', (object,), {'cell_magic': None, 'generic_visit': lambda self, node: None})() # pragma: no cover"",
            ""CellMagic = type('CellMagic', (object,), {'__init__': lambda self, name, params, body: None}) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import ast # pragma: no cover""
        ],
        ""initialization"": [
            ""node = type('Mock', (object,), {'value': type('Mock', (object,), {'func': type('Mock', (object,), {'attr': 'run_cell_magic'})})()})() # pragma: no cover"",
            ""_is_ipython_magic = lambda func: func.attr == 'run_cell_magic' # pragma: no cover"",
            ""_get_str_args = lambda args: ['magic_name', 'params', 'body'] # pragma: no cover"",
            ""self = type('Mock', (object,), {'cell_magic': None, 'generic_visit': lambda self, node: None})() # pragma: no cover"",
            ""CellMagic = type('CellMagic', (object,), {'__init__': lambda self, name, params, body: (setattr(self, 'name', name), setattr(self, 'params', params), setattr(self, 'body', body))}) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import ast # pragma: no cover""
        ],
        ""initialization"": [
            ""node = type('MockNode', (object,), {'value': type('MockValue', (object,), {'func': type('MockFunc', (object,), {'attr': 'run_cell_magic'})(), 'args': ['arg1', 'arg2', 'arg3']})()})() # pragma: no cover"",
            ""_is_ipython_magic = lambda func: True # pragma: no cover"",
            ""_get_str_args = lambda args: ['name', 'params', 'body'] # pragma: no cover"",
            ""self = type('MockSelf', (object,), {'cell_magic': None, 'generic_visit': lambda self, node: None})() # pragma: no cover"",
            ""CellMagic = lambda name, params, body: type('CellMagic', (object,), {'name': name, 'params': params, 'body': body})('MockName', 'MockParams', 'MockBody') # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import ast # pragma: no cover""
        ],
        ""initialization"": [
            ""node = type('MockNode', (object,), {'value': type('MockValue', (object,), {'func': type('MockFunc', (object,), {'attr': 'run_cell_magic'})()})()})() # pragma: no cover"",
            ""_is_ipython_magic = lambda func: True # pragma: no cover"",
            ""_get_str_args = lambda args: ['name',{},'body'] # pragma: no cover"",
            ""self = type('MockSelf', (object,), {'cell_magic': None, 'generic_visit': lambda self, node: None})() # pragma: no cover"",
            ""CellMagic = lambda name, params, body: type('MockCellMagic', (object,), {'name': name, 'params': params, 'body': body})() # pragma: no cover"",
            ""ast.Call = type('MockCall', (object,), {}) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import ast # pragma: no cover""
        ],
        ""initialization"": [
            ""node = type('MockNode', (object,), {'value': type('MockValue', (object,), {'func': type('MockFunc', (object,), {'attr': 'run_cell_magic'})})()}) # pragma: no cover"",
            ""_is_ipython_magic = lambda func: True # pragma: no cover"",
            ""_get_str_args = lambda args: ('magic_name', 'params', 'body') # pragma: no cover"",
            ""self = type('MockSelf', (object,), {'cell_magic': None, 'generic_visit': lambda self, node: None})() # pragma: no cover"",
            ""CellMagic = lambda name, params, body: type('CellMagic', (object,), {'name': name, 'params': params, 'body': body})() # pragma: no cover""
        ]
    }
]",1,399,0.0001995,1847,0.0027705,0.00297
"When trying to execute the code snippet with the provided imports and initialization, the following error happens:
# begin error message
Execution error at line 18:
    self.generic_visit(node)
TypeError: <lambda>() takes 1 positional argument but 2 were given
# end error message

Please, provide self-contained and concrete Python fixed values of the imports and initialization to solve the error and make the code snippet executable.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""import ast""
        ],
        ""initialization"": [
            ""node = type('Mock', (object,), {'value': type('Mock', (object,), {'func': type('Mock', (object,), {'attr': 'run_cell_magic'})()})()})()"",
            ""_is_ipython_magic = lambda func: func.attr == 'run_cell_magic'"",
            ""_get_str_args = lambda args: ['magic_name', 'params', 'body']"",
            ""self = type('Mock', (object,), {'cell_magic': None, 'generic_visit': lambda self, node: None})()"",
            ""CellMagic = lambda name, params, body: type('CellMagic', (object,), {'name': name, 'params': params, 'body': body})('magic_name', 'params', 'body')""
        ]
    },
    {
        ""imports"": [
            ""import ast""
        ],
        ""initialization"": [
            ""node = type('Mock', (object,), {'value': type('Mock', (object,), {'func': type('Mock', (object,), {'attr': 'run_cell_magic'})()})()})()"",
            ""_is_ipython_magic = lambda func: func.attr == 'run_cell_magic'"",
            ""_get_str_args = lambda args: ['magic_name', 'params', 'body']"",
            ""self = type('Mock', (object,), {'cell_magic': None, 'generic_visit': lambda self, node: None})()"",
            ""CellMagic = lambda name, params, body: type('CellMagic', (object,), {'name': name, 'params': params, 'body': body})('magic_name', 'params', 'body')""
        ]
    },
    {
        ""imports"": [
            ""import ast""
        ],
        ""initialization"": [
            ""node = type('Mock', (object,), {'value': type('Mock', (object,), {'func': type('Mock', (object,), {'attr': 'run_cell_magic'})()})()})()"",
            ""_is_ipython_magic = lambda func: func.attr == 'run_cell_magic'"",
            ""_get_str_args = lambda args: ['magic_name', 'params', 'body']"",
            ""self = type('Mock', (object,), {'cell_magic': None, 'generic_visit': lambda self, node: None})()"",
            ""CellMagic = lambda name, params, body: type('CellMagic', (object,), {'name': name, 'params': params, 'body': body})('magic_name', 'params', 'body')""
        ]
    },
    {
        ""imports"": [
            ""import ast""
        ],
        ""initialization"": [
            ""node = type('Mock', (object,), {'value': type('Mock', (object,), {'func': type('Mock', (object,), {'attr': 'run_cell_magic'})()})()})()"",
            ""_is_ipython_magic = lambda func: func.attr == 'run_cell_magic'"",
            ""_get_str_args = lambda args: ['magic_name', 'params', 'body']"",
            ""self = type('Mock', (object,), {'cell_magic': None, 'generic_visit': lambda self, node: None})()"",
            ""CellMagic = lambda name, params, body: type('CellMagic', (object,), {'name': name, 'params': params, 'body': body})('magic_name', 'params', 'body')""
        ]
    },
    {
        ""imports"": [
            ""import ast""
        ],
        ""initialization"": [
            ""node = type('Mock', (object,), {'value': type('Mock', (object,), {'func': type('Mock', (object,), {'attr': 'run_cell_magic'})()})()})()"",
            ""_is_ipython_magic = lambda func: func.attr == 'run_cell_magic'"",
            ""_get_str_args = lambda args: ['magic_name', 'params', 'body']"",
            ""self = type('Mock', (object,), {'cell_magic': None, 'generic_visit': lambda self, node: None})()"",
            ""CellMagic = lambda name, params, body: type('CellMagic', (object,), {'name': name, 'params': params, 'body': body})('magic_name', 'params', 'body')""
        ]
    },
    {
        ""imports"": [
            ""import ast""
        ],
        ""initialization"": [
            ""node = type('Mock', (object,), {'value': type('Mock', (object,), {'func': type('Mock', (object,), {'attr': 'run_cell_magic'})()})()})()"",
            ""_is_ipython_magic = lambda func: func.attr == 'run_cell_magic'"",
            ""_get_str_args = lambda args: ['magic_name', 'params', 'body']"",
            ""self = type('Mock', (object,), {'cell_magic': None, 'generic_visit': lambda self, node: None})()"",
            ""CellMagic = lambda name, params, body: type('CellMagic', (object,), {'name': name, 'params': params, 'body': body})('magic_name', 'params', 'body')""
        ]
    },
    {
        ""imports"": [
            ""import ast""
        ],
        ""initialization"": [
            ""node = type('Mock', (object,), {'value': type('Mock', (object,), {'func': type('Mock', (object,), {'attr': 'run_cell_magic'})()})()})()"",
            ""_is_ipython_magic = lambda func: func.attr == 'run_cell_magic'"",
            ""_get_str_args = lambda args: ['magic_name', 'params', 'body']"",
            ""self = type('Mock', (object,), {'cell_magic': None, 'generic_visit': lambda self, node: None})()"",
            ""CellMagic = lambda name, params, body: type('CellMagic', (object,), {'name': name, 'params': params, 'body': body})('magic_name', 'params', 'body')""
        ]
    },
    {
        ""imports"": [
            ""import ast""
        ],
        ""initialization"": [
            ""node = type('Mock', (object,), {'value': type('Mock', (object,), {'func': type('Mock', (object,), {'attr': 'run_cell_magic'})()})()})()"",
            ""_is_ipython_magic = lambda func: func.attr == 'run_cell_magic'"",
            ""_get_str_args = lambda args: ['magic_name', 'params', 'body']"",
            ""self = type('Mock', (object,), {'cell_magic': None, 'generic_visit': lambda self, node: None})()"",
            ""CellMagic = lambda name, params, body: type('CellMagic', (object,), {'name': name, 'params': params, 'body': body})(name, params, body)""
        ]
    },
    {
        ""imports"": [
            ""import ast""
        ],
        ""initialization"": [
            ""node = type('Mock', (object,), {'value': type('Mock', (object,), {'func': type('Mock', (object,), {'attr': 'run_cell_magic'})()})()})()"",
            ""_is_ipython_magic = lambda func: func.attr == 'run_cell_magic'"",
            ""_get_str_args = lambda args: ['magic_name', 'params', 'body']"",
            ""self = type('Mock', (object,), {'cell_magic': None, 'generic_visit': lambda self, node: None})()"",
            ""CellMagic = lambda name, params, body: type('CellMagic', (object,), {'name': name, 'params': params, 'body': body})('magic_name', 'params', 'body')""
        ]
    },
    {
        ""imports"": [
            ""import ast""
        ],
        ""initialization"": [
            ""node = type('Mock', (object,), {'value': type('Mock', (object,), {'func': type('Mock', (object,), {'attr': 'run_cell_magic'})()})()})()"",
            ""_is_ipython_magic = lambda func: func.attr == 'run_cell_magic'"",
            ""_get_str_args = lambda args: ['magic_name', 'params', 'body']"",
            ""self = type('Mock', (object,), {'cell_magic': None, 'generic_visit': lambda self, node: None})()"",
            ""CellMagic = lambda name, params, body: type('CellMagic', (object,), {'name': name, 'params': params, 'body': body})('magic_name', 'params', 'body')""
        ]
    }
]","[
    {
        ""imports"": [
            ""import ast # pragma: no cover""
        ],
        ""initialization"": [
            ""node = type('Mock', (object,), {'value': type('Mock', (object,), {'func': type('Mock', (object,), {'attr': 'run_cell_magic'})()})()})() # pragma: no cover"",
            ""_is_ipython_magic = lambda func: func.attr == 'run_cell_magic' # pragma: no cover"",
            ""_get_str_args = lambda args: ['magic_name', 'params', 'body'] # pragma: no cover"",
            ""self = type('Mock', (object,), {'cell_magic': None, 'generic_visit': lambda self, node: None})() # pragma: no cover"",
            ""CellMagic = lambda name, params, body: type('CellMagic', (object,), {'name': name, 'params': params, 'body': body})('magic_name', 'params', 'body') # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import ast # pragma: no cover""
        ],
        ""initialization"": [
            ""node = type('Mock', (object,), {'value': type('Mock', (object,), {'func': type('Mock', (object,), {'attr': 'run_cell_magic'})()})()})() # pragma: no cover"",
            ""_is_ipython_magic = lambda func: func.attr == 'run_cell_magic' # pragma: no cover"",
            ""_get_str_args = lambda args: ['magic_name', 'params', 'body'] # pragma: no cover"",
            ""self = type('Mock', (object,), {'cell_magic': None, 'generic_visit': lambda self, node: None})() # pragma: no cover"",
            ""CellMagic = lambda name, params, body: type('CellMagic', (object,), {'name': name, 'params': params, 'body': body})('magic_name', 'params', 'body') # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import ast # pragma: no cover""
        ],
        ""initialization"": [
            ""node = type('Mock', (object,), {'value': type('Mock', (object,), {'func': type('Mock', (object,), {'attr': 'run_cell_magic'})()})()})() # pragma: no cover"",
            ""_is_ipython_magic = lambda func: func.attr == 'run_cell_magic' # pragma: no cover"",
            ""_get_str_args = lambda args: ['magic_name', 'params', 'body'] # pragma: no cover"",
            ""self = type('Mock', (object,), {'cell_magic': None, 'generic_visit': lambda self, node: None})() # pragma: no cover"",
            ""CellMagic = lambda name, params, body: type('CellMagic', (object,), {'name': name, 'params': params, 'body': body})('magic_name', 'params', 'body') # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import ast # pragma: no cover""
        ],
        ""initialization"": [
            ""node = type('Mock', (object,), {'value': type('Mock', (object,), {'func': type('Mock', (object,), {'attr': 'run_cell_magic'})()})()})() # pragma: no cover"",
            ""_is_ipython_magic = lambda func: func.attr == 'run_cell_magic' # pragma: no cover"",
            ""_get_str_args = lambda args: ['magic_name', 'params', 'body'] # pragma: no cover"",
            ""self = type('Mock', (object,), {'cell_magic': None, 'generic_visit': lambda self, node: None})() # pragma: no cover"",
            ""CellMagic = lambda name, params, body: type('CellMagic', (object,), {'name': name, 'params': params, 'body': body})('magic_name', 'params', 'body') # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import ast # pragma: no cover""
        ],
        ""initialization"": [
            ""node = type('Mock', (object,), {'value': type('Mock', (object,), {'func': type('Mock', (object,), {'attr': 'run_cell_magic'})()})()})() # pragma: no cover"",
            ""_is_ipython_magic = lambda func: func.attr == 'run_cell_magic' # pragma: no cover"",
            ""_get_str_args = lambda args: ['magic_name', 'params', 'body'] # pragma: no cover"",
            ""self = type('Mock', (object,), {'cell_magic': None, 'generic_visit': lambda self, node: None})() # pragma: no cover"",
            ""CellMagic = lambda name, params, body: type('CellMagic', (object,), {'name': name, 'params': params, 'body': body})('magic_name', 'params', 'body') # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import ast # pragma: no cover""
        ],
        ""initialization"": [
            ""node = type('Mock', (object,), {'value': type('Mock', (object,), {'func': type('Mock', (object,), {'attr': 'run_cell_magic'})()})()})() # pragma: no cover"",
            ""_is_ipython_magic = lambda func: func.attr == 'run_cell_magic' # pragma: no cover"",
            ""_get_str_args = lambda args: ['magic_name', 'params', 'body'] # pragma: no cover"",
            ""self = type('Mock', (object,), {'cell_magic': None, 'generic_visit': lambda self, node: None})() # pragma: no cover"",
            ""CellMagic = lambda name, params, body: type('CellMagic', (object,), {'name': name, 'params': params, 'body': body})('magic_name', 'params', 'body') # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import ast # pragma: no cover""
        ],
        ""initialization"": [
            ""node = type('Mock', (object,), {'value': type('Mock', (object,), {'func': type('Mock', (object,), {'attr': 'run_cell_magic'})()})()})() # pragma: no cover"",
            ""_is_ipython_magic = lambda func: func.attr == 'run_cell_magic' # pragma: no cover"",
            ""_get_str_args = lambda args: ['magic_name', 'params', 'body'] # pragma: no cover"",
            ""self = type('Mock', (object,), {'cell_magic': None, 'generic_visit': lambda self, node: None})() # pragma: no cover"",
            ""CellMagic = lambda name, params, body: type('CellMagic', (object,), {'name': name, 'params': params, 'body': body})('magic_name', 'params', 'body') # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import ast # pragma: no cover""
        ],
        ""initialization"": [
            ""node = type('Mock', (object,), {'value': type('Mock', (object,), {'func': type('Mock', (object,), {'attr': 'run_cell_magic'})()})()})() # pragma: no cover"",
            ""_is_ipython_magic = lambda func: func.attr == 'run_cell_magic' # pragma: no cover"",
            ""_get_str_args = lambda args: ['magic_name', 'params', 'body'] # pragma: no cover"",
            ""self = type('Mock', (object,), {'cell_magic': None, 'generic_visit': lambda self, node: None})() # pragma: no cover"",
            ""CellMagic = lambda name, params, body: type('CellMagic', (object,), {'name': name, 'params': params, 'body': body})(name, params, body) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import ast # pragma: no cover""
        ],
        ""initialization"": [
            ""node = type('Mock', (object,), {'value': type('Mock', (object,), {'func': type('Mock', (object,), {'attr': 'run_cell_magic'})()})()})() # pragma: no cover"",
            ""_is_ipython_magic = lambda func: func.attr == 'run_cell_magic' # pragma: no cover"",
            ""_get_str_args = lambda args: ['magic_name', 'params', 'body'] # pragma: no cover"",
            ""self = type('Mock', (object,), {'cell_magic': None, 'generic_visit': lambda self, node: None})() # pragma: no cover"",
            ""CellMagic = lambda name, params, body: type('CellMagic', (object,), {'name': name, 'params': params, 'body': body})('magic_name', 'params', 'body') # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import ast # pragma: no cover""
        ],
        ""initialization"": [
            ""node = type('Mock', (object,), {'value': type('Mock', (object,), {'func': type('Mock', (object,), {'attr': 'run_cell_magic'})()})()})() # pragma: no cover"",
            ""_is_ipython_magic = lambda func: func.attr == 'run_cell_magic' # pragma: no cover"",
            ""_get_str_args = lambda args: ['magic_name', 'params', 'body'] # pragma: no cover"",
            ""self = type('Mock', (object,), {'cell_magic': None, 'generic_visit': lambda self, node: None})() # pragma: no cover"",
            ""CellMagic = lambda name, params, body: type('CellMagic', (object,), {'name': name, 'params': params, 'body': body})('magic_name', 'params', 'body') # pragma: no cover""
        ]
    }
]",2,879,0.0004395,1855,0.0027825,0.003222
"When trying to execute the code snippet with the provided imports and initialization, the lines with # uncovered are not executed.

# begin code snippet
""""""Find cell magic, extract header and body.""""""
if ( # uncovered
    isinstance(node.value, ast.Call) # uncovered
    and _is_ipython_magic(node.value.func) # uncovered
    and node.value.func.attr == ""run_cell_magic"" # uncovered
): # uncovered
    args = _get_str_args(node.value.args) # uncovered
    self.cell_magic = CellMagic(name=args[0], params=args[1], body=args[2]) # uncovered
self.generic_visit(node)

# end code snippet

Please, provide self-contained and concrete Python modified values of the imports and initialization to execute one of the uncovered paths in the code snippet.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""import ast"",
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""class MockIpythonMagic:"",
            ""    @staticmethod"",
            ""    def _is_ipython_magic(func):"",
            ""        return hasattr(func, 'attr') and func.attr == 'run_cell_magic'"",
            ""def _get_str_args(args):"",
            ""    return [arg.s for arg in args if isinstance(arg, ast.Str)]"",
            ""CellMagic = namedtuple('CellMagic', ['name', 'params', 'body'])"",
            ""node = ast.parse('run_cell_magic(\""name\"", \""params\"", \""body\"")').body[0].value"",
            ""self = type('Mock', (object,), {'cell_magic': None, 'generic_visit': lambda self, node: None})()""
        ]
    },
    {
        ""imports"": [
            ""import ast""
        ],
        ""initialization"": [
            ""class CellMagic:\n    def __init__(self, name, params, body):\n        self.name = name\n        self.params = params\n        self.body = body"",
            ""def _is_ipython_magic(func):\n    return hasattr(func, 'attr') and func.attr == 'run_cell_magic'"",
            ""def _get_str_args(args):\n    return [arg.s for arg in args]"",
            ""node = type('MockNode', (object,), {\n    'value': type('MockValue', (object,), {\n        'func': type('MockFunc', (object,), {\n            'attr': 'run_cell_magic'\n        })(),\n        'args': [\n            type('MockArg', (object,), {'s': 'magic_name'})(),\n            type('MockArg', (object,), {'s': 'param'})(),\n            type('MockArg', (object,), {'s': 'body'})()\n        ]\n    })()\n})"",
            ""self = type('MockSelf', (object,), {'cell_magic': None, 'generic_visit': lambda self, node: None})()""
        ]
    },
    {
        ""imports"": [
            ""import ast"",
            ""from types import SimpleNamespace""
        ],
        ""initialization"": [
            ""class CellMagic:"",
            ""    def __init__(self, name, params, body):"",
            ""        self.name = name"",
            ""        self.params = params"",
            ""        self.body = body"",
            """",
            ""def _is_ipython_magic(func):"",
            ""    return isinstance(func, SimpleNamespace) and func.attr == 'run_cell_magic'"",
            """",
            ""def _get_str_args(args):"",
            ""    return [str(arg) for arg in args]"",
            """",
            ""node = SimpleNamespace(value=SimpleNamespace(func=SimpleNamespace(attr='run_cell_magic'), args=['arg1', 'arg2', 'arg3']))"",
            """",
            ""self = SimpleNamespace(cell_magic=None, generic_visit=lambda x: None)""
        ]
    },
    {
        ""imports"": [
            ""import ast""
        ],
        ""initialization"": [
            ""class CellMagic:"",
            ""    def __init__(self, name, params, body):"",
            ""        self.name = name"",
            ""        self.params = params"",
            ""        self.body = body"",
            """",
            ""def _is_ipython_magic(func):"",
            ""    return isinstance(func, ast.Attribute) and func.attr == 'run_cell_magic'"",
            """",
            ""def _get_str_args(args):"",
            ""    return [arg.s for arg in args if isinstance(arg, ast.Str)]"",
            """",
            ""node = type('Mock', (object,), {'value': ast.Call(func=ast.Attribute(attr='run_cell_magic'), args=[ast.Str(s='magic_name'), ast.Str(s='params'), ast.Str(s='body')])})()"",
            ""self = type('Mock', (object,), {'cell_magic': None, 'generic_visit': lambda self, node: None})()""
        ]
    },
    {
        ""imports"": [
            ""import ast"",
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""MockNodeValueFunc = type('MockNodeValueFunc', (object,), {'attr': 'run_cell_magic'})"",
            ""MockNodeValue = type('MockNodeValue', (object,), {'func': MockNodeValueFunc(), 'args': ['my_magic', 'my_params', 'my_body']})"",
            ""MockNode = type('MockNode', (object,), {'value': MockNodeValue()})"",
            ""node = MockNode()"",
            ""def _is_ipython_magic(func): return True"",
            ""def _get_str_args(args): return args"",
            ""CellMagic = namedtuple('CellMagic', 'name params body')""
        ]
    },
    {
        ""imports"": [
            ""import ast"",
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""CellMagic = namedtuple('CellMagic', 'name params body')"",
            ""def _is_ipython_magic(func): return hasattr(func, 'attr')"",
            ""_get_str_args = lambda args: ['magic_name', 'params', 'body']"",
            ""class MockNodeValueFunc: attr = 'run_cell_magic'"",
            ""class MockNodeValue: func = MockNodeValueFunc()"",
            ""class MockNode: value = ast.Call(func=MockNodeValueFunc(), args=[])"",
            ""node = MockNode()"",
            ""self = type('Mock', (object,), {'generic_visit': lambda self, node: None, 'cell_magic': None})()""
        ]
    },
    {
        ""imports"": [
            ""import ast"",
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""class MockNode:"",
            ""    class Value:"",
            ""        class Func:"",
            ""            attr = 'run_cell_magic'"",
            ""        func = Func()"",
            ""        args = []"",
            ""    value = Value()"",
            """",
            ""def _is_ipython_magic(func):"",
            ""    return hasattr(func, 'attr') and func.attr == 'run_cell_magic'"",
            """",
            ""def _get_str_args(args):"",
            ""    return ('name', 'params', 'body')"",
            """",
            ""CellMagic = namedtuple('CellMagic', ['name', 'params', 'body'])"",
            """",
            ""self = type('Mock', (object,), {'cell_magic': None, 'generic_visit': lambda self, node: None})()"",
            """",
            ""node = MockNode()""
        ]
    },
    {
        ""imports"": [
            ""import ast"",
            ""from types import SimpleNamespace""
        ],
        ""initialization"": [
            ""_is_ipython_magic = lambda func: isinstance(func, SimpleNamespace) and getattr(func, 'attr', None) == 'run_cell_magic'"",
            ""_get_str_args = lambda args: [arg.s for arg in args]"",
            ""CellMagic = type('CellMagic', (object,), {'__init__': lambda self, name, params, body: setattr(self, 'name', name) or setattr(self, 'params', params) or setattr(self, 'body', body)})"",
            ""node = SimpleNamespace(value=SimpleNamespace(func=SimpleNamespace(attr='run_cell_magic'), args=[SimpleNamespace(s='name'), SimpleNamespace(s='params'), SimpleNamespace(s='body')]))"",
            ""self = SimpleNamespace(generic_visit=lambda node: None)""
        ]
    },
    {
        ""imports"": [
            ""import ast"",
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""CellMagic = namedtuple('CellMagic', ['name', 'params', 'body'])"",
            ""_is_ipython_magic = lambda x: hasattr(x, 'attr')"",
            ""_get_str_args = lambda args: [arg.s for arg in args if isinstance(arg, ast.Str)]"",
            ""_get_str_args = lambda args: ['name', 'params', 'body']"",
            ""node = type('Mock', (object,), {'value': type('Mock', (object,), {'func': type('Mock', (object,), {'attr': 'run_cell_magic'})(), 'args': [type('Mock', (object,), {'s': 'example'})()]})()})()"",
            ""self = type('MockBase', (object,), {'generic_visit': lambda self, node: None})()""
        ]
    },
    {
        ""imports"": [
            ""import ast""
        ],
        ""initialization"": [
            ""node = type('Mock', (object,), {'value': type('Mock', (object,), {'func': type('Mock', (object,), {'attr': 'run_cell_magic'})()})()})()"",
            ""def _is_ipython_magic(func): return True"",
            ""def _get_str_args(args): return ['name', 'params', 'body']"",
            ""class CellMagic:\n    def __init__(self, name, params, body):\n        self.name = name\n        self.params = params\n        self.body = body"",
            ""self = type('Mock', (object,), {'generic_visit': lambda self, arg: None})()""
        ]
    }
]","[
    {
        ""imports"": [
            ""import ast # pragma: no cover"",
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockIpythonMagic: # pragma: no cover"",
            ""    @staticmethod # pragma: no cover"",
            ""    def _is_ipython_magic(func): # pragma: no cover"",
            ""        return hasattr(func, 'attr') and func.attr == 'run_cell_magic' # pragma: no cover"",
            ""def _get_str_args(args): # pragma: no cover"",
            ""    return [arg.s for arg in args if isinstance(arg, ast.Str)] # pragma: no cover"",
            ""CellMagic = namedtuple('CellMagic', ['name', 'params', 'body']) # pragma: no cover"",
            ""node = ast.parse('run_cell_magic(\""name\"", \""params\"", \""body\"")').body[0].value # pragma: no cover"",
            ""self = type('Mock', (object,), {'cell_magic': None, 'generic_visit': lambda self, node: None})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import ast # pragma: no cover""
        ],
        ""initialization"": [
            ""class CellMagic:# pragma: no cover"",
            ""    def __init__(self, name, params, body):# pragma: no cover"",
            ""        self.name = name# pragma: no cover"",
            ""        self.params = params# pragma: no cover"",
            ""        self.body = body # pragma: no cover"",
            ""def _is_ipython_magic(func):# pragma: no cover"",
            ""    return hasattr(func, 'attr') and func.attr == 'run_cell_magic' # pragma: no cover"",
            ""def _get_str_args(args):# pragma: no cover"",
            ""    return [arg.s for arg in args] # pragma: no cover"",
            ""node = type('MockNode', (object,), {# pragma: no cover"",
            ""    'value': type('MockValue', (object,), {# pragma: no cover"",
            ""        'func': type('MockFunc', (object,), {# pragma: no cover"",
            ""            'attr': 'run_cell_magic'# pragma: no cover"",
            ""        })(),# pragma: no cover"",
            ""        'args': [# pragma: no cover"",
            ""            type('MockArg', (object,), {'s': 'magic_name'})(),# pragma: no cover"",
            ""            type('MockArg', (object,), {'s': 'param'})(),# pragma: no cover"",
            ""            type('MockArg', (object,), {'s': 'body'})()# pragma: no cover"",
            ""        ]# pragma: no cover"",
            ""    })()# pragma: no cover"",
            ""}) # pragma: no cover"",
            ""self = type('MockSelf', (object,), {'cell_magic': None, 'generic_visit': lambda self, node: None})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import ast # pragma: no cover"",
            ""from types import SimpleNamespace # pragma: no cover""
        ],
        ""initialization"": [
            ""class CellMagic: # pragma: no cover"",
            ""    def __init__(self, name, params, body): # pragma: no cover"",
            ""        self.name = name # pragma: no cover"",
            ""        self.params = params # pragma: no cover"",
            ""        self.body = body # pragma: no cover"",
            "" # pragma: no cover"",
            ""def _is_ipython_magic(func): # pragma: no cover"",
            ""    return isinstance(func, SimpleNamespace) and func.attr == 'run_cell_magic' # pragma: no cover"",
            "" # pragma: no cover"",
            ""def _get_str_args(args): # pragma: no cover"",
            ""    return [str(arg) for arg in args] # pragma: no cover"",
            "" # pragma: no cover"",
            ""node = SimpleNamespace(value=SimpleNamespace(func=SimpleNamespace(attr='run_cell_magic'), args=['arg1', 'arg2', 'arg3'])) # pragma: no cover"",
            "" # pragma: no cover"",
            ""self = SimpleNamespace(cell_magic=None, generic_visit=lambda x: None) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import ast # pragma: no cover""
        ],
        ""initialization"": [
            ""class CellMagic: # pragma: no cover"",
            ""    def __init__(self, name, params, body): # pragma: no cover"",
            ""        self.name = name # pragma: no cover"",
            ""        self.params = params # pragma: no cover"",
            ""        self.body = body # pragma: no cover"",
            "" # pragma: no cover"",
            ""def _is_ipython_magic(func): # pragma: no cover"",
            ""    return isinstance(func, ast.Attribute) and func.attr == 'run_cell_magic' # pragma: no cover"",
            "" # pragma: no cover"",
            ""def _get_str_args(args): # pragma: no cover"",
            ""    return [arg.s for arg in args if isinstance(arg, ast.Str)] # pragma: no cover"",
            "" # pragma: no cover"",
            ""node = type('Mock', (object,), {'value': ast.Call(func=ast.Attribute(attr='run_cell_magic'), args=[ast.Str(s='magic_name'), ast.Str(s='params'), ast.Str(s='body')])})() # pragma: no cover"",
            ""self = type('Mock', (object,), {'cell_magic': None, 'generic_visit': lambda self, node: None})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import ast # pragma: no cover"",
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""MockNodeValueFunc = type('MockNodeValueFunc', (object,), {'attr': 'run_cell_magic'}) # pragma: no cover"",
            ""MockNodeValue = type('MockNodeValue', (object,), {'func': MockNodeValueFunc(), 'args': ['my_magic', 'my_params', 'my_body']}) # pragma: no cover"",
            ""MockNode = type('MockNode', (object,), {'value': MockNodeValue()}) # pragma: no cover"",
            ""node = MockNode() # pragma: no cover"",
            ""def _is_ipython_magic(func): return True # pragma: no cover"",
            ""def _get_str_args(args): return args # pragma: no cover"",
            ""CellMagic = namedtuple('CellMagic', 'name params body') # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import ast # pragma: no cover"",
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""CellMagic = namedtuple('CellMagic', 'name params body') # pragma: no cover"",
            ""def _is_ipython_magic(func): return hasattr(func, 'attr') # pragma: no cover"",
            ""_get_str_args = lambda args: ['magic_name', 'params', 'body'] # pragma: no cover"",
            ""class MockNodeValueFunc: attr = 'run_cell_magic' # pragma: no cover"",
            ""class MockNodeValue: func = MockNodeValueFunc() # pragma: no cover"",
            ""class MockNode: value = ast.Call(func=MockNodeValueFunc(), args=[]) # pragma: no cover"",
            ""node = MockNode() # pragma: no cover"",
            ""self = type('Mock', (object,), {'generic_visit': lambda self, node: None, 'cell_magic': None})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import ast # pragma: no cover"",
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockNode: # pragma: no cover"",
            ""    class Value: # pragma: no cover"",
            ""        class Func: # pragma: no cover"",
            ""            attr = 'run_cell_magic' # pragma: no cover"",
            ""        func = Func() # pragma: no cover"",
            ""        args = [] # pragma: no cover"",
            ""    value = Value() # pragma: no cover"",
            "" # pragma: no cover"",
            ""def _is_ipython_magic(func): # pragma: no cover"",
            ""    return hasattr(func, 'attr') and func.attr == 'run_cell_magic' # pragma: no cover"",
            "" # pragma: no cover"",
            ""def _get_str_args(args): # pragma: no cover"",
            ""    return ('name', 'params', 'body') # pragma: no cover"",
            "" # pragma: no cover"",
            ""CellMagic = namedtuple('CellMagic', ['name', 'params', 'body']) # pragma: no cover"",
            "" # pragma: no cover"",
            ""self = type('Mock', (object,), {'cell_magic': None, 'generic_visit': lambda self, node: None})() # pragma: no cover"",
            "" # pragma: no cover"",
            ""node = MockNode() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import ast # pragma: no cover"",
            ""from types import SimpleNamespace # pragma: no cover""
        ],
        ""initialization"": [
            ""_is_ipython_magic = lambda func: isinstance(func, SimpleNamespace) and getattr(func, 'attr', None) == 'run_cell_magic' # pragma: no cover"",
            ""_get_str_args = lambda args: [arg.s for arg in args] # pragma: no cover"",
            ""CellMagic = type('CellMagic', (object,), {'__init__': lambda self, name, params, body: setattr(self, 'name', name) or setattr(self, 'params', params) or setattr(self, 'body', body)}) # pragma: no cover"",
            ""node = SimpleNamespace(value=SimpleNamespace(func=SimpleNamespace(attr='run_cell_magic'), args=[SimpleNamespace(s='name'), SimpleNamespace(s='params'), SimpleNamespace(s='body')])) # pragma: no cover"",
            ""self = SimpleNamespace(generic_visit=lambda node: None) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import ast # pragma: no cover"",
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""CellMagic = namedtuple('CellMagic', ['name', 'params', 'body']) # pragma: no cover"",
            ""_is_ipython_magic = lambda x: hasattr(x, 'attr') # pragma: no cover"",
            ""_get_str_args = lambda args: [arg.s for arg in args if isinstance(arg, ast.Str)] # pragma: no cover"",
            ""_get_str_args = lambda args: ['name', 'params', 'body'] # pragma: no cover"",
            ""node = type('Mock', (object,), {'value': type('Mock', (object,), {'func': type('Mock', (object,), {'attr': 'run_cell_magic'})(), 'args': [type('Mock', (object,), {'s': 'example'})()]})()})() # pragma: no cover"",
            ""self = type('MockBase', (object,), {'generic_visit': lambda self, node: None})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import ast # pragma: no cover""
        ],
        ""initialization"": [
            ""node = type('Mock', (object,), {'value': type('Mock', (object,), {'func': type('Mock', (object,), {'attr': 'run_cell_magic'})()})()})() # pragma: no cover"",
            ""def _is_ipython_magic(func): return True # pragma: no cover"",
            ""def _get_str_args(args): return ['name', 'params', 'body'] # pragma: no cover"",
            ""class CellMagic:# pragma: no cover"",
            ""    def __init__(self, name, params, body):# pragma: no cover"",
            ""        self.name = name# pragma: no cover"",
            ""        self.params = params# pragma: no cover"",
            ""        self.body = body # pragma: no cover"",
            ""self = type('Mock', (object,), {'generic_visit': lambda self, arg: None})() # pragma: no cover""
        ]
    }
]",3,397,0.0001985,2002,0.003003,0.0032015
