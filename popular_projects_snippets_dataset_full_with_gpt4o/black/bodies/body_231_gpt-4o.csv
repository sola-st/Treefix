prompt,raw_predictions,predictions,prompt_type,input_size,input_price,output_size,output_price,total_price
"Provide self-contained and concrete Python values to initialize the undefined variables in the code snippet.

# begin code snippet
# https://www.python.org/dev/peps/pep-0257/#handling-docstring-indentation
if not docstring:
    exit("""")
lines = lines_with_leading_tabs_expanded(docstring)
# Determine minimum indentation (first line doesn't count):
indent = sys.maxsize
for line in lines[1:]:
    stripped = line.lstrip()
    if stripped:
        indent = min(indent, len(line) - len(stripped))
    # Remove indentation (first line is special):
trimmed = [lines[0].strip()]
if indent < sys.maxsize:
    last_line_idx = len(lines) - 2
    for i, line in enumerate(lines[1:]):
        stripped_line = line[indent:].rstrip()
        if stripped_line or i == last_line_idx:
            trimmed.append(prefix + stripped_line)
        else:
            trimmed.append("""")
exit(""\n"".join(trimmed))

# end code snippet

# begin undefined variables
docstring
lines_with_leading_tabs_expanded
sys
prefix
# end undefined variables

# begin undefined attributes and methods
sys.maxsize
# end undefined attributes and methods

Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''Example docstring.\\n    This is an indented line.\\n    Another indented line.'''"",
            ""def lines_with_leading_tabs_expanded(docstring): return docstring.split('\\n')"",
            ""prefix = ''""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = \""\""\""\\n    Sample docstring that demonstrates indentation\\n        within the lines of the docstring.\\n    This should be processed by the existing code.\\n\""\""\"""",
            ""def lines_with_leading_tabs_expanded(docstring):\n    return [line.expandtabs() for line in docstring.splitlines()]"",
            ""prefix = \""\"""",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})()""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = \""\""\""\\n    Line 1\\n    Line 2\\n    Line 3\\n    \""\""\"""",
            ""def lines_with_leading_tabs_expanded(docstring):\\n    return [line.expandtabs() for line in docstring.splitlines()]"",
            ""prefix = \""\"""",
            ""sys = type(\""Mock\"", (object,), {\""maxsize\"": float('inf')})""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = \""\""\""\\n    This is a sample docstring.\\n    It has multiple\\n    lines of text,\\n    some of which are indented.\\n    \""\""\"""",
            ""def lines_with_leading_tabs_expanded(docstring):\n    return [line.expandtabs() for line in docstring.splitlines()]"",
            ""prefix = \""\"""",
            ""sys.maxsize = 9223372036854775807""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''Example:\n    This is an example docstring\n    that spans multiple lines.\n    '''"",
            ""def lines_with_leading_tabs_expanded(docstring):\n    return [line.expandtabs() for line in docstring.splitlines()]"",
            ""prefix = ''""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''This is a sample docstring for testing.\\n    It has multiple lines.\\n        Some lines are more indented.\\n    And some are less indented.'''\n"",
            ""lines_with_leading_tabs_expanded = lambda ds: ds.expandtabs().splitlines()\n"",
            ""sys = type('Mock', (object,), {'maxsize': 1000000000})\n"",
            ""prefix = ''\n""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''\n    This is an example docstring\n    It has several lines\n    Each line is indented'''"",
            ""def lines_with_leading_tabs_expanded(docstring):\n    return docstring.expandtabs().splitlines()"",
            ""prefix = ''"",
            ""sys.maxsize = 9223372036854775807""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = \""\""\""\\n    Example docstring with leading indentation.\\n        This should be stripped properly.\\n    \""\""\"""",
            ""lines_with_leading_tabs_expanded = lambda s: s.expandtabs().split('\\n')"",
            ""prefix = \""\"""",
            ""sys = type(\""Mock\"", (object,), {\""maxsize\"": float('inf')})()""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = \""\""\""Example docstring.\n    This is an indented line.\n    Here is another indented line.\n\""\""\"""",
            ""def lines_with_leading_tabs_expanded(docstring):\n    return [line.replace('\\t', ' ' * 4) for line in docstring.split('\\n')]"",
            ""prefix = \""\"""",
            ""sys.maxsize = 9223372036854775807""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''\\n    This is an example docstring.\\n    It has several lines.\\n        And some indentation.\\n    '''"",
            ""def lines_with_leading_tabs_expanded(docstring):\\n    return docstring.expandtabs().split('\\n')"",
            ""prefix = ''"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})""
        ]
    }
]","[
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = '''Example docstring.\\n    This is an indented line.\\n    Another indented line.''' # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring): return docstring.split('\\n') # pragma: no cover"",
            ""prefix = '' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = \""\""\""\\n    Sample docstring that demonstrates indentation\\n        within the lines of the docstring.\\n    This should be processed by the existing code.\\n\""\""\"" # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring):# pragma: no cover"",
            ""    return [line.expandtabs() for line in docstring.splitlines()] # pragma: no cover"",
            ""prefix = \""\"" # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""prefix = \""\"" # pragma: no cover"",
            ""sys = type(\""Mock\"", (object,), {\""maxsize\"": float('inf')}) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = \""\""\""\\n    This is a sample docstring.\\n    It has multiple\\n    lines of text,\\n    some of which are indented.\\n    \""\""\"" # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring):# pragma: no cover"",
            ""    return [line.expandtabs() for line in docstring.splitlines()] # pragma: no cover"",
            ""prefix = \""\"" # pragma: no cover"",
            ""sys.maxsize = 9223372036854775807 # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = '''Example:# pragma: no cover"",
            ""    This is an example docstring# pragma: no cover"",
            ""    that spans multiple lines.# pragma: no cover"",
            ""    ''' # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring):# pragma: no cover"",
            ""    return [line.expandtabs() for line in docstring.splitlines()] # pragma: no cover"",
            ""prefix = '' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = '''This is a sample docstring for testing.\\n    It has multiple lines.\\n        Some lines are more indented.\\n    And some are less indented.'''# pragma: no cover"",
            "" # pragma: no cover"",
            ""lines_with_leading_tabs_expanded = lambda ds: ds.expandtabs().splitlines()# pragma: no cover"",
            "" # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 1000000000})# pragma: no cover"",
            "" # pragma: no cover"",
            ""prefix = ''# pragma: no cover"",
            "" # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = '''# pragma: no cover"",
            ""    This is an example docstring# pragma: no cover"",
            ""    It has several lines# pragma: no cover"",
            ""    Each line is indented''' # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring):# pragma: no cover"",
            ""    return docstring.expandtabs().splitlines() # pragma: no cover"",
            ""prefix = '' # pragma: no cover"",
            ""sys.maxsize = 9223372036854775807 # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = \""\""\""\\n    Example docstring with leading indentation.\\n        This should be stripped properly.\\n    \""\""\"" # pragma: no cover"",
            ""lines_with_leading_tabs_expanded = lambda s: s.expandtabs().split('\\n') # pragma: no cover"",
            ""prefix = \""\"" # pragma: no cover"",
            ""sys = type(\""Mock\"", (object,), {\""maxsize\"": float('inf')})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = \""\""\""Example docstring.# pragma: no cover"",
            ""    This is an indented line.# pragma: no cover"",
            ""    Here is another indented line.# pragma: no cover"",
            ""\""\""\"" # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring):# pragma: no cover"",
            ""    return [line.replace('\\t', ' ' * 4) for line in docstring.split('\\n')] # pragma: no cover"",
            ""prefix = \""\"" # pragma: no cover"",
            ""sys.maxsize = 9223372036854775807 # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""prefix = '' # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807}) # pragma: no cover""
        ]
    }
]",1,490,0.000245,1148,0.001722,0.001967
"When trying to execute the code snippet with the provided imports and initialization, the following error happens:
# begin error message
Execution error at line :
This is an indented line.
Another indented line.
# end error message

Please, provide self-contained and concrete Python fixed values of the imports and initialization to solve the error and make the code snippet executable.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''Example docstring.\\n    This is an indented line.\\n    Another indented line.'''"",
            ""def lines_with_leading_tabs_expanded(docstring): return [line.expandtabs() for line in docstring.split('\\n')]"",
            ""prefix = ''""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''Example docstring.\\n    This is an indented line.\\n    Another indented line.'''"",
            ""def lines_with_leading_tabs_expanded(docstring): return [line.expandtabs() for line in docstring.split('\\n')]"",
            ""sys = type('Mock', (object,), {'maxsize': float('inf')})"",
            ""prefix = ''""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''Example docstring.\\n    This is an indented line.\\n    Another indented line.'''"",
            ""def lines_with_leading_tabs_expanded(docstring): return docstring.replace('\\t', '    ').split('\\n')"",
            ""prefix = ''""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''Example docstring.\\n    This is an indented line.\\n    Another indented line.'''"",
            ""def lines_with_leading_tabs_expanded(docstring): return docstring.expandtabs().split('\\n')"",
            ""prefix = ''""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''Example docstring.\\n    This is an indented line.\\n    Another indented line.'''"",
            ""def lines_with_leading_tabs_expanded(docstring): return [line.expandtabs() for line in docstring.split('\\n')]"",
            ""prefix = ''""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''Example docstring.\\n    This is an indented line.\\n    Another indented line.'''.strip()"",
            ""def lines_with_leading_tabs_expanded(docstring): return docstring.expandtabs().split('\\n')"",
            ""prefix = ''""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''Example docstring.\\n    This is an indented line.\\n    Another indented line.'''.strip()"",
            ""def lines_with_leading_tabs_expanded(docstring): return [line.expandtabs() for line in docstring.split('\\n')]"",
            ""prefix = ''""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''Example docstring.\\n    This is an indented line.\\n    Another indented line.'''"",
            ""def lines_with_leading_tabs_expanded(docstring): return [line.replace('\\t', '    ') for line in docstring.split('\\n')]"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})()"",
            ""prefix = ''""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''Example docstring.\\n    This is an indented line.\\n    Another indented line.'''"",
            ""def lines_with_leading_tabs_expanded(docstring): return [line.expandtabs() for line in docstring.split('\\n')]"",
            ""prefix = ''""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''Example docstring.\\n    This is an indented line.\\n    Another indented line.'''"",
            ""def lines_with_leading_tabs_expanded(docstring): return [line.replace('\\t', '    ') for line in docstring.split('\\n')]"",
            ""prefix = ''""
        ]
    }
]","[
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = '''Example docstring.\\n    This is an indented line.\\n    Another indented line.''' # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring): return [line.expandtabs() for line in docstring.split('\\n')] # pragma: no cover"",
            ""prefix = '' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = '''Example docstring.\\n    This is an indented line.\\n    Another indented line.''' # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring): return [line.expandtabs() for line in docstring.split('\\n')] # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': float('inf')}) # pragma: no cover"",
            ""prefix = '' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = '''Example docstring.\\n    This is an indented line.\\n    Another indented line.''' # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring): return docstring.replace('\\t', '    ').split('\\n') # pragma: no cover"",
            ""prefix = '' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = '''Example docstring.\\n    This is an indented line.\\n    Another indented line.''' # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring): return docstring.expandtabs().split('\\n') # pragma: no cover"",
            ""prefix = '' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = '''Example docstring.\\n    This is an indented line.\\n    Another indented line.''' # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring): return [line.expandtabs() for line in docstring.split('\\n')] # pragma: no cover"",
            ""prefix = '' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = '''Example docstring.\\n    This is an indented line.\\n    Another indented line.'''.strip() # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring): return docstring.expandtabs().split('\\n') # pragma: no cover"",
            ""prefix = '' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = '''Example docstring.\\n    This is an indented line.\\n    Another indented line.'''.strip() # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring): return [line.expandtabs() for line in docstring.split('\\n')] # pragma: no cover"",
            ""prefix = '' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = '''Example docstring.\\n    This is an indented line.\\n    Another indented line.''' # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring): return [line.replace('\\t', '    ') for line in docstring.split('\\n')] # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})() # pragma: no cover"",
            ""prefix = '' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = '''Example docstring.\\n    This is an indented line.\\n    Another indented line.''' # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring): return [line.expandtabs() for line in docstring.split('\\n')] # pragma: no cover"",
            ""prefix = '' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = '''Example docstring.\\n    This is an indented line.\\n    Another indented line.''' # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring): return [line.replace('\\t', '    ') for line in docstring.split('\\n')] # pragma: no cover"",
            ""prefix = '' # pragma: no cover""
        ]
    }
]",2,857,0.0004285,968,0.001452,0.0018805
"When trying to execute the code snippet with the provided imports and initialization, the following error happens:
# begin error message
Execution error at line :
    within the lines of the docstring.
This should be processed by the existing code.
# end error message

Please, provide self-contained and concrete Python fixed values of the imports and initialization to solve the error and make the code snippet executable.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = \""\""\""\\n    Sample docstring that demonstrates indentation\\n        within the lines of the docstring.\\n    This should be processed by the existing code.\\n\""\""\"""",
            ""def lines_with_leading_tabs_expanded(docstring):\n    return [line.expandtabs() for line in docstring.split('\\n')]"",
            ""prefix = \""\"""",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})()""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = \""\""\""\\n    Sample docstring that demonstrates indentation\\n        within the lines of the docstring.\\n    This should be processed by the existing code.\\n\""\""\"""",
            ""def lines_with_leading_tabs_expanded(docstring):\n    return [line.expandtabs() for line in docstring.splitlines()]"",
            ""prefix = \""\"""",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})()""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = \""\""\""Sample docstring.\n    This is an indented line.\n    Another indented line.\""\""\"""",
            ""def lines_with_leading_tabs_expanded(docstring):\n    return [line.expandtabs() for line in docstring.splitlines()]"",
            ""prefix = \""\"""",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})()""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = \""\""\""\\nSample docstring that demonstrates indentation\\n    within the lines of the docstring.\\nThis should be processed by the existing code.\\n\""\""\"""",
            ""def lines_with_leading_tabs_expanded(docstring):\n    return [line.expandtabs() for line in docstring.splitlines()]"",
            ""prefix = \""\"""",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})()""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = \""\""\""\\nSample docstring that demonstrates indentation\\n    within the lines of the docstring.\\nThis should be processed by the existing code.\\n\""\""\"""",
            ""def lines_with_leading_tabs_expanded(docstring):\n    return [line.expandtabs() for line in docstring.splitlines()]"",
            ""prefix = \""\"""",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})()""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = \""\""\""\\nSample docstring that demonstrates indentation\\n    within the lines of the docstring.\\nThis should be processed by the existing code.\\n\""\""\"""",
            ""def lines_with_leading_tabs_expanded(docstring):\n    return [line.expandtabs() for line in docstring.splitlines()]"",
            ""prefix = \""\"""",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})()""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = \""\""\""Sample docstring that demonstrates indentation\\n    within the lines of the docstring.\\nAnother line that should be processed.\\n    Final line with indentation.\""\""\"""",
            ""def lines_with_leading_tabs_expanded(docstring):\n    return [line.expandtabs() for line in docstring.splitlines()]"",
            ""prefix = \""\"""",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})()""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = \""\""\""\\n    Sample docstring that demonstrates indentation\\n        within the lines of the docstring.\\n    This should be processed by the existing code.\\n\""\""\"""",
            ""def lines_with_leading_tabs_expanded(docstring):\n    return [line.expandtabs() for line in docstring.splitlines()]"",
            ""prefix = \""\"""",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})()""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''\\n    Sample docstring that demonstrates indentation\\n    within the lines of the docstring.\\n    This should be processed by the existing code.'''"",
            ""def lines_with_leading_tabs_expanded(docstring):\n    return [line.expandtabs() for line in docstring.splitlines()]"",
            ""prefix = ''"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})()""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = \""\""\""\\n    Sample docstring that demonstrates indentation\\n        within the lines of the docstring.\\n    This should be processed by the existing code.\\n\""\""\"""",
            ""def lines_with_leading_tabs_expanded(docstring):\n    return [line.expandtabs() for line in docstring.splitlines()]"",
            ""prefix = \""\"""",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})()""
        ]
    }
]","[
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = \""\""\""\\n    Sample docstring that demonstrates indentation\\n        within the lines of the docstring.\\n    This should be processed by the existing code.\\n\""\""\"" # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring):# pragma: no cover"",
            ""    return [line.expandtabs() for line in docstring.split('\\n')] # pragma: no cover"",
            ""prefix = \""\"" # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = \""\""\""\\n    Sample docstring that demonstrates indentation\\n        within the lines of the docstring.\\n    This should be processed by the existing code.\\n\""\""\"" # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring):# pragma: no cover"",
            ""    return [line.expandtabs() for line in docstring.splitlines()] # pragma: no cover"",
            ""prefix = \""\"" # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = \""\""\""Sample docstring.# pragma: no cover"",
            ""    This is an indented line.# pragma: no cover"",
            ""    Another indented line.\""\""\"" # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring):# pragma: no cover"",
            ""    return [line.expandtabs() for line in docstring.splitlines()] # pragma: no cover"",
            ""prefix = \""\"" # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = \""\""\""\\nSample docstring that demonstrates indentation\\n    within the lines of the docstring.\\nThis should be processed by the existing code.\\n\""\""\"" # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring):# pragma: no cover"",
            ""    return [line.expandtabs() for line in docstring.splitlines()] # pragma: no cover"",
            ""prefix = \""\"" # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = \""\""\""\\nSample docstring that demonstrates indentation\\n    within the lines of the docstring.\\nThis should be processed by the existing code.\\n\""\""\"" # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring):# pragma: no cover"",
            ""    return [line.expandtabs() for line in docstring.splitlines()] # pragma: no cover"",
            ""prefix = \""\"" # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = \""\""\""\\nSample docstring that demonstrates indentation\\n    within the lines of the docstring.\\nThis should be processed by the existing code.\\n\""\""\"" # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring):# pragma: no cover"",
            ""    return [line.expandtabs() for line in docstring.splitlines()] # pragma: no cover"",
            ""prefix = \""\"" # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = \""\""\""Sample docstring that demonstrates indentation\\n    within the lines of the docstring.\\nAnother line that should be processed.\\n    Final line with indentation.\""\""\"" # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring):# pragma: no cover"",
            ""    return [line.expandtabs() for line in docstring.splitlines()] # pragma: no cover"",
            ""prefix = \""\"" # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = \""\""\""\\n    Sample docstring that demonstrates indentation\\n        within the lines of the docstring.\\n    This should be processed by the existing code.\\n\""\""\"" # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring):# pragma: no cover"",
            ""    return [line.expandtabs() for line in docstring.splitlines()] # pragma: no cover"",
            ""prefix = \""\"" # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = '''\\n    Sample docstring that demonstrates indentation\\n    within the lines of the docstring.\\n    This should be processed by the existing code.''' # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring):# pragma: no cover"",
            ""    return [line.expandtabs() for line in docstring.splitlines()] # pragma: no cover"",
            ""prefix = '' # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = \""\""\""\\n    Sample docstring that demonstrates indentation\\n        within the lines of the docstring.\\n    This should be processed by the existing code.\\n\""\""\"" # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring):# pragma: no cover"",
            ""    return [line.expandtabs() for line in docstring.splitlines()] # pragma: no cover"",
            ""prefix = \""\"" # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})() # pragma: no cover""
        ]
    }
]",2,1283,0.0006415,1342,0.002013,0.0026545
"When trying to execute the code snippet with the provided imports and initialization, the following error happens:
# begin error message
Execution error at line 8:
    if not docstring:
NameError: name 'docstring' is not defined
# end error message

Please, provide self-contained and concrete Python fixed values of the imports and initialization to solve the error and make the code snippet executable.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = \""\""\""Line 1\\n    Line 2\\n    Line 3\\n\""\""\"""",
            ""def lines_with_leading_tabs_expanded(docstring):\\n    return [line.expandtabs() for line in docstring.splitlines()]"",
            ""prefix = \""\"""",
            ""sys = type(\""Mock\"", (object,), {\""maxsize\"": float('inf')})()""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = \""\""\""\\n    This is a sample docstring.\\n    It is indented and includes multiple lines.\\n    The purpose is to test the indentation trimming.\\n    \""\""\"""",
            ""def lines_with_leading_tabs_expanded(docstring):\\n    return [line.expandtabs() for line in docstring.splitlines()]"",
            ""prefix = \""\"""",
            ""sys = type(\""Mock\"", (object,), {\""maxsize\"": 9223372036854775807})()""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = \""\""\""\\n    Sample docstring that demonstrates indentation\\n        within the lines of the docstring.\\n    This should be processed by the existing code.\\n\""\""\"""",
            ""def lines_with_leading_tabs_expanded(docstring): return [line.expandtabs() for line in docstring.splitlines()]"",
            ""prefix = ''"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})()""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = \""\""\""\\n    Line 1\\n    Line 2\\n    Line 3\\n    \""\""\"""",
            ""def lines_with_leading_tabs_expanded(docstring):\n    return [line.expandtabs() for line in docstring.splitlines()]"",
            ""prefix = \""\"""",
            ""sys = type(\""Mock\"", (object,), {\""maxsize\"": float('inf')})()""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''\\n    Line 1\\n    Line 2\\n    Line 3\\n    '''"",
            ""def lines_with_leading_tabs_expanded(docstring):\\n    return [line.expandtabs() for line in docstring.splitlines()]"",
            ""prefix = ''"",
            ""sys = type('Mock', (object,), {'maxsize': sys.maxsize})()""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = \""\""\""\\n    Line 1\\n    Line 2\\n    Line 3\\n    \""\""\"""",
            ""def lines_with_leading_tabs_expanded(docstring):\n    return [line.expandtabs() for line in docstring.splitlines()]"",
            ""prefix = \""\"""",
            ""sys = type(\""Mock\"", (object,), {\""maxsize\"": float('inf')})()""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = \""\""\""Line 1\\n    Line 2\\n    Line 3\\n\""\""\"""",
            ""def lines_with_leading_tabs_expanded(docstring):\n    return [line.expandtabs() for line in docstring.splitlines()]"",
            ""prefix = \""\"""",
            ""sys = type(\""Mock\"", (object,), {\""maxsize\"": sys.maxsize})""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = \""\""\""Example docstring.\\n    This is an indented line.\\n    Another indented line.\""\""\"""",
            ""def lines_with_leading_tabs_expanded(docstring): return docstring.split('\\n')"",
            ""prefix = \""\"""",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})()""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = \""\""\""Sample docstring\\n    with several indented lines\\n    and proper formatting.\""\""\"""",
            ""def lines_with_leading_tabs_expanded(docstring):\n    return [line.expandtabs() for line in docstring.splitlines()]"",
            ""prefix = \""\"""",
            ""sys = type('Mock', (object,), {'maxsize': sys.maxsize})()""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''Line 1\\n    Line 2\\n    Line 3'''"",
            ""def lines_with_leading_tabs_expanded(docstring):\n    return [line.expandtabs() for line in docstring.splitlines()]"",
            ""prefix = ''"",
            ""sys = type('Mock', (object,), {'maxsize': float('inf')})()""
        ]
    }
]","[
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""prefix = \""\"" # pragma: no cover"",
            ""sys = type(\""Mock\"", (object,), {\""maxsize\"": float('inf')})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""prefix = \""\"" # pragma: no cover"",
            ""sys = type(\""Mock\"", (object,), {\""maxsize\"": 9223372036854775807})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = \""\""\""\\n    Sample docstring that demonstrates indentation\\n        within the lines of the docstring.\\n    This should be processed by the existing code.\\n\""\""\"" # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring): return [line.expandtabs() for line in docstring.splitlines()] # pragma: no cover"",
            ""prefix = '' # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = \""\""\""\\n    Line 1\\n    Line 2\\n    Line 3\\n    \""\""\"" # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring):# pragma: no cover"",
            ""    return [line.expandtabs() for line in docstring.splitlines()] # pragma: no cover"",
            ""prefix = \""\"" # pragma: no cover"",
            ""sys = type(\""Mock\"", (object,), {\""maxsize\"": float('inf')})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""prefix = '' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = \""\""\""\\n    Line 1\\n    Line 2\\n    Line 3\\n    \""\""\"" # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring):# pragma: no cover"",
            ""    return [line.expandtabs() for line in docstring.splitlines()] # pragma: no cover"",
            ""prefix = \""\"" # pragma: no cover"",
            ""sys = type(\""Mock\"", (object,), {\""maxsize\"": float('inf')})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = \""\""\""Line 1\\n    Line 2\\n    Line 3\\n\""\""\"" # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring):# pragma: no cover"",
            ""    return [line.expandtabs() for line in docstring.splitlines()] # pragma: no cover"",
            ""prefix = \""\"" # pragma: no cover"",
            ""sys = type(\""Mock\"", (object,), {\""maxsize\"": sys.maxsize}) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = \""\""\""Example docstring.\\n    This is an indented line.\\n    Another indented line.\""\""\"" # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring): return docstring.split('\\n') # pragma: no cover"",
            ""prefix = \""\"" # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = \""\""\""Sample docstring\\n    with several indented lines\\n    and proper formatting.\""\""\"" # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring):# pragma: no cover"",
            ""    return [line.expandtabs() for line in docstring.splitlines()] # pragma: no cover"",
            ""prefix = \""\"" # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': sys.maxsize})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = '''Line 1\\n    Line 2\\n    Line 3''' # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring):# pragma: no cover"",
            ""    return [line.expandtabs() for line in docstring.splitlines()] # pragma: no cover"",
            ""prefix = '' # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': float('inf')})() # pragma: no cover""
        ]
    }
]",2,1694,0.000847,1200,0.0018,0.002647
"When trying to execute the code snippet with the provided imports and initialization, the following error happens:
# begin error message
Execution error at line :
some of which are indented.

# end error message

Please, provide self-contained and concrete Python fixed values of the imports and initialization to solve the error and make the code snippet executable.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = \""\""\""This is a sample docstring.\\n    It has multiple\\n    lines of text,\\n    some of which are indented.\""\""\"""",
            ""def lines_with_leading_tabs_expanded(docstring):\n    return [line.expandtabs() for line in docstring.splitlines()]"",
            ""prefix = \""\"""",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})()""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = \""\""\""\\n    This is a sample docstring.\\n        It has multiple\\n        lines of text,\\n        some of which are indented.\\n    \""\""\"""",
            ""def lines_with_leading_tabs_expanded(docstring):\n    return [line.expandtabs() for line in docstring.splitlines()]"",
            ""prefix = \""\"""",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})()""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = \""\""\""\\n    This is a sample docstring.\\n        It has multiple indented lines,\\n    including some with deeper indentation.\\n\""\""\"""",
            ""def lines_with_leading_tabs_expanded(docstring):\n    return [line.expandtabs() for line in docstring.splitlines()]"",
            ""prefix = \""\"""",
            ""sys = type(\""Mock\"", (object,), {\""maxsize\"": 9223372036854775807})""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = \""\""\""This is a sample docstring.\\n    It has multiple lines of text,\\n    some of which are indented.\""\""\"""",
            ""def lines_with_leading_tabs_expanded(docstring):\n    return [line.expandtabs() for line in docstring.splitlines()]"",
            ""prefix = \""\"""",
            ""sys = type(\""Mock\"", (object,), {\""maxsize\"": 9223372036854775807})""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''\\n    This is a sample docstring.\\n    It has multiple lines of text,\\n    some of which are indented.'''\n"",
            ""def lines_with_leading_tabs_expanded(docstring):\n    return [line.expandtabs() for line in docstring.splitlines()]\n"",
            ""prefix = ''\n"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})()""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = \""\""\""\\n    This is a sample docstring.\\n        It has multiple lines of text,\\n    some of which are indented.\\n    \""\""\"""",
            ""def lines_with_leading_tabs_expanded(docstring):\n    return [line.expandtabs() for line in docstring.splitlines()]"",
            ""prefix = \""\"""",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})()""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = \""\""\""\\n    Line 1\\n    Line 2\\n    Line 3\\n    \""\""\"""",
            ""def lines_with_leading_tabs_expanded(docstring):\n    return [line.expandtabs() for line in docstring.splitlines()]"",
            ""prefix = \""\"""",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})()""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = \""\""\""Sample docstring.\\n    This is an indented line.\\n    Another indented line.\""\""\"""",
            ""def lines_with_leading_tabs_expanded(docstring):\n    return [line.expandtabs() for line in docstring.splitlines()]"",
            ""prefix = \""\"""",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})()""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = \""\""\""\\n    This is a sample docstring.\\n    It has multiple lines of text,\\n    some of which are indented.\\n\""\""\"""",
            ""def lines_with_leading_tabs_expanded(docstring):\n    return [line.expandtabs() for line in docstring.splitlines()]"",
            ""prefix = \""\"""",
            ""sys.maxsize = 9223372036854775807""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = \""\""\""Sample docstring.\\n    This is an indented line.\\n    Another indented line.\""\""\"""",
            ""def lines_with_leading_tabs_expanded(docstring):\n    return [line.expandtabs() for line in docstring.splitlines()]"",
            ""prefix = \""\"""",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})()""
        ]
    }
]","[
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = \""\""\""This is a sample docstring.\\n    It has multiple\\n    lines of text,\\n    some of which are indented.\""\""\"" # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring):# pragma: no cover"",
            ""    return [line.expandtabs() for line in docstring.splitlines()] # pragma: no cover"",
            ""prefix = \""\"" # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = \""\""\""\\n    This is a sample docstring.\\n        It has multiple\\n        lines of text,\\n        some of which are indented.\\n    \""\""\"" # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring):# pragma: no cover"",
            ""    return [line.expandtabs() for line in docstring.splitlines()] # pragma: no cover"",
            ""prefix = \""\"" # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = \""\""\""\\n    This is a sample docstring.\\n        It has multiple indented lines,\\n    including some with deeper indentation.\\n\""\""\"" # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring):# pragma: no cover"",
            ""    return [line.expandtabs() for line in docstring.splitlines()] # pragma: no cover"",
            ""prefix = \""\"" # pragma: no cover"",
            ""sys = type(\""Mock\"", (object,), {\""maxsize\"": 9223372036854775807}) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = \""\""\""This is a sample docstring.\\n    It has multiple lines of text,\\n    some of which are indented.\""\""\"" # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring):# pragma: no cover"",
            ""    return [line.expandtabs() for line in docstring.splitlines()] # pragma: no cover"",
            ""prefix = \""\"" # pragma: no cover"",
            ""sys = type(\""Mock\"", (object,), {\""maxsize\"": 9223372036854775807}) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = '''\\n    This is a sample docstring.\\n    It has multiple lines of text,\\n    some of which are indented.'''# pragma: no cover"",
            "" # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring):# pragma: no cover"",
            ""    return [line.expandtabs() for line in docstring.splitlines()]# pragma: no cover"",
            "" # pragma: no cover"",
            ""prefix = ''# pragma: no cover"",
            "" # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = \""\""\""\\n    This is a sample docstring.\\n        It has multiple lines of text,\\n    some of which are indented.\\n    \""\""\"" # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring):# pragma: no cover"",
            ""    return [line.expandtabs() for line in docstring.splitlines()] # pragma: no cover"",
            ""prefix = \""\"" # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = \""\""\""\\n    Line 1\\n    Line 2\\n    Line 3\\n    \""\""\"" # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring):# pragma: no cover"",
            ""    return [line.expandtabs() for line in docstring.splitlines()] # pragma: no cover"",
            ""prefix = \""\"" # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = \""\""\""Sample docstring.\\n    This is an indented line.\\n    Another indented line.\""\""\"" # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring):# pragma: no cover"",
            ""    return [line.expandtabs() for line in docstring.splitlines()] # pragma: no cover"",
            ""prefix = \""\"" # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = \""\""\""\\n    This is a sample docstring.\\n    It has multiple lines of text,\\n    some of which are indented.\\n\""\""\"" # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring):# pragma: no cover"",
            ""    return [line.expandtabs() for line in docstring.splitlines()] # pragma: no cover"",
            ""prefix = \""\"" # pragma: no cover"",
            ""sys.maxsize = 9223372036854775807 # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = \""\""\""Sample docstring.\\n    This is an indented line.\\n    Another indented line.\""\""\"" # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring):# pragma: no cover"",
            ""    return [line.expandtabs() for line in docstring.splitlines()] # pragma: no cover"",
            ""prefix = \""\"" # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})() # pragma: no cover""
        ]
    }
]",2,2100,0.00105,1299,0.0019485,0.0029985
"When trying to execute the code snippet with the provided imports and initialization, the following error happens:
# begin error message
Execution error at line :
that spans multiple lines.# pragma: no cover

# end error message

Please, provide self-contained and concrete Python fixed values of the imports and initialization to solve the error and make the code snippet executable.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''Example:\n    This is an example docstring\n    that spans multiple lines.\n    '''"",
            ""def lines_with_leading_tabs_expanded(docstring):\n    return [line.expandtabs() for line in docstring.splitlines()]"",
            ""prefix = ''"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})()""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''\n    This is an example docstring.\n        This line is indented.\n    This line is not.\n    '''"",
            ""def lines_with_leading_tabs_expanded(docstring):\n    return [line.expandtabs() for line in docstring.splitlines()]"",
            ""prefix = ''"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})()""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''/n Example:/n    This is an example docstring./n    It has multiple lines of text, each with consistent indentation./n '''.strip()"",
            ""def lines_with_leading_tabs_expanded(docstring): return [line.expandtabs() for line in docstring.splitlines()]"",
            ""prefix = ''"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})()""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''This is a test docstring.\n    It contains multiple lines.\n    Each line should be indented properly.\n'''"",
            ""def lines_with_leading_tabs_expanded(docstring):\n    return [line.expandtabs() for line in docstring.splitlines()]"",
            ""prefix = ''"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})()""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''Example:\n    This is an example docstring\n    that spans multiple lines.\n    with varying indents.\n    '''"",
            ""def lines_with_leading_tabs_expanded(docstring):\n    return [line.expandtabs() for line in docstring.splitlines()]"",
            ""prefix = ''"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})()""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''\n    Example docstring\n    that spans multiple lines and\n    some of which are indented.\n    '''"",
            ""def lines_with_leading_tabs_expanded(docstring):\n    return [line.expandtabs() for line in docstring.splitlines()]"",
            ""prefix = ''"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})()""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''\n    This is an example docstring.\n    It has multiple lines.\n    Some of these lines are indented.'''\n    "",
            ""def lines_with_leading_tabs_expanded(docstring):\n    return [line.expandtabs() for line in docstring.splitlines()]"",
            ""prefix = ''"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})()""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''\\n    This is a sample docstring.\\n    It has multiple lines,\\n    some of which are indented.\\n    '''"",
            ""def lines_with_leading_tabs_expanded(docstring):\n    return [line.expandtabs() for line in docstring.splitlines()]"",
            ""prefix = ''"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})()""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''Example:\n\nThis is an example docstring\n        that spans\n            multiple lines.\n'''"",
            ""def lines_with_leading_tabs_expanded(docstring):\n    return [line.expandtabs() for line in docstring.splitlines()]"",
            ""prefix = ''"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})()""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''Example:\\n    This is an example docstring\\n    that spans multiple lines.\\n'''"",
            ""def lines_with_leading_tabs_expanded(docstring):\n    return [line.expandtabs() for line in docstring.split('\\n')]"",
            ""prefix = ''"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})()""
        ]
    }
]","[
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = '''Example:# pragma: no cover"",
            ""    This is an example docstring# pragma: no cover"",
            ""    that spans multiple lines.# pragma: no cover"",
            ""    ''' # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring):# pragma: no cover"",
            ""    return [line.expandtabs() for line in docstring.splitlines()] # pragma: no cover"",
            ""prefix = '' # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = '''# pragma: no cover"",
            ""    This is an example docstring.# pragma: no cover"",
            ""        This line is indented.# pragma: no cover"",
            ""    This line is not.# pragma: no cover"",
            ""    ''' # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring):# pragma: no cover"",
            ""    return [line.expandtabs() for line in docstring.splitlines()] # pragma: no cover"",
            ""prefix = '' # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = '''/n Example:/n    This is an example docstring./n    It has multiple lines of text, each with consistent indentation./n '''.strip() # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring): return [line.expandtabs() for line in docstring.splitlines()] # pragma: no cover"",
            ""prefix = '' # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = '''This is a test docstring.# pragma: no cover"",
            ""    It contains multiple lines.# pragma: no cover"",
            ""    Each line should be indented properly.# pragma: no cover"",
            ""''' # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring):# pragma: no cover"",
            ""    return [line.expandtabs() for line in docstring.splitlines()] # pragma: no cover"",
            ""prefix = '' # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = '''Example:# pragma: no cover"",
            ""    This is an example docstring# pragma: no cover"",
            ""    that spans multiple lines.# pragma: no cover"",
            ""    with varying indents.# pragma: no cover"",
            ""    ''' # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring):# pragma: no cover"",
            ""    return [line.expandtabs() for line in docstring.splitlines()] # pragma: no cover"",
            ""prefix = '' # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = '''# pragma: no cover"",
            ""    Example docstring# pragma: no cover"",
            ""    that spans multiple lines and# pragma: no cover"",
            ""    some of which are indented.# pragma: no cover"",
            ""    ''' # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring):# pragma: no cover"",
            ""    return [line.expandtabs() for line in docstring.splitlines()] # pragma: no cover"",
            ""prefix = '' # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = '''# pragma: no cover"",
            ""    This is an example docstring.# pragma: no cover"",
            ""    It has multiple lines.# pragma: no cover"",
            ""    Some of these lines are indented.'''# pragma: no cover"",
            ""     # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring):# pragma: no cover"",
            ""    return [line.expandtabs() for line in docstring.splitlines()] # pragma: no cover"",
            ""prefix = '' # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = '''\\n    This is a sample docstring.\\n    It has multiple lines,\\n    some of which are indented.\\n    ''' # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring):# pragma: no cover"",
            ""    return [line.expandtabs() for line in docstring.splitlines()] # pragma: no cover"",
            ""prefix = '' # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = '''Example:# pragma: no cover"",
            ""# pragma: no cover"",
            ""This is an example docstring# pragma: no cover"",
            ""        that spans# pragma: no cover"",
            ""            multiple lines.# pragma: no cover"",
            ""''' # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring):# pragma: no cover"",
            ""    return [line.expandtabs() for line in docstring.splitlines()] # pragma: no cover"",
            ""prefix = '' # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = '''Example:\\n    This is an example docstring\\n    that spans multiple lines.\\n''' # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring):# pragma: no cover"",
            ""    return [line.expandtabs() for line in docstring.split('\\n')] # pragma: no cover"",
            ""prefix = '' # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})() # pragma: no cover""
        ]
    }
]",2,2472,0.001236,1230,0.001845,0.003081
"When trying to execute the code snippet with the provided imports and initialization, the following error happens:
# begin error message
Execution error at line :
    Some lines are more indented.
And some are less indented.
# end error message

Please, provide self-contained and concrete Python fixed values of the imports and initialization to solve the error and make the code snippet executable.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''This is a sample docstring for testing.\\n    It has multiple indented lines.\\n        Some lines are more indented.\\n    '''"",
            ""def lines_with_leading_tabs_expanded(docstring):\n    return [line.expandtabs() for line in docstring.splitlines()]"",
            ""prefix = ''"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})()""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''\n    This is a sample docstring for testing.\n        It has multiple levels of indentation.\n            This should be stripped properly.'''\n"",
            ""def lines_with_leading_tabs_expanded(docstring):\n    return [line.expandtabs() for line in docstring.splitlines()]\n"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})\n"",
            ""prefix = ''\n""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''\\nThis is a sample docstring for testing.\\n    It has multiple lines.\\n        Some lines are more indented.\\n    And some are less indented.\\n'''"",
            ""lines_with_leading_tabs_expanded = lambda ds: ds.expandtabs().splitlines()"",
            ""sys = type('Mock', (object,), {'maxsize': 1000000000})"",
            ""prefix = ''""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''\\n    This is a sample docstring.\\n    It has multiple lines.\\n        Some lines are more indented.\\n    And some are less indented.\\n    '''"",
            ""def lines_with_leading_tabs_expanded(docstring):\\n    return [line.expandtabs() for line in docstring.splitlines()]"",
            ""prefix = ''"",
            ""sys.maxsize = 9223372036854775807""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''\\n    This is a sample docstring for testing.\\n        It has multiple levels of indentation.\\n    Make sure to handle it correctly.\\n    '''"",
            ""def lines_with_leading_tabs_expanded(docstring):\n    return [line.expandtabs() for line in docstring.splitlines()]"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})()"",
            ""prefix = ''""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''\\n    This is a sample docstring for testing.\\n        It has multiple lines.\\n            Some lines are more indented.\\n        And some are less indented.'''"",
            ""def lines_with_leading_tabs_expanded(docstring):\n    return [line.expandtabs() for line in docstring.splitlines()]"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})()"",
            ""prefix = ''""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''\\n    This is a sample docstring for testing.\\n        It has multiple lines.\\n            Some lines are more indented.\\n        And some are less indented.\\n    '''"",
            ""def lines_with_leading_tabs_expanded(docstring):\\n    return [line.expandtabs() for line in docstring.splitlines()]"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})()"",
            ""prefix = ''""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''This is a sample docstring for testing.\n    It has multiple lines.\n        Some lines are more indented.\n    And some are less indented.\n'''"",
            ""def lines_with_leading_tabs_expanded(docstring):\n    return [line.expandtabs() for line in docstring.splitlines()]"",
            ""prefix = ''"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})()""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = \""\""\""\\n    This is a sample docstring.\\n        Some lines are more indented.\\n        And some are less indented.\\n    \""\""\"""",
            ""def lines_with_leading_tabs_expanded(docstring):\n    return [line.expandtabs() for line in docstring.splitlines()]"",
            ""sys = type('Mock', (object,), {'maxsize': 1000000000})()"",
            ""prefix = ''""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''This is a sample docstring for testing.\\n    It has multiple lines.\\n        Some lines are more indented.\\n    And some are less indented.\\n'''"",
            ""def lines_with_leading_tabs_expanded(docstring):\n    return [line.expandtabs() for line in docstring.split('\\n')]"",
            ""prefix = ''"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})()""
        ]
    }
]","[
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = '''This is a sample docstring for testing.\\n    It has multiple indented lines.\\n        Some lines are more indented.\\n    ''' # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring):# pragma: no cover"",
            ""    return [line.expandtabs() for line in docstring.splitlines()] # pragma: no cover"",
            ""prefix = '' # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = '''# pragma: no cover"",
            ""    This is a sample docstring for testing.# pragma: no cover"",
            ""        It has multiple levels of indentation.# pragma: no cover"",
            ""            This should be stripped properly.'''# pragma: no cover"",
            "" # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring):# pragma: no cover"",
            ""    return [line.expandtabs() for line in docstring.splitlines()]# pragma: no cover"",
            "" # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})# pragma: no cover"",
            "" # pragma: no cover"",
            ""prefix = ''# pragma: no cover"",
            "" # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = '''\\nThis is a sample docstring for testing.\\n    It has multiple lines.\\n        Some lines are more indented.\\n    And some are less indented.\\n''' # pragma: no cover"",
            ""lines_with_leading_tabs_expanded = lambda ds: ds.expandtabs().splitlines() # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 1000000000}) # pragma: no cover"",
            ""prefix = '' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""prefix = '' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = '''\\n    This is a sample docstring for testing.\\n        It has multiple levels of indentation.\\n    Make sure to handle it correctly.\\n    ''' # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring):# pragma: no cover"",
            ""    return [line.expandtabs() for line in docstring.splitlines()] # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})() # pragma: no cover"",
            ""prefix = '' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = '''\\n    This is a sample docstring for testing.\\n        It has multiple lines.\\n            Some lines are more indented.\\n        And some are less indented.''' # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring):# pragma: no cover"",
            ""    return [line.expandtabs() for line in docstring.splitlines()] # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})() # pragma: no cover"",
            ""prefix = '' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})() # pragma: no cover"",
            ""prefix = '' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = '''This is a sample docstring for testing.# pragma: no cover"",
            ""    It has multiple lines.# pragma: no cover"",
            ""        Some lines are more indented.# pragma: no cover"",
            ""    And some are less indented.# pragma: no cover"",
            ""''' # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring):# pragma: no cover"",
            ""    return [line.expandtabs() for line in docstring.splitlines()] # pragma: no cover"",
            ""prefix = '' # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = \""\""\""\\n    This is a sample docstring.\\n        Some lines are more indented.\\n        And some are less indented.\\n    \""\""\"" # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring):# pragma: no cover"",
            ""    return [line.expandtabs() for line in docstring.splitlines()] # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 1000000000})() # pragma: no cover"",
            ""prefix = '' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = '''This is a sample docstring for testing.\\n    It has multiple lines.\\n        Some lines are more indented.\\n    And some are less indented.\\n''' # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring):# pragma: no cover"",
            ""    return [line.expandtabs() for line in docstring.split('\\n')] # pragma: no cover"",
            ""prefix = '' # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})() # pragma: no cover""
        ]
    }
]",2,2885,0.0014425,1331,0.0019965,0.003439
"When trying to execute the code snippet with the provided imports and initialization, the following error happens:
# begin error message
Execution error at line :
It has several lines# pragma: no cover
Each line is indented
# end error message

Please, provide self-contained and concrete Python fixed values of the imports and initialization to solve the error and make the code snippet executable.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''\n    This is an example docstring.\n    It has several lines.\n    Each line is indented.\n    '''"",
            ""def lines_with_leading_tabs_expanded(docstring):\n    return [line.expandtabs() for line in docstring.split('\\n')]"",
            ""prefix = ''"",
            ""sys.maxsize = 9223372036854775807""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''Example docstring\\n    This is an indented line.\\n    Another indented line.'''\n"",
            ""def lines_with_leading_tabs_expanded(docstring):\n    return [line.expandtabs() for line in docstring.splitlines()]\n"",
            ""prefix = ''\n"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})()\n""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''\n    This is an example docstring\n    It has several lines\n        Each line is indented'''"",
            ""def lines_with_leading_tabs_expanded(docstring):\n    return docstring.expandtabs().splitlines()"",
            ""prefix = ''"",
            ""sys = type('Mock', (object,), {'maxsize': float('inf')})()""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''\n    This is an example docstring\n    that spans multiple lines.\nIt includes both indented and non-indented lines.\n'''"",
            ""def lines_with_leading_tabs_expanded(docstring):\n    return docstring.expandtabs().splitlines()"",
            ""prefix = ''"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})()""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''Example:\n    This is an example docstring.\n    It has several lines of text.\n    Each line is indented by some spaces.\n'''"",
            ""def lines_with_leading_tabs_expanded(docstring):\n    return docstring.expandtabs().splitlines()"",
            ""prefix = ''"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})()""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''\\n    This is a sample docstring.\\n    It contains multiple lines with different indentations.\\n    Each line is tested for leading spaces.\n'''"",
            ""def lines_with_leading_tabs_expanded(docstring):\n    return [line.expandtabs() for line in docstring.splitlines()]"",
            ""prefix = ''"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})()""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''\n    This is an example docstring\n    It has several lines\n    Each line is indented\n    '''"",
            ""def lines_with_leading_tabs_expanded(docstring):\n    return docstring.expandtabs().splitlines()"",
            ""prefix = ''"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})()""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''\n    This is a sample docstring,\n    which spans multiple lines,\n    and includes indentation.'''"",
            ""def lines_with_leading_tabs_expanded(docstring):\n    return [line.expandtabs() for line in docstring.split('\\n')]"",
            ""prefix = ''"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})()""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''This is an example docstring.\n    It has several lines.\n    Each line is indented.\n    '''"",
            ""def lines_with_leading_tabs_expanded(docstring): return docstring.expandtabs().splitlines()"",
            ""prefix = ''"",
            ""sys.maxsize = 9223372036854775807""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''\nThis is an example docstring\n    It has several lines\n    Each line is indented\n    to a certain degree.\n\n'''"",
            ""def lines_with_leading_tabs_expanded(docstring):\n    return docstring.expandtabs().splitlines()"",
            ""prefix = ''"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})()""
        ]
    }
]","[
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = '''# pragma: no cover"",
            ""    This is an example docstring.# pragma: no cover"",
            ""    It has several lines.# pragma: no cover"",
            ""    Each line is indented.# pragma: no cover"",
            ""    ''' # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring):# pragma: no cover"",
            ""    return [line.expandtabs() for line in docstring.split('\\n')] # pragma: no cover"",
            ""prefix = '' # pragma: no cover"",
            ""sys.maxsize = 9223372036854775807 # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = '''Example docstring\\n    This is an indented line.\\n    Another indented line.'''# pragma: no cover"",
            "" # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring):# pragma: no cover"",
            ""    return [line.expandtabs() for line in docstring.splitlines()]# pragma: no cover"",
            "" # pragma: no cover"",
            ""prefix = ''# pragma: no cover"",
            "" # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})()# pragma: no cover"",
            "" # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = '''# pragma: no cover"",
            ""    This is an example docstring# pragma: no cover"",
            ""    It has several lines# pragma: no cover"",
            ""        Each line is indented''' # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring):# pragma: no cover"",
            ""    return docstring.expandtabs().splitlines() # pragma: no cover"",
            ""prefix = '' # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': float('inf')})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = '''# pragma: no cover"",
            ""    This is an example docstring# pragma: no cover"",
            ""    that spans multiple lines.# pragma: no cover"",
            ""It includes both indented and non-indented lines.# pragma: no cover"",
            ""''' # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring):# pragma: no cover"",
            ""    return docstring.expandtabs().splitlines() # pragma: no cover"",
            ""prefix = '' # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = '''Example:# pragma: no cover"",
            ""    This is an example docstring.# pragma: no cover"",
            ""    It has several lines of text.# pragma: no cover"",
            ""    Each line is indented by some spaces.# pragma: no cover"",
            ""''' # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring):# pragma: no cover"",
            ""    return docstring.expandtabs().splitlines() # pragma: no cover"",
            ""prefix = '' # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = '''\\n    This is a sample docstring.\\n    It contains multiple lines with different indentations.\\n    Each line is tested for leading spaces.# pragma: no cover"",
            ""''' # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring):# pragma: no cover"",
            ""    return [line.expandtabs() for line in docstring.splitlines()] # pragma: no cover"",
            ""prefix = '' # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = '''# pragma: no cover"",
            ""    This is an example docstring# pragma: no cover"",
            ""    It has several lines# pragma: no cover"",
            ""    Each line is indented# pragma: no cover"",
            ""    ''' # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring):# pragma: no cover"",
            ""    return docstring.expandtabs().splitlines() # pragma: no cover"",
            ""prefix = '' # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = '''# pragma: no cover"",
            ""    This is a sample docstring,# pragma: no cover"",
            ""    which spans multiple lines,# pragma: no cover"",
            ""    and includes indentation.''' # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring):# pragma: no cover"",
            ""    return [line.expandtabs() for line in docstring.split('\\n')] # pragma: no cover"",
            ""prefix = '' # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = '''This is an example docstring.# pragma: no cover"",
            ""    It has several lines.# pragma: no cover"",
            ""    Each line is indented.# pragma: no cover"",
            ""    ''' # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring): return docstring.expandtabs().splitlines() # pragma: no cover"",
            ""prefix = '' # pragma: no cover"",
            ""sys.maxsize = 9223372036854775807 # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = '''# pragma: no cover"",
            ""This is an example docstring# pragma: no cover"",
            ""    It has several lines# pragma: no cover"",
            ""    Each line is indented# pragma: no cover"",
            ""    to a certain degree.# pragma: no cover"",
            ""# pragma: no cover"",
            ""''' # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring):# pragma: no cover"",
            ""    return docstring.expandtabs().splitlines() # pragma: no cover"",
            ""prefix = '' # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})() # pragma: no cover""
        ]
    }
]",2,3276,0.001638,1195,0.0017925,0.0034305
"When trying to execute the code snippet with the provided imports and initialization, the following error happens:
# begin error message
Execution error at line :
    This should be stripped properly.

# end error message

Please, provide self-contained and concrete Python fixed values of the imports and initialization to solve the error and make the code snippet executable.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''Example docstring:\n    This line is indented.\n        This line is more indented.\n    This line is indented again.'''\n"",
            ""def lines_with_leading_tabs_expanded(docstring):\n    return docstring.expandtabs().splitlines()\n"",
            ""prefix = ''\n"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''\\n    This is an example docstring.\\n        It has multiple indented lines.\\n        The indentation should be handled properly.\\n    This should be stripped correctly.'''"",
            ""def lines_with_leading_tabs_expanded(docstring): return [line.expandtabs() for line in docstring.split('\\n')]"",
            ""prefix = ''"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})()""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''\\n    This is a test docstring with leading indentation.\\n    It contains multiple lines.\\n\\n    And some empty lines too.\\n    This should be stripped properly.\\n'''"",
            ""def lines_with_leading_tabs_expanded(docstring):\n    return [line.expandtabs() for line in docstring.splitlines()]"",
            ""prefix = ''"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})()""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''\\n    Example docstring with leading indentation.\\n        This should be stripped properly.\\n    '''"",
            ""def lines_with_leading_tabs_expanded(docstring):\n    return docstring.expandtabs().split('\\n')"",
            ""prefix = ''"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})()""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''\\n    This is a sample docstring.\\n    It has multiple lines.\\n        Some of which are indented.'''\n"",
            ""def lines_with_leading_tabs_expanded(docstring):\n    return docstring.expandtabs().splitlines()\n"",
            ""prefix = \""\""\n"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})()\n""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''Example docstring\n    that spans\n        multiple indented\n    lines.'''"",
            ""def lines_with_leading_tabs_expanded(docstring):\n    return [line.expandtabs() for line in docstring.splitlines()]"",
            ""prefix = ''"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})()""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''\\n    This is a sample docstring.\\n        with multiple indented lines.\\n    It should be handled correctly.'''"",
            ""def lines_with_leading_tabs_expanded(docstring):\\n    return [line.expandtabs() for line in docstring.splitlines()]"",
            ""prefix = ''"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''    This is a sample docstring.\n        It has multiple lines.\n        Some lines are more indented.\n    And some are less indented.'''"",
            ""def lines_with_leading_tabs_expanded(docstring):\n    return [line.expandtabs() for line in docstring.split('\\n')]"",
            ""prefix = ''"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})()""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''\n    This is an example docstring.\n    It has multiple lines.\n    This should be stripped properly.'''\n"",
            ""def lines_with_leading_tabs_expanded(docstring):\n    return docstring.expandtabs().splitlines()\n"",
            ""prefix = ''\n"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})\n""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''\\n    This is a sample docstring.\\n\\tIt has multiple lines.\\n        Some lines are more indented.\\n    And some are less indented.'''"",
            ""def lines_with_leading_tabs_expanded(docstring):\\n    import re\\n    return re.sub(r'\\t', '    ', docstring).splitlines()"",
            ""prefix = ''"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})()""
        ]
    }
]","[
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = '''Example docstring:# pragma: no cover"",
            ""    This line is indented.# pragma: no cover"",
            ""        This line is more indented.# pragma: no cover"",
            ""    This line is indented again.'''# pragma: no cover"",
            "" # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring):# pragma: no cover"",
            ""    return docstring.expandtabs().splitlines()# pragma: no cover"",
            "" # pragma: no cover"",
            ""prefix = ''# pragma: no cover"",
            "" # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807}) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = '''\\n    This is an example docstring.\\n        It has multiple indented lines.\\n        The indentation should be handled properly.\\n    This should be stripped correctly.''' # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring): return [line.expandtabs() for line in docstring.split('\\n')] # pragma: no cover"",
            ""prefix = '' # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = '''\\n    This is a test docstring with leading indentation.\\n    It contains multiple lines.\\n\\n    And some empty lines too.\\n    This should be stripped properly.\\n''' # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring):# pragma: no cover"",
            ""    return [line.expandtabs() for line in docstring.splitlines()] # pragma: no cover"",
            ""prefix = '' # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = '''\\n    Example docstring with leading indentation.\\n        This should be stripped properly.\\n    ''' # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring):# pragma: no cover"",
            ""    return docstring.expandtabs().split('\\n') # pragma: no cover"",
            ""prefix = '' # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = '''\\n    This is a sample docstring.\\n    It has multiple lines.\\n        Some of which are indented.'''# pragma: no cover"",
            "" # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring):# pragma: no cover"",
            ""    return docstring.expandtabs().splitlines()# pragma: no cover"",
            "" # pragma: no cover"",
            ""prefix = \""\""# pragma: no cover"",
            "" # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})()# pragma: no cover"",
            "" # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = '''Example docstring# pragma: no cover"",
            ""    that spans# pragma: no cover"",
            ""        multiple indented# pragma: no cover"",
            ""    lines.''' # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring):# pragma: no cover"",
            ""    return [line.expandtabs() for line in docstring.splitlines()] # pragma: no cover"",
            ""prefix = '' # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""prefix = '' # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807}) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = '''    This is a sample docstring.# pragma: no cover"",
            ""        It has multiple lines.# pragma: no cover"",
            ""        Some lines are more indented.# pragma: no cover"",
            ""    And some are less indented.''' # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring):# pragma: no cover"",
            ""    return [line.expandtabs() for line in docstring.split('\\n')] # pragma: no cover"",
            ""prefix = '' # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = '''# pragma: no cover"",
            ""    This is an example docstring.# pragma: no cover"",
            ""    It has multiple lines.# pragma: no cover"",
            ""    This should be stripped properly.'''# pragma: no cover"",
            "" # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring):# pragma: no cover"",
            ""    return docstring.expandtabs().splitlines()# pragma: no cover"",
            "" # pragma: no cover"",
            ""prefix = ''# pragma: no cover"",
            "" # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})# pragma: no cover"",
            "" # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""prefix = '' # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})() # pragma: no cover""
        ]
    }
]",2,3667,0.0018335,1283,0.0019245,0.003758
"When trying to execute the code snippet with the provided imports and initialization, the following error happens:
# begin error message
Execution error at line :
Here is another indented line.# pragma: no cover

# end error message

Please, provide self-contained and concrete Python fixed values of the imports and initialization to solve the error and make the code snippet executable.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''\\n    This is an indented line.\\n    Another indented line.'''"",
            ""def lines_with_leading_tabs_expanded(docstring):\n    return [line.expandtabs() for line in docstring.splitlines()]"",
            ""prefix = ''"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})()""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''Example:\n    This is an example docstring\n    that spans multiple lines.\n    Each line is properly indented.'''\n"",
            ""def lines_with_leading_tabs_expanded(docstring):\n    return docstring.expandtabs().split('\\n')\n"",
            ""prefix = ''"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})()""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''Test Docstring.\n    This line is indented.\n    Another indented line here.\n    Final indented line.\n    '''"",
            ""def lines_with_leading_tabs_expanded(docstring):\n    return [line.expandtabs() for line in docstring.splitlines()]"",
            ""prefix = ''"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})()""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''\\n    This is an example docstring.\\n    It should be indented properly.\\n    All lines should align correctly.\\n    '''"",
            ""def lines_with_leading_tabs_expanded(docstring):\n    return [line.expandtabs() for line in docstring.splitlines()]"",
            ""prefix = ''"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})()""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''\\n    This is an indented line.\\n    Another indented line.'''\n"",
            ""def lines_with_leading_tabs_expanded(docstring):\n    return [line.expandtabs() for line in docstring.split('\\n')]"",
            ""prefix = ''"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})()""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = \""\""\""\\n    This is a sample docstring.\\n    It has multiple lines.\\n    Some lines are indented.\\n    \""\""\"""",
            ""def lines_with_leading_tabs_expanded(docstring):\n    return [line.expandtabs() for line in docstring.splitlines()]"",
            ""prefix = ''"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})()""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''\\n    Example docstring\\n        More indented line\\n    '''"",
            ""def lines_with_leading_tabs_expanded(docstring):\n    return docstring.expandtabs().split('\\n')"",
            ""prefix = ''"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})()""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''\\n    This is an example docstring.\\n    It has multiple lines.\\n        Some lines are indented more.\\n    And some lines are less indented.\\n'''"",
            ""def lines_with_leading_tabs_expanded(docstring): return [line.expandtabs(4) for line in docstring.split('\\n')]"",
            ""prefix = ''"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})()""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''\n    This is a sample docstring.\n    It has multiple lines.\n    Each line is indented.'''\n"",
            ""def lines_with_leading_tabs_expanded(docstring):\n    return docstring.expandtabs().split('\\n')"",
            ""prefix = ''"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})()""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = \""\""\""\\n    This is a sample docstring.\\n    It should have multiple lines.\\n    Each line will be tested.\\n    \""\""\"""",
            ""def lines_with_leading_tabs_expanded(docstring):\n    return [line.expandtabs() for line in docstring.splitlines()]"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})()"",
            ""prefix = \""\""""
        ]
    }
]","[
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = '''\\n    This is an indented line.\\n    Another indented line.''' # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring):# pragma: no cover"",
            ""    return [line.expandtabs() for line in docstring.splitlines()] # pragma: no cover"",
            ""prefix = '' # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = '''Example:# pragma: no cover"",
            ""    This is an example docstring# pragma: no cover"",
            ""    that spans multiple lines.# pragma: no cover"",
            ""    Each line is properly indented.'''# pragma: no cover"",
            "" # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring):# pragma: no cover"",
            ""    return docstring.expandtabs().split('\\n')# pragma: no cover"",
            "" # pragma: no cover"",
            ""prefix = '' # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = '''Test Docstring.# pragma: no cover"",
            ""    This line is indented.# pragma: no cover"",
            ""    Another indented line here.# pragma: no cover"",
            ""    Final indented line.# pragma: no cover"",
            ""    ''' # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring):# pragma: no cover"",
            ""    return [line.expandtabs() for line in docstring.splitlines()] # pragma: no cover"",
            ""prefix = '' # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = '''\\n    This is an example docstring.\\n    It should be indented properly.\\n    All lines should align correctly.\\n    ''' # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring):# pragma: no cover"",
            ""    return [line.expandtabs() for line in docstring.splitlines()] # pragma: no cover"",
            ""prefix = '' # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = '''\\n    This is an indented line.\\n    Another indented line.'''# pragma: no cover"",
            "" # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring):# pragma: no cover"",
            ""    return [line.expandtabs() for line in docstring.split('\\n')] # pragma: no cover"",
            ""prefix = '' # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = \""\""\""\\n    This is a sample docstring.\\n    It has multiple lines.\\n    Some lines are indented.\\n    \""\""\"" # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring):# pragma: no cover"",
            ""    return [line.expandtabs() for line in docstring.splitlines()] # pragma: no cover"",
            ""prefix = '' # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = '''\\n    Example docstring\\n        More indented line\\n    ''' # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring):# pragma: no cover"",
            ""    return docstring.expandtabs().split('\\n') # pragma: no cover"",
            ""prefix = '' # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = '''\\n    This is an example docstring.\\n    It has multiple lines.\\n        Some lines are indented more.\\n    And some lines are less indented.\\n''' # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring): return [line.expandtabs(4) for line in docstring.split('\\n')] # pragma: no cover"",
            ""prefix = '' # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = '''# pragma: no cover"",
            ""    This is a sample docstring.# pragma: no cover"",
            ""    It has multiple lines.# pragma: no cover"",
            ""    Each line is indented.'''# pragma: no cover"",
            "" # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring):# pragma: no cover"",
            ""    return docstring.expandtabs().split('\\n') # pragma: no cover"",
            ""prefix = '' # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = \""\""\""\\n    This is a sample docstring.\\n    It should have multiple lines.\\n    Each line will be tested.\\n    \""\""\"" # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring):# pragma: no cover"",
            ""    return [line.expandtabs() for line in docstring.splitlines()] # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})() # pragma: no cover"",
            ""prefix = \""\"" # pragma: no cover""
        ]
    }
]",2,4073,0.0020365,1249,0.0018735,0.00391
"When trying to execute the code snippet with the provided imports and initialization, the following error happens:
# begin error message
Execution error at line 8:
    if not docstring:
NameError: name 'docstring' is not defined
# end error message

Please, provide self-contained and concrete Python fixed values of the imports and initialization to solve the error and make the code snippet executable.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''\\n    This is an example docstring.\\n    It has several lines.\\n        And some indentation.\\n    '''"",
            ""def lines_with_leading_tabs_expanded(docstring):\\n    return docstring.expandtabs().split('\\n')"",
            ""prefix = ''"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})()""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''\\n    This is an example docstring.\\n    It has several lines.\\n        And some indentation.\\n    '''"",
            ""def lines_with_leading_tabs_expanded(docstring):\n    return docstring.expandtabs().split('\\n')"",
            ""prefix = ''"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})()""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''\\n    This is an example docstring.\\n    It has several lines.\\n        And some indentation.\\n    '''"",
            ""def lines_with_leading_tabs_expanded(docstring):\\n    return docstring.expandtabs().split('\\n')"",
            ""prefix = ''"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})()""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''\\n    This is an example docstring.\\n    It has several lines.\\n        And some indentation.\\n    '''"",
            ""def lines_with_leading_tabs_expanded(docstring):\\n    return docstring.expandtabs().split('\\n')"",
            ""prefix = ''"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})()""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''\\n    This is a sample docstring\\n    with multiple lines\\n    and various indentations.'''\n"",
            ""def lines_with_leading_tabs_expanded(docstring):\\n    return docstring.expandtabs().splitlines()\n"",
            ""prefix = ''"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})()""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''\\nThis is a sample docstring.\\n    It contains multiple lines.\\n        Some lines are indented more than others.\\n    '''"",
            ""def lines_with_leading_tabs_expanded(docstring): return [line.expandtabs() for line in docstring.split('\\n')]"",
            ""prefix = ''"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})()""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''\\n    This is an example docstring.\\n    It has multiple lines.\\n    Each line is indented.\\n    '''"",
            ""def lines_with_leading_tabs_expanded(docstring): return [line.expandtabs() for line in docstring.splitlines()]"",
            ""prefix = ''"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})()""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''\\n    This is an example docstring.\\n    It has several lines.\\n        And some indentation.\\n    '''"",
            ""def lines_with_leading_tabs_expanded(docstring):\n    return docstring.expandtabs().split('\\n')"",
            ""prefix = ''"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})()""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = \""\""\""\\n    This is an example docstring.\\n    It has several lines of text.\\n        Some lines are indented more than others.\\n    \""\""\"""",
            ""def lines_with_leading_tabs_expanded(docstring): return docstring.expandtabs().split('\\n')"",
            ""prefix = ''"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})()""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = '''\\n    This is an example docstring.\\n    Each line has some leading whitespace.\\n        Some lines are more indented than others.\\n    '''"",
            ""def lines_with_leading_tabs_expanded(docstring):\\n    return docstring.expandtabs().split('\\n')"",
            ""prefix = ''"",
            ""sys.maxsize = 9223372036854775807""
        ]
    }
]","[
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""prefix = '' # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = '''\\n    This is an example docstring.\\n    It has several lines.\\n        And some indentation.\\n    ''' # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring):# pragma: no cover"",
            ""    return docstring.expandtabs().split('\\n') # pragma: no cover"",
            ""prefix = '' # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""prefix = '' # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""prefix = '' # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            "" # pragma: no cover"",
            ""prefix = '' # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = '''\\nThis is a sample docstring.\\n    It contains multiple lines.\\n        Some lines are indented more than others.\\n    ''' # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring): return [line.expandtabs() for line in docstring.split('\\n')] # pragma: no cover"",
            ""prefix = '' # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = '''\\n    This is an example docstring.\\n    It has multiple lines.\\n    Each line is indented.\\n    ''' # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring): return [line.expandtabs() for line in docstring.splitlines()] # pragma: no cover"",
            ""prefix = '' # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = '''\\n    This is an example docstring.\\n    It has several lines.\\n        And some indentation.\\n    ''' # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring):# pragma: no cover"",
            ""    return docstring.expandtabs().split('\\n') # pragma: no cover"",
            ""prefix = '' # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = \""\""\""\\n    This is an example docstring.\\n    It has several lines of text.\\n        Some lines are indented more than others.\\n    \""\""\"" # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring): return docstring.expandtabs().split('\\n') # pragma: no cover"",
            ""prefix = '' # pragma: no cover"",
            ""sys = type('Mock', (object,), {'maxsize': 9223372036854775807})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""prefix = '' # pragma: no cover""
        ]
    }
]",2,4485,0.0022425,1229,0.0018435,0.004086
"When trying to execute the code snippet with the provided imports and initialization, the lines with # uncovered are not executed.

# begin code snippet
# https://www.python.org/dev/peps/pep-0257/#handling-docstring-indentation
if not docstring: # uncovered
    aux = """" # uncovered
    exit(aux) # uncovered
lines = lines_with_leading_tabs_expanded(docstring)
# Determine minimum indentation (first line doesn't count):
indent = sys.maxsize
for line in lines[1:]:
    stripped = line.lstrip()
    if stripped:
        indent = min(indent, len(line) - len(stripped))
trimmed = [lines[0].strip()]
if indent < sys.maxsize:
    last_line_idx = len(lines) - 2
    for i, line in enumerate(lines[1:]):
        stripped_line = line[indent:].rstrip()
        if stripped_line or i == last_line_idx:
            trimmed.append(prefix + stripped_line)
        else: # uncovered
            trimmed.append("""")
aux = ""\n"".join(trimmed)
exit(aux) # uncovered

# end code snippet

Please, provide self-contained and concrete Python modified values of the imports and initialization to execute one of the uncovered paths in the code snippet.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = \""\"""",
            ""lines = docstring.split('\\n')"",
            ""def lines_with_leading_tabs_expanded(docstring): return docstring.split('\\n')"",
            ""prefix = \""\""""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = None"",
            ""prefix = ''"",
            ""lines = []"",
            ""def lines_with_leading_tabs_expanded(docstring):"",
            ""    if docstring is None: return ['']"",
            ""    return docstring.expandtabs().splitlines()""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = None"",
            ""lines_with_leading_tabs_expanded = lambda x: x.split('\\n')"",
            ""lines = []"",
            ""prefix = ''""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = ''"",
            ""lines = type('Mock', (object,), {'expandtabs': lambda self: self })(docstring.split('\\n'))"",
            ""prefix = ''""
        ]
    },
    {
        ""imports"": [
            ""import sys"",
            ""from typing import List""
        ],
        ""initialization"": [
            ""docstring = ''"",
            ""lines: List[str] = []"",
            ""prefix = ''"",
            ""def lines_with_leading_tabs_expanded(docstring: str) -> List[str]: return docstring.split('\\n')""
        ]
    },
    {
        ""imports"": [
            ""import sys"",
            ""from typing import List""
        ],
        ""initialization"": [
            ""docstring = ''"",
            ""prefix = ''"",
            ""def lines_with_leading_tabs_expanded(content: str) -> List[str]: return content.expandtabs().splitlines()"",
            ""lines = lines_with_leading_tabs_expanded(docstring)""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = ''"",
            ""lines_with_leading_tabs_expanded = lambda x: x.split('\\n') if x else []"",
            ""prefix = ''""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = None"",
            ""prefix = ''"",
            ""def lines_with_leading_tabs_expanded(docstring):"",
            ""    return [''] if docstring is None else docstring.expandtabs().splitlines()""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = ''"",
            ""lines_with_leading_tabs_expanded = lambda s: s.expandtabs().splitlines()"",
            ""prefix = ''"",
            ""lines = []""
        ]
    },
    {
        ""imports"": [
            ""import sys""
        ],
        ""initialization"": [
            ""docstring = None"",
            ""lines = type('Mock', (object,), {'lines_with_leading_tabs_expanded': lambda self, doc: ['']})().lines_with_leading_tabs_expanded(docstring)"",
            ""prefix = ''""
        ]
    }
]","[
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = \""\"" # pragma: no cover"",
            ""lines = docstring.split('\\n') # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring): return docstring.split('\\n') # pragma: no cover"",
            ""prefix = \""\"" # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = None # pragma: no cover"",
            ""prefix = '' # pragma: no cover"",
            ""lines = [] # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring): # pragma: no cover"",
            ""    if docstring is None: return [''] # pragma: no cover"",
            ""    return docstring.expandtabs().splitlines() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = None # pragma: no cover"",
            ""lines_with_leading_tabs_expanded = lambda x: x.split('\\n') # pragma: no cover"",
            ""lines = [] # pragma: no cover"",
            ""prefix = '' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = '' # pragma: no cover"",
            ""prefix = '' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover"",
            ""from typing import List # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = '' # pragma: no cover"",
            ""lines: List[str] = [] # pragma: no cover"",
            ""prefix = '' # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring: str) -> List[str]: return docstring.split('\\n') # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover"",
            ""from typing import List # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = '' # pragma: no cover"",
            ""prefix = '' # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(content: str) -> List[str]: return content.expandtabs().splitlines() # pragma: no cover"",
            ""lines = lines_with_leading_tabs_expanded(docstring) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = '' # pragma: no cover"",
            ""lines_with_leading_tabs_expanded = lambda x: x.split('\\n') if x else [] # pragma: no cover"",
            ""prefix = '' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = None # pragma: no cover"",
            ""prefix = '' # pragma: no cover"",
            ""def lines_with_leading_tabs_expanded(docstring): # pragma: no cover"",
            ""    return [''] if docstring is None else docstring.expandtabs().splitlines() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = '' # pragma: no cover"",
            ""lines_with_leading_tabs_expanded = lambda s: s.expandtabs().splitlines() # pragma: no cover"",
            ""prefix = '' # pragma: no cover"",
            ""lines = [] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""docstring = None # pragma: no cover"",
            ""lines = type('Mock', (object,), {'lines_with_leading_tabs_expanded': lambda self, doc: ['']})().lines_with_leading_tabs_expanded(docstring) # pragma: no cover"",
            ""prefix = '' # pragma: no cover""
        ]
    }
]",3,494,0.000247,748,0.001122,0.001369
