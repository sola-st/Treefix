prompt,raw_predictions,predictions,prompt_type,input_size,input_price,output_size,output_price,total_price
"Provide self-contained and concrete Python values to initialize the undefined variables in the code snippet.

# begin code snippet
from ftplib import FTP
ftp = FTP()
ftp.connect(host, port)
ftp.login(username, password)
if use_active_mode:
    ftp.set_pasv(False)
ftp_data = []

def buffer_data(data):
    ftp_data.append(data)
ftp.retrbinary(f'RETR {path}', buffer_data)
dirname, filename = split(path)
ftp.cwd(dirname)
ftp.delete(filename)
exit("""".join(ftp_data))

# end code snippet

# begin undefined variables
host
port
username
password
use_active_mode
path
split
# end undefined variables

# begin undefined attributes and methods

# end undefined attributes and methods

Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""from posixpath import split""
        ],
        ""initialization"": [
            ""host = 'ftp.example.com'"",
            ""port = 21"",
            ""username = 'example_user'"",
            ""password = 'example_password'"",
            ""use_active_mode = False"",
            ""path = '/example/path/to/file.txt'""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'ftp.example.com'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/remote/path/to/file.txt'""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = '127.0.0.1'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = 'directory/filename.txt'""
        ]
    },
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""host = 'ftp.example.com'"",
            ""port = 21"",
            ""username = 'example_user'"",
            ""password = 'example_password'"",
            ""use_active_mode = False"",
            ""path = '/example_dir/example_file.txt'"",
            ""def split(path): return os.path.split(path)""
        ]
    },
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""host = 'ftp.example.com'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = True"",
            ""path = '/example/path/to/file.txt'"",
            ""def split(path):\n    return os.path.split(path)""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'ftp.example.com'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/path/to/your/file.txt'""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'ftp.example.com'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/directory/file.txt'""
        ]
    },
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""host = 'ftp.example.com'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'password'"",
            ""use_active_mode = False"",
            ""path = '/example/path/to/file.txt'"",
            ""split = lambda p: os.path.split(p)""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'example.com'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'passwd'"",
            ""use_active_mode = False"",
            ""path = '/example/file.txt'""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'ftp.example.com'"",
            ""port = 21"",
            ""username = 'user123'"",
            ""password = 'pass123'"",
            ""use_active_mode = True"",
            ""path = '/dir/file.txt'""
        ]
    }
]","[
    {
        ""imports"": [
            ""from posixpath import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'ftp.example.com' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'example_user' # pragma: no cover"",
            ""password = 'example_password' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/example/path/to/file.txt' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'ftp.example.com' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/remote/path/to/file.txt' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = '127.0.0.1' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = 'directory/filename.txt' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'ftp.example.com' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'example_user' # pragma: no cover"",
            ""password = 'example_password' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/example_dir/example_file.txt' # pragma: no cover"",
            ""def split(path): return os.path.split(path) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'ftp.example.com' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = True # pragma: no cover"",
            ""path = '/example/path/to/file.txt' # pragma: no cover"",
            ""def split(path):# pragma: no cover"",
            ""    return os.path.split(path) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'ftp.example.com' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/path/to/your/file.txt' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'ftp.example.com' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/directory/file.txt' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'ftp.example.com' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'password' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/example/path/to/file.txt' # pragma: no cover"",
            ""split = lambda p: os.path.split(p) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'example.com' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'passwd' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/example/file.txt' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'ftp.example.com' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user123' # pragma: no cover"",
            ""password = 'pass123' # pragma: no cover"",
            ""use_active_mode = True # pragma: no cover"",
            ""path = '/dir/file.txt' # pragma: no cover""
        ]
    }
]",1,387,0.0001935,824,0.001236,0.0014294999999999
"When trying to execute the code snippet with the provided imports and initialization, the following error happens:
# begin error message
Execution error at line 13:
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno -2] Name or service not known
# end error message

Please, provide self-contained and concrete Python fixed values of the imports and initialization to solve the error and make the code snippet executable.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""from posixpath import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 2121"",
            ""username = 'test_user'"",
            ""password = 'test_password'"",
            ""use_active_mode = False"",
            ""path = '/test/path/to/file.txt'""
        ]
    },
    {
        ""imports"": [
            ""from posixpath import split""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net'"",
            ""port = 21"",
            ""username = 'demo'"",
            ""password = 'password'"",
            ""use_active_mode = False"",
            ""path = '/pub/example/readme.txt'""
        ]
    },
    {
        ""imports"": [
            ""from posixpath import split""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net'"",
            ""port = 21"",
            ""username = 'demo'"",
            ""password = 'password'"",
            ""use_active_mode = False"",
            ""path = '/readme.txt'""
        ]
    },
    {
        ""imports"": [
            ""from posixpath import split""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net'"",
            ""port = 21"",
            ""username = 'demo'"",
            ""password = 'password'"",
            ""use_active_mode = False"",
            ""path = '/pub/example/readme.txt'""
        ]
    },
    {
        ""imports"": [
            ""from posixpath import split""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net'"",
            ""port = 21"",
            ""username = 'demo'"",
            ""password = 'password'"",
            ""use_active_mode = False"",
            ""path = '/pub/example/readme.txt'""
        ]
    },
    {
        ""imports"": [
            ""from posixpath import split""
        ],
        ""initialization"": [
            ""host = '127.0.0.1'"",
            ""port = 21"",
            ""username = 'example_user'"",
            ""password = 'example_password'"",
            ""use_active_mode = False"",
            ""path = '/example/path/to/file.txt'""
        ]
    },
    {
        ""imports"": [
            ""from posixpath import split""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net'"",
            ""port = 21"",
            ""username = 'demo'"",
            ""password = 'password'"",
            ""use_active_mode = False"",
            ""path = '/pub/example/readme.txt'""
        ]
    },
    {
        ""imports"": [
            ""from posixpath import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'password'"",
            ""use_active_mode = False"",
            ""path = 'example.txt'""
        ]
    },
    {
        ""imports"": [
            ""from posixpath import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'password'"",
            ""use_active_mode = False"",
            ""path = '/example/dirname/file.txt'""
        ]
    },
    {
        ""imports"": [
            ""from posixpath import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 2121"",
            ""username = 'test_user'"",
            ""password = 'test_password'"",
            ""use_active_mode = False"",
            ""path = '/test/directory/testfile.txt'""
        ]
    }
]","[
    {
        ""imports"": [
            ""from posixpath import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 2121 # pragma: no cover"",
            ""username = 'test_user' # pragma: no cover"",
            ""password = 'test_password' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/test/path/to/file.txt' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from posixpath import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'demo' # pragma: no cover"",
            ""password = 'password' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/pub/example/readme.txt' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from posixpath import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'demo' # pragma: no cover"",
            ""password = 'password' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/readme.txt' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from posixpath import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'demo' # pragma: no cover"",
            ""password = 'password' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/pub/example/readme.txt' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from posixpath import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'demo' # pragma: no cover"",
            ""password = 'password' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/pub/example/readme.txt' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from posixpath import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = '127.0.0.1' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'example_user' # pragma: no cover"",
            ""password = 'example_password' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/example/path/to/file.txt' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from posixpath import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'demo' # pragma: no cover"",
            ""password = 'password' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/pub/example/readme.txt' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from posixpath import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'password' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = 'example.txt' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from posixpath import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'password' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/example/dirname/file.txt' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from posixpath import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 2121 # pragma: no cover"",
            ""username = 'test_user' # pragma: no cover"",
            ""password = 'test_password' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/test/directory/testfile.txt' # pragma: no cover""
        ]
    }
]",2,780,0.00039,810,0.001215,0.0016049999999999
"When trying to execute the code snippet with the provided imports and initialization, the following error happens:
# begin error message
Execution error at line 13:
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno -2] Name or service not known
# end error message

Please, provide self-contained and concrete Python fixed values of the imports and initialization to solve the error and make the code snippet executable.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = '12345'"",
            ""use_active_mode = True"",
            ""path = '/path/to/file.txt'""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net'"",
            ""port = 21"",
            ""username = 'demo'"",
            ""password = 'password'"",
            ""use_active_mode = False"",
            ""path = '/pub/example/readme.txt'""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'speedtest.tele2.net'"",
            ""port = 21"",
            ""username = 'anonymous'"",
            ""password = 'anonymous@example.com'"",
            ""use_active_mode = False"",
            ""path = '/1MB.zip'""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net'"",
            ""port = 21"",
            ""username = 'demo'"",
            ""password = 'password'"",
            ""use_active_mode = False"",
            ""path = '/pub/example/readme.txt'""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net'"",
            ""port = 21"",
            ""username = 'demo'"",
            ""password = 'password'"",
            ""use_active_mode = False"",
            ""path = '/pub/example/readme.txt'""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net'"",
            ""port = 21"",
            ""username = 'demo'"",
            ""password = 'password'"",
            ""use_active_mode = False"",
            ""path = '/pub/example/readme.txt'""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/path/to/file.txt'""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/remote/path/to/file.txt'""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/remote/path/to/file.txt'""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net'"",
            ""port = 21"",
            ""username = 'demo'"",
            ""password = 'password'"",
            ""use_active_mode = False"",
            ""path = '/pub/example/readme.txt'""
        ]
    }
]","[
    {
        ""imports"": [
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = '12345' # pragma: no cover"",
            ""use_active_mode = True # pragma: no cover"",
            ""path = '/path/to/file.txt' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'demo' # pragma: no cover"",
            ""password = 'password' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/pub/example/readme.txt' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'speedtest.tele2.net' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'anonymous' # pragma: no cover"",
            ""password = 'anonymous@example.com' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/1MB.zip' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'demo' # pragma: no cover"",
            ""password = 'password' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/pub/example/readme.txt' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'demo' # pragma: no cover"",
            ""password = 'password' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/pub/example/readme.txt' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'demo' # pragma: no cover"",
            ""password = 'password' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/pub/example/readme.txt' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/path/to/file.txt' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/remote/path/to/file.txt' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/remote/path/to/file.txt' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'demo' # pragma: no cover"",
            ""password = 'password' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/pub/example/readme.txt' # pragma: no cover""
        ]
    }
]",2,1170,0.000585,793,0.0011895,0.0017745
"When trying to execute the code snippet with the provided imports and initialization, the following error happens:
# begin error message
Execution error at line 13:
    sock.connect(sa)
ConnectionRefusedError: [Errno 111] Connection refused
# end error message

Please, provide self-contained and concrete Python fixed values of the imports and initialization to solve the error and make the code snippet executable.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""from os.path import split""
        ],
        ""initialization"": [
            ""import socket"",
            ""from unittest.mock import MagicMock"",
            ""FTP = MagicMock()"",
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'mock_user'"",
            ""password = 'mock_pass'"",
            ""use_active_mode = False"",
            ""path = '/remote/path/to/file.txt'""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'speedtest.tele2.net'"",
            ""port = 21"",
            ""username = 'anonymous'"",
            ""password = 'anonymous@'"",
            ""use_active_mode = False"",
            ""path = '1MB.zip'""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'speedtest.tele2.net'"",
            ""port = 21"",
            ""username = 'anonymous'"",
            ""password = 'anonymous@'"",
            ""use_active_mode = False"",
            ""path = '/1KB.zip'""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split"",
            ""from unittest.mock import Mock""
        ],
        ""initialization"": [
            ""host = 'testserver.com'"",
            ""port = 21"",
            ""username = 'testuser'"",
            ""password = 'testpass'"",
            ""use_active_mode = False"",
            ""path = '/remote/dir/testfile.txt'"",
            ""FTP.connect = Mock(return_value='220 Welcome')"",
            ""FTP.login = Mock(return_value='230 Login successful')"",
            ""FTP.cwd = Mock()"",
            ""FTP.retrbinary = Mock(side_effect=lambda cmd, callback: callback(b'This is a test file.'))"",
            ""FTP.delete = Mock()""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net'"",
            ""port = 21"",
            ""username = 'demo'"",
            ""password = 'password'"",
            ""use_active_mode = False"",
            ""path = '/pub/example/readme.txt'""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net'"",
            ""port = 21"",
            ""username = 'demo'"",
            ""password = 'password'"",
            ""use_active_mode = False"",
            ""path = '/pub/example/readme.txt'""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split"",
            ""import socket"",
            ""import threading"",
            ""from pyftpdlib.authorizers import DummyAuthorizer"",
            ""from pyftpdlib.handlers import FTPHandler"",
            ""from pyftpdlib.servers import FTPServer""
        ],
        ""initialization"": [
            ""host = '127.0.0.1'"",
            ""port = 2121"",
            ""username = 'user'"",
            ""password = '12345'"",
            ""use_active_mode = False"",
            ""path = 'directory/filename.txt'"",
            ""def start_ftp_server():"",
            ""    authorizer = DummyAuthorizer()"",
            ""    authorizer.add_user(username, password, '/tmp', perm='elradfmw')"",
            ""    handler = FTPHandler"",
            ""    handler.authorizer = authorizer"",
            ""    server = FTPServer((host, port), handler)"",
            ""    server.serve_forever()"",
            ""# Start FTP server in a separate thread"",
            ""ftp_thread = threading.Thread(target=start_ftp_server)"",
            ""ftp_thread.daemon = True"",
            ""ftp_thread.start()""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split"",
            ""import ftplib"",
            ""import tempfile""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net'"",
            ""port = 21"",
            ""username = 'demo'"",
            ""password = 'password'"",
            ""use_active_mode = False"",
            ""tmp_file = tempfile.NamedTemporaryFile(delete=False)"",
            ""path = tmp_file.name""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split"",
            ""from unittest.mock import Mock""
        ],
        ""initialization"": [
            ""# Mock FTP server settings"",
            ""host = 'mockserver.local'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            """",
            ""# Whether to use active mode"",
            ""use_active_mode = False"",
            """",
            ""# Path to the remote file"",
            ""path = '/directory/filename.txt'"",
            """",
            ""# Mock the FTP class methods"",
            ""FTP.connect = Mock(return_value=None)"",
            ""FTP.login = Mock(return_value=None)"",
            ""FTP.set_pasv = Mock(return_value=None)"",
            ""FTP.retrbinary = Mock(return_value=None)"",
            ""FTP.cwd = Mock(return_value=None)"",
            ""FTP.delete = Mock(return_value=None)""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split""
        ],
        ""initialization"": [
            ""import threading"",
            ""import socket"",
            ""import time"",
            ""def start_ftp_server():"",
            ""    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)"",
            ""    server.bind(('127.0.0.1', 21))"",
            ""    server.listen(1)"",
            ""    conn, addr = server.accept()"",
            ""    while True:"",
            ""        data = conn.recv(1024)"",
            ""        if not data:"",
            ""            break"",
            ""        conn.sendall(b'220 Service ready for new user.\\r\\n')"",
            ""    conn.close()"",
            ""    server.close()"",
            ""ftp_thread = threading.Thread(target=start_ftp_server, daemon=True)"",
            ""ftp_thread.start()"",
            ""time.sleep(1)"",
            ""host = '127.0.0.1'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = 'example/directory/filename.txt'""
        ]
    }
]","[
    {
        ""imports"": [
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""FTP = MagicMock() # pragma: no cover"",
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'mock_user' # pragma: no cover"",
            ""password = 'mock_pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/remote/path/to/file.txt' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'speedtest.tele2.net' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'anonymous' # pragma: no cover"",
            ""password = 'anonymous@' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '1MB.zip' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'speedtest.tele2.net' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'anonymous' # pragma: no cover"",
            ""password = 'anonymous@' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/1KB.zip' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split # pragma: no cover"",
            ""from unittest.mock import Mock # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'testserver.com' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'testuser' # pragma: no cover"",
            ""password = 'testpass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/remote/dir/testfile.txt' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'demo' # pragma: no cover"",
            ""password = 'password' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/pub/example/readme.txt' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'demo' # pragma: no cover"",
            ""password = 'password' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/pub/example/readme.txt' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split # pragma: no cover"",
            ""import socket # pragma: no cover"",
            ""import threading # pragma: no cover"",
            ""from pyftpdlib.authorizers import DummyAuthorizer # pragma: no cover"",
            ""from pyftpdlib.handlers import FTPHandler # pragma: no cover"",
            ""from pyftpdlib.servers import FTPServer # pragma: no cover""
        ],
        ""initialization"": [
            ""host = '127.0.0.1' # pragma: no cover"",
            ""port = 2121 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = '12345' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = 'directory/filename.txt' # pragma: no cover"",
            ""def start_ftp_server(): # pragma: no cover"",
            ""    authorizer = DummyAuthorizer() # pragma: no cover"",
            ""    authorizer.add_user(username, password, '/tmp', perm='elradfmw') # pragma: no cover"",
            ""    handler = FTPHandler # pragma: no cover"",
            ""    handler.authorizer = authorizer # pragma: no cover"",
            ""    server = FTPServer((host, port), handler) # pragma: no cover"",
            ""    server.serve_forever() # pragma: no cover"",
            ""# Start FTP server in a separate thread # pragma: no cover"",
            ""ftp_thread = threading.Thread(target=start_ftp_server) # pragma: no cover"",
            ""ftp_thread.daemon = True # pragma: no cover"",
            ""ftp_thread.start() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split # pragma: no cover"",
            ""import ftplib # pragma: no cover"",
            ""import tempfile # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'demo' # pragma: no cover"",
            ""password = 'password' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""tmp_file = tempfile.NamedTemporaryFile(delete=False) # pragma: no cover"",
            ""path = tmp_file.name # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split # pragma: no cover"",
            ""from unittest.mock import Mock # pragma: no cover""
        ],
        ""initialization"": [
            ""# Mock FTP server settings # pragma: no cover"",
            ""host = 'mockserver.local' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            "" # pragma: no cover"",
            ""# Whether to use active mode # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            "" # pragma: no cover"",
            ""# Path to the remote file # pragma: no cover"",
            ""path = '/directory/filename.txt' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""def start_ftp_server(): # pragma: no cover"",
            ""    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # pragma: no cover"",
            ""    server.bind(('127.0.0.1', 21)) # pragma: no cover"",
            ""    server.listen(1) # pragma: no cover"",
            ""    conn, addr = server.accept() # pragma: no cover"",
            ""    while True: # pragma: no cover"",
            ""        data = conn.recv(1024) # pragma: no cover"",
            ""        if not data: # pragma: no cover"",
            ""            break # pragma: no cover"",
            ""        conn.sendall(b'220 Service ready for new user.\\r\\n') # pragma: no cover"",
            ""    conn.close() # pragma: no cover"",
            ""    server.close() # pragma: no cover"",
            ""ftp_thread = threading.Thread(target=start_ftp_server, daemon=True) # pragma: no cover"",
            ""ftp_thread.start() # pragma: no cover"",
            ""time.sleep(1) # pragma: no cover"",
            ""host = '127.0.0.1' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = 'example/directory/filename.txt' # pragma: no cover""
        ]
    }
]",2,1544,0.000772,1384,0.002076,0.002848
"When trying to execute the code snippet with the provided imports and initialization, the following error happens:
# begin error message
Execution error at line 14:
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno -2] Name or service not known
# end error message

Please, provide self-contained and concrete Python fixed values of the imports and initialization to solve the error and make the code snippet executable.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""host = 'speedtest.tele2.net'"",
            ""port = 21"",
            ""username = 'anonymous'"",
            ""password = ''"",
            ""use_active_mode = False"",
            ""path = '/1KB.zip'"",
            ""def split(path): return os.path.split(path)""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'password'"",
            ""use_active_mode = False"",
            ""path = 'example_dir/example_file.txt'""
        ]
    },
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'password'"",
            ""use_active_mode = False"",
            ""path = 'example_dir/example_file.txt'"",
            ""def split(path): return os.path.split(path)""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net'"",
            ""port = 21"",
            ""username = 'demo'"",
            ""password = 'password'"",
            ""use_active_mode = False"",
            ""path = '/pub/example/readme.txt'""
        ]
    },
    {
        ""imports"": [
            ""import os"",
            ""from unittest.mock import Mock""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = 'directory/filename.txt'"",
            ""split = os.path.split"",
            ""FTP = Mock()""
        ]
    },
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/example_dir/example_file.txt'"",
            ""def split(path): return os.path.split(path)""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'testuser'"",
            ""password = 'testpass'"",
            ""use_active_mode = False"",
            ""path = 'directory/filename.txt'""
        ]
    },
    {
        ""imports"": [
            ""import os"",
            ""from unittest.mock import Mock""
        ],
        ""initialization"": [
            ""host = 'ftp.dlptest.com'"",
            ""port = 21"",
            ""username = 'dlpuser'"",
            ""password = 'rNrKYTX9g7z3RgJRmxWuGHbeu'"",
            ""use_active_mode = False"",
            ""path = '/example_dir/example_file.txt'"",
            ""split = Mock(side_effect=lambda p: os.path.split(p))""
        ]
    },
    {
        ""imports"": [
            ""import os"",
            ""from unittest.mock import Mock""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/example_dir/example_file.txt'"",
            ""split = os.path.split"",
            ""ftp.connect = Mock(return_value=None)"",
            ""ftp.login = Mock(return_value=None)"",
            ""ftp.set_pasv = Mock(return_value=None)"",
            ""ftp.retrbinary = Mock(return_value=None)"",
            ""ftp.cwd = Mock(return_value=None)"",
            ""ftp.delete = Mock(return_value=None)""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = 'directory/filename.txt'""
        ]
    }
]","[
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'speedtest.tele2.net' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'anonymous' # pragma: no cover"",
            ""password = '' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/1KB.zip' # pragma: no cover"",
            ""def split(path): return os.path.split(path) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'password' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = 'example_dir/example_file.txt' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'password' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = 'example_dir/example_file.txt' # pragma: no cover"",
            ""def split(path): return os.path.split(path) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'demo' # pragma: no cover"",
            ""password = 'password' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/pub/example/readme.txt' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover"",
            ""from unittest.mock import Mock # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = 'directory/filename.txt' # pragma: no cover"",
            ""split = os.path.split # pragma: no cover"",
            ""FTP = Mock() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/example_dir/example_file.txt' # pragma: no cover"",
            ""def split(path): return os.path.split(path) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'testuser' # pragma: no cover"",
            ""password = 'testpass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = 'directory/filename.txt' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover"",
            ""from unittest.mock import Mock # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'ftp.dlptest.com' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'dlpuser' # pragma: no cover"",
            ""password = 'rNrKYTX9g7z3RgJRmxWuGHbeu' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/example_dir/example_file.txt' # pragma: no cover"",
            ""split = Mock(side_effect=lambda p: os.path.split(p)) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover"",
            ""from unittest.mock import Mock # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/example_dir/example_file.txt' # pragma: no cover"",
            ""split = os.path.split # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = 'directory/filename.txt' # pragma: no cover""
        ]
    }
]",2,1945,0.0009725,940,0.00141,0.0023825
"When trying to execute the code snippet with the provided imports and initialization, the following error happens:
# begin error message
Execution error at line 15:
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno -2] Name or service not known
# end error message

Please, provide self-contained and concrete Python fixed values of the imports and initialization to solve the error and make the code snippet executable.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'testuser'"",
            ""password = 'testpassword'"",
            ""use_active_mode = False"",
            ""path = '/example/path/to/file.txt'"",
            ""def split(path):\n    return os.path.split(path)""
        ]
    },
    {
        ""imports"": [
            ""import os"",
            ""import socket""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 2121"",
            ""username = 'test_user'"",
            ""password = 'test_pass'"",
            ""use_active_mode = False"",
            ""path = '/test_dir/test_file.txt'"",
            ""def split(path):\n    return os.path.split(path)""
        ]
    },
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = True"",
            ""path = '/example/path/to/file.txt'"",
            ""def split(path):\n    return os.path.split(path)""
        ]
    },
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net'"",
            ""port = 21"",
            ""username = 'demo'"",
            ""password = 'password'"",
            ""use_active_mode = False"",
            ""path = '/pub/example/readme.txt'"",
            ""def split(path): return os.path.split(path)""
        ]
    },
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net'"",
            ""port = 21"",
            ""username = 'demo'"",
            ""password = 'password'"",
            ""use_active_mode = False"",
            ""path = '/pub/example/readme.txt'"",
            ""def split(path):\n    return os.path.split(path)""
        ]
    },
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/example/path/to/file.txt'"",
            ""def split(path):\n    return os.path.split(path)""
        ]
    },
    {
        ""imports"": [
            ""import os"",
            ""from unittest.mock import Mock""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net'"",
            ""port = 21"",
            ""username = 'demo'"",
            ""password = 'password'"",
            ""use_active_mode = False"",
            ""path = '/pub/example/file.txt'"",
            ""def split(path):\n    return os.path.split(path)""
        ]
    },
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/sample_dir/sample_file.txt'"",
            ""def split(path):\n    return os.path.split(path)""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net'"",
            ""port = 21"",
            ""username = 'demo'"",
            ""password = 'password'"",
            ""use_active_mode = False"",
            ""path = '/pub/example/test.txt'""
        ]
    },
    {
        ""imports"": [
            ""import os"",
            ""import tempfile"",
            ""import socket"",
            ""from unittest import mock""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 2121"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = 'directory/filename.txt'"",
            ""def split(path): return os.path.split(path)"",
            ""def start_mock_ftp_server():"",
            ""    server = mock.Mock()"",
            ""    socket_instance = mock.Mock()"",
            ""    server.accept.return_value = (socket_instance, ('127.0.0.1', 0))"",
            ""    socket_instance.recv.return_value = b'220 Welcome to mock FTP server\\r\\n'"",
            ""    return server"",
            """",
            ""ftp_server = start_mock_ftp_server()"",
            ""socket.socket = mock.Mock(return_value=ftp_server)""
        ]
    }
]","[
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'testuser' # pragma: no cover"",
            ""password = 'testpassword' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/example/path/to/file.txt' # pragma: no cover"",
            ""def split(path):# pragma: no cover"",
            ""    return os.path.split(path) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover"",
            ""import socket # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 2121 # pragma: no cover"",
            ""username = 'test_user' # pragma: no cover"",
            ""password = 'test_pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/test_dir/test_file.txt' # pragma: no cover"",
            ""def split(path):# pragma: no cover"",
            ""    return os.path.split(path) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = True # pragma: no cover"",
            ""path = '/example/path/to/file.txt' # pragma: no cover"",
            ""def split(path):# pragma: no cover"",
            ""    return os.path.split(path) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'demo' # pragma: no cover"",
            ""password = 'password' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/pub/example/readme.txt' # pragma: no cover"",
            ""def split(path): return os.path.split(path) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'demo' # pragma: no cover"",
            ""password = 'password' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/pub/example/readme.txt' # pragma: no cover"",
            ""def split(path):# pragma: no cover"",
            ""    return os.path.split(path) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/example/path/to/file.txt' # pragma: no cover"",
            ""def split(path):# pragma: no cover"",
            ""    return os.path.split(path) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover"",
            ""from unittest.mock import Mock # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'demo' # pragma: no cover"",
            ""password = 'password' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/pub/example/file.txt' # pragma: no cover"",
            ""def split(path):# pragma: no cover"",
            ""    return os.path.split(path) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/sample_dir/sample_file.txt' # pragma: no cover"",
            ""def split(path):# pragma: no cover"",
            ""    return os.path.split(path) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'demo' # pragma: no cover"",
            ""password = 'password' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/pub/example/test.txt' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover"",
            ""import tempfile # pragma: no cover"",
            ""import socket # pragma: no cover"",
            ""from unittest import mock # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 2121 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = 'directory/filename.txt' # pragma: no cover"",
            ""def split(path): return os.path.split(path) # pragma: no cover"",
            ""def start_mock_ftp_server(): # pragma: no cover"",
            ""    server = mock.Mock() # pragma: no cover"",
            ""    socket_instance = mock.Mock() # pragma: no cover"",
            ""    server.accept.return_value = (socket_instance, ('127.0.0.1', 0)) # pragma: no cover"",
            ""    socket_instance.recv.return_value = b'220 Welcome to mock FTP server\\r\\n' # pragma: no cover"",
            ""    return server # pragma: no cover"",
            "" # pragma: no cover"",
            ""ftp_server = start_mock_ftp_server() # pragma: no cover"",
            ""socket.socket = mock.Mock(return_value=ftp_server) # pragma: no cover""
        ]
    }
]",2,2347,0.0011735,1030,0.001545,0.0027185
"When trying to execute the code snippet with the provided imports and initialization, the following error happens:
# begin error message
Execution error at line 13:
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno -2] Name or service not known
# end error message

Please, provide self-contained and concrete Python fixed values of the imports and initialization to solve the error and make the code snippet executable.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'testuser'"",
            ""password = 'testpass'"",
            ""use_active_mode = False"",
            ""path = '/test/dir/file.txt'"",
            ""def split(path): return os.path.split(path)""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'example.com'"",
            ""port = 21"",
            ""username = 'testuser'"",
            ""password = 'testpass'"",
            ""use_active_mode = False"",
            ""path = 'testdir/testfile.txt'""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net'"",
            ""port = 21"",
            ""username = 'demo'"",
            ""password = 'password'"",
            ""use_active_mode = False"",
            ""path = '/pub/example/Readme.txt'""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/remote/path/to/file.txt'""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net'"",
            ""port = 21"",
            ""username = 'demo'"",
            ""password = 'password'"",
            ""use_active_mode = False"",
            ""path = '/pub/example/ReadMe.txt'""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net'"",
            ""port = 21"",
            ""username = 'demo'"",
            ""password = 'password'"",
            ""use_active_mode = True"",
            ""path = '/pub/example/readme.txt'""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net'"",
            ""port = 21"",
            ""username = 'demo'"",
            ""password = 'password'"",
            ""use_active_mode = False"",
            ""path = '/pub/example/readme.txt'""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 2121"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/local/path/to/file.txt'""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net'"",
            ""port = 21"",
            ""username = 'demo'"",
            ""password = 'password'"",
            ""use_active_mode = False"",
            ""path = '/readme.txt'""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net'"",
            ""port = 21"",
            ""username = 'demo'"",
            ""password = 'password'"",
            ""use_active_mode = False"",
            ""path = '/pub/example/Readme.txt'""
        ]
    }
]","[
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'testuser' # pragma: no cover"",
            ""password = 'testpass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/test/dir/file.txt' # pragma: no cover"",
            ""def split(path): return os.path.split(path) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'example.com' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'testuser' # pragma: no cover"",
            ""password = 'testpass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = 'testdir/testfile.txt' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'demo' # pragma: no cover"",
            ""password = 'password' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/pub/example/Readme.txt' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/remote/path/to/file.txt' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'demo' # pragma: no cover"",
            ""password = 'password' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/pub/example/ReadMe.txt' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'demo' # pragma: no cover"",
            ""password = 'password' # pragma: no cover"",
            ""use_active_mode = True # pragma: no cover"",
            ""path = '/pub/example/readme.txt' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'demo' # pragma: no cover"",
            ""password = 'password' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/pub/example/readme.txt' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 2121 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/local/path/to/file.txt' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'demo' # pragma: no cover"",
            ""password = 'password' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/readme.txt' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'demo' # pragma: no cover"",
            ""password = 'password' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/pub/example/Readme.txt' # pragma: no cover""
        ]
    }
]",2,2738,0.001369,810,0.001215,0.002584
"When trying to execute the code snippet with the provided imports and initialization, the following error happens:
# begin error message
Execution error at line 13:
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno -2] Name or service not known
# end error message

Please, provide self-contained and concrete Python fixed values of the imports and initialization to solve the error and make the code snippet executable.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net'"",
            ""port = 21"",
            ""username = 'demo'"",
            ""password = 'password'"",
            ""use_active_mode = False"",
            ""path = '/pub/example/readme.txt'""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net'"",
            ""port = 21"",
            ""username = 'demo'"",
            ""password = 'password'"",
            ""use_active_mode = False"",
            ""path = '/pub/example/readme.txt'""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net'"",
            ""port = 21"",
            ""username = 'demo'"",
            ""password = 'password'"",
            ""use_active_mode = False"",
            ""path = '/pub/example/readme.txt'""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split"",
            ""from unittest.mock import Mock""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/directory/file.txt'"",
            ""FTP.connect = Mock(return_value=None)"",
            ""FTP.login = Mock(return_value=None)"",
            ""FTP.set_pasv = Mock(return_value=None)"",
            ""FTP.retrbinary = Mock(return_value=None)"",
            ""FTP.cwd = Mock(return_value=None)"",
            ""FTP.delete = Mock(return_value=None)""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net'"",
            ""port = 21"",
            ""username = 'demo'"",
            ""password = 'password'"",
            ""use_active_mode = False"",
            ""path = '/pub/example/readme.txt'""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split"",
            ""import socket""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'example_user'"",
            ""password = 'example_password'"",
            ""use_active_mode = False"",
            ""path = '/example/path/to/file.txt'""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/directory/file.txt'""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = '127.0.0.1'"",
            ""port = 21"",
            ""username = 'guest'"",
            ""password = 'guest'"",
            ""use_active_mode = False"",
            ""path = 'example_dir/example_file.txt'""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net'"",
            ""port = 21"",
            ""username = 'demo'"",
            ""password = 'password'"",
            ""use_active_mode = False"",
            ""path = '/pub/example/readme.txt'""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net'"",
            ""port = 21"",
            ""username = 'demo'"",
            ""password = 'password'"",
            ""use_active_mode = False"",
            ""path = '/pub/example/readme.txt'""
        ]
    }
]","[
    {
        ""imports"": [
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'demo' # pragma: no cover"",
            ""password = 'password' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/pub/example/readme.txt' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'demo' # pragma: no cover"",
            ""password = 'password' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/pub/example/readme.txt' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'demo' # pragma: no cover"",
            ""password = 'password' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/pub/example/readme.txt' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split # pragma: no cover"",
            ""from unittest.mock import Mock # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/directory/file.txt' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'demo' # pragma: no cover"",
            ""password = 'password' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/pub/example/readme.txt' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split # pragma: no cover"",
            ""import socket # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'example_user' # pragma: no cover"",
            ""password = 'example_password' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/example/path/to/file.txt' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/directory/file.txt' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = '127.0.0.1' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'guest' # pragma: no cover"",
            ""password = 'guest' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = 'example_dir/example_file.txt' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'demo' # pragma: no cover"",
            ""password = 'password' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/pub/example/readme.txt' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'demo' # pragma: no cover"",
            ""password = 'password' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/pub/example/readme.txt' # pragma: no cover""
        ]
    }
]",2,3126,0.001563,878,0.001317,0.0028799999999999
"When trying to execute the code snippet with the provided imports and initialization, the following error happens:
# begin error message
Execution error at line 14:
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno -2] Name or service not known
# end error message

Please, provide self-contained and concrete Python fixed values of the imports and initialization to solve the error and make the code snippet executable.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'password'"",
            ""use_active_mode = False"",
            ""path = '/example/path/to/file.txt'""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'ftp.dlptest.com'"",
            ""port = 21"",
            ""username = 'dlpuser'"",
            ""password = 'rNrKYTX9g7z3RgJRmxWuGHbeu'"",
            ""use_active_mode = False"",
            ""path = '/Test.txt'""
        ]
    },
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net'"",
            ""port = 21"",
            ""username = 'demo'"",
            ""password = 'password'"",
            ""use_active_mode = False"",
            ""path = '/pub/example/readme.txt'"",
            ""split = lambda p: os.path.split(p)""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'speedtest.tele2.net'"",
            ""port = 21"",
            ""username = 'anonymous'"",
            ""password = 'anonymous@'"",
            ""use_active_mode = False"",
            ""path = '/1MB.zip'""
        ]
    },
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net'"",
            ""port = 21"",
            ""username = 'demo'"",
            ""password = 'password'"",
            ""use_active_mode = False"",
            ""path = '/pub/example/readme.txt'"",
            ""split = lambda p: os.path.split(p)""
        ]
    },
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net'"",
            ""port = 21"",
            ""username = 'demo'"",
            ""password = 'password'"",
            ""use_active_mode = False"",
            ""path = '/pub/example/readme.txt'"",
            ""split = lambda p: os.path.split(p)""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net'"",
            ""port = 21"",
            ""username = 'demo'"",
            ""password = 'password'"",
            ""use_active_mode = False"",
            ""path = '/readme.txt'""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net'"",
            ""port = 21"",
            ""username = 'demo'"",
            ""password = 'password'"",
            ""use_active_mode = False"",
            ""path = '/pub/example/readme.txt'""
        ]
    },
    {
        ""imports"": [
            ""import os""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net'"",
            ""port = 21"",
            ""username = 'demo'"",
            ""password = 'password'"",
            ""use_active_mode = False"",
            ""path = '/pub/example/readme.txt'"",
            ""split = lambda p: os.path.split(p)""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net'"",
            ""port = 21"",
            ""username = 'demo'"",
            ""password = 'password'"",
            ""use_active_mode = False"",
            ""path = '/readme.txt'""
        ]
    }
]","[
    {
        ""imports"": [
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'password' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/example/path/to/file.txt' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'ftp.dlptest.com' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'dlpuser' # pragma: no cover"",
            ""password = 'rNrKYTX9g7z3RgJRmxWuGHbeu' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/Test.txt' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'demo' # pragma: no cover"",
            ""password = 'password' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/pub/example/readme.txt' # pragma: no cover"",
            ""split = lambda p: os.path.split(p) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'speedtest.tele2.net' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'anonymous' # pragma: no cover"",
            ""password = 'anonymous@' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/1MB.zip' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'demo' # pragma: no cover"",
            ""password = 'password' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/pub/example/readme.txt' # pragma: no cover"",
            ""split = lambda p: os.path.split(p) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'demo' # pragma: no cover"",
            ""password = 'password' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/pub/example/readme.txt' # pragma: no cover"",
            ""split = lambda p: os.path.split(p) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'demo' # pragma: no cover"",
            ""password = 'password' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/readme.txt' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'demo' # pragma: no cover"",
            ""password = 'password' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/pub/example/readme.txt' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'demo' # pragma: no cover"",
            ""password = 'password' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/pub/example/readme.txt' # pragma: no cover"",
            ""split = lambda p: os.path.split(p) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'demo' # pragma: no cover"",
            ""password = 'password' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/readme.txt' # pragma: no cover""
        ]
    }
]",2,3525,0.0017625,851,0.0012765,0.003039
"When trying to execute the code snippet with the provided imports and initialization, the following error happens:
# begin error message
Execution error at line 13:
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno -2] Name or service not known
# end error message

Please, provide self-contained and concrete Python fixed values of the imports and initialization to solve the error and make the code snippet executable.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'password'"",
            ""use_active_mode = False"",
            ""path = '/example/path/to/file.txt'""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net'"",
            ""port = 21"",
            ""username = 'demo'"",
            ""password = 'password'"",
            ""use_active_mode = False"",
            ""path = '/pub/example/Readme.txt'""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'testuser'"",
            ""password = 'testpass'"",
            ""use_active_mode = False"",
            ""path = '/testdir/testfile.txt'""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = '127.0.0.1'"",
            ""port = 2121"",
            ""username = 'testuser'"",
            ""password = 'testpass'"",
            ""use_active_mode = False"",
            ""path = '/example/file.txt'""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'password'"",
            ""use_active_mode = False"",
            ""path = '/example_dir/example_file.txt'""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user123'"",
            ""password = 'pass123'"",
            ""use_active_mode = True"",
            ""path = '/dir/file.txt'""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net'"",
            ""port = 21"",
            ""username = 'demo'"",
            ""password = 'password'"",
            ""use_active_mode = False"",
            ""path = '/pub/example/readme.txt'""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'password'"",
            ""use_active_mode = False"",
            ""path = '/path/to/file.txt'""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net'"",
            ""port = 21"",
            ""username = 'demo'"",
            ""password = 'password'"",
            ""use_active_mode = False"",
            ""path = '/pub/example/readme.txt'""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split"",
            ""import socket""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user123'"",
            ""password = 'pass123'"",
            ""use_active_mode = False"",
            ""path = '/remote/file.txt'""
        ]
    }
]","[
    {
        ""imports"": [
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'password' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/example/path/to/file.txt' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'demo' # pragma: no cover"",
            ""password = 'password' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/pub/example/Readme.txt' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'testuser' # pragma: no cover"",
            ""password = 'testpass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/testdir/testfile.txt' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = '127.0.0.1' # pragma: no cover"",
            ""port = 2121 # pragma: no cover"",
            ""username = 'testuser' # pragma: no cover"",
            ""password = 'testpass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/example/file.txt' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'password' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/example_dir/example_file.txt' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user123' # pragma: no cover"",
            ""password = 'pass123' # pragma: no cover"",
            ""use_active_mode = True # pragma: no cover"",
            ""path = '/dir/file.txt' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'demo' # pragma: no cover"",
            ""password = 'password' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/pub/example/readme.txt' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'password' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/path/to/file.txt' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'test.rebex.net' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'demo' # pragma: no cover"",
            ""password = 'password' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/pub/example/readme.txt' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split # pragma: no cover"",
            ""import socket # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user123' # pragma: no cover"",
            ""password = 'pass123' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/remote/file.txt' # pragma: no cover""
        ]
    }
]",2,3915,0.0019575,801,0.0012015,0.003159
"When trying to execute the code snippet with the provided imports and initialization, the lines with # uncovered are not executed.

# begin code snippet
try: # uncovered
    from ftplib import FTP
except ImportError: # uncovered
    pass # uncovered
ftp = FTP()
ftp.connect(host, port)
ftp.login(username, password)
if use_active_mode:
    ftp.set_pasv(False)
ftp_data = []
def buffer_data(data):
    ftp_data.append(data)
ftp.retrbinary(f'RETR {path}', buffer_data)
dirname, filename = split(path)
ftp.cwd(dirname)
ftp.delete(filename) # uncovered
aux = """".join(ftp_data) # uncovered
exit(aux) # uncovered

# end code snippet

Please, provide self-contained and concrete Python modified values of the imports and initialization to execute one of the uncovered paths in the code snippet.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""import os.path""
        ],
        ""initialization"": [
            ""host = 'ftp.example.com'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/path/to/file.txt'"",
            ""split = os.path.split""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import error_perm""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'testuser'"",
            ""password = 'testpassword'"",
            ""use_active_mode = False"",
            ""path = '/testfile.txt'"",
            ""from os.path import split""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'example.com'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/path/to/file.txt'""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = 'testfile.txt'"",
            ""type('MockFTP', (object,), {'cwd': lambda x: None, 'delete': lambda x: None})"",
            ""FTP.cwd = lambda self, dirname: None"",
            ""FTP.delete = lambda self, filename: None""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""import os""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/example/path/to/file.txt'"",
            ""split = os.path.split""
        ]
    },
    {
        ""imports"": [
            ""import os"",
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'ftp.dlptest.com'"",
            ""port = 21"",
            ""username = 'dlpuser'"",
            ""password = 'rNrKYTX9g7z3RgJRmxWuGHbeu'"",
            ""use_active_mode = False"",
            ""path = 'test.txt'"",
            ""os.makedirs('test', exist_ok=True)"",
            ""with open('test/test.txt', 'w') as f: f.write('This is a test file.')""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = True"",
            ""path = 'test/path/to/file.txt'"",
            ""FTP = type(\""MockFTP\"", (object,), { \""connect\"": lambda self, host, port: None, \""login\"": lambda self, username, password: None, \""set_pasv\"": lambda self, val: None, \""retrbinary\"": lambda self, cmd, callback: callback(b\""sample data\""), \""cwd\"": lambda self, dirname: None, \""delete\"": lambda self, filename: None })"",
            ""exit = print""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/example/path/to/file.txt'"",
            ""type('MockFTP', (object,), {'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'dummy_data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: None, 'quit': lambda self: None})()""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/path/to/file.txt'"",
            ""type('Mock', (object,), {'split': lambda x: ('/path/to', 'file.txt')})"",
            ""_mock = type('MockFTP', (FTP,), {'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, pasv: None, 'retrbinary': lambda self, cmd, callback: callback(b'data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: None})"",
            ""ftp = _mock()""
        ]
    },
    {
        ""imports"": [
            ""import os"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = 'testfile.txt'"",
            ""FTP = type(\""MockFTP\"", (object,), dict(connect=lambda self, host, port: None, login=lambda self, username, password: None, set_pasv=lambda self, val: None, cwd=lambda self, dirname: None, delete=lambda self, filename: None, retrbinary=lambda self, cmd, callback: callback(b'Test data')))""
        ]
    }
]","[
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""import os.path # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'ftp.example.com' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/path/to/file.txt' # pragma: no cover"",
            ""split = os.path.split # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import error_perm # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'testuser' # pragma: no cover"",
            ""password = 'testpassword' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/testfile.txt' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'example.com' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/path/to/file.txt' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = 'testfile.txt' # pragma: no cover"",
            ""type('MockFTP', (object,), {'cwd': lambda x: None, 'delete': lambda x: None}) # pragma: no cover"",
            ""FTP.cwd = lambda self, dirname: None # pragma: no cover"",
            ""FTP.delete = lambda self, filename: None # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/example/path/to/file.txt' # pragma: no cover"",
            ""split = os.path.split # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover"",
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'ftp.dlptest.com' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'dlpuser' # pragma: no cover"",
            ""password = 'rNrKYTX9g7z3RgJRmxWuGHbeu' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = 'test.txt' # pragma: no cover"",
            ""os.makedirs('test', exist_ok=True) # pragma: no cover"",
            ""with open('test/test.txt', 'w') as f: f.write('This is a test file.') # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = True # pragma: no cover"",
            ""path = 'test/path/to/file.txt' # pragma: no cover"",
            ""FTP = type(\""MockFTP\"", (object,), { \""connect\"": lambda self, host, port: None, \""login\"": lambda self, username, password: None, \""set_pasv\"": lambda self, val: None, \""retrbinary\"": lambda self, cmd, callback: callback(b\""sample data\""), \""cwd\"": lambda self, dirname: None, \""delete\"": lambda self, filename: None }) # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/example/path/to/file.txt' # pragma: no cover"",
            ""type('MockFTP', (object,), {'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'dummy_data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: None, 'quit': lambda self: None})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/path/to/file.txt' # pragma: no cover"",
            ""type('Mock', (object,), {'split': lambda x: ('/path/to', 'file.txt')}) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = 'testfile.txt' # pragma: no cover"",
            ""FTP = type(\""MockFTP\"", (object,), dict(connect=lambda self, host, port: None, login=lambda self, username, password: None, set_pasv=lambda self, val: None, cwd=lambda self, dirname: None, delete=lambda self, filename: None, retrbinary=lambda self, cmd, callback: callback(b'Test data'))) # pragma: no cover""
        ]
    }
]",3,410,0.000205,1339,0.0020085,0.0022134999999999
"When trying to execute the code snippet with the provided imports and initialization, the lines with # uncovered are not executed.

# begin code snippet
try: # uncovered
    from ftplib import FTP
except ImportError: # uncovered
    pass # uncovered
ftp = FTP()
ftp.connect(host, port)
ftp.login(username, password)
if use_active_mode:
    ftp.set_pasv(False)
ftp_data = []
def buffer_data(data):
    ftp_data.append(data)
ftp.retrbinary(f'RETR {path}', buffer_data)
dirname, filename = split(path)
ftp.cwd(dirname)
ftp.delete(filename) # uncovered
aux = """".join(ftp_data) # uncovered
exit(aux) # uncovered

# end code snippet

Please, provide self-contained and concrete Python modified values of the imports and initialization to execute one of the uncovered paths in the code snippet.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'password'"",
            ""use_active_mode = False"",
            ""path = 'testfile.txt'"",
            ""FTP = type('MockFTP', (object,), {"",
            ""{'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, value: None, 'retrbinary': lambda self, cmd, callback: callback(b'dummy_data'), 'cwd': lambda self, dir: None, 'delete': lambda self, file: (print(f'Deleted file: {file}'), exec('# uncovered'))[0]}""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = 'testfile.txt'"",
            ""FTP = type('MockFTP', (object,), {'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: print('File deleted'), 'retrbinary': lambda self, cmd, callback: callback(b'Sample data')})"",
            ""ftp = FTP()""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = 'testfile.txt'"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: None, 'retrbinary': lambda self, cmd, callback: callback(b'test data') })"",
            ""exit = print""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = 'test.txt'"",
            ""type('MockFTP', (object,), {"",
            ""\""connect\"": lambda self, host, port: None,"",
            ""\""login\"": lambda self, username, password: None,"",
            ""\""set_pasv\"": lambda self, val: None,"",
            ""\""retrbinary\"": lambda self, cmd, callback: callback(b'Test data'),"",
            ""\""cwd\"": lambda self, dirname: None,"",
            ""\""delete\"": lambda self, filename: None"",
            ""})"",
            ""FTP = type('MockFTP', (object,), FTP.__dict__)"",
            ""exit = print""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/example/path/to/file.txt'"",
            ""FTP = type('MockFTP', (object,), {'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'dummy_data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: None})"",
            ""exit = print""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/example/path/to/file.txt'"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: None })"",
            ""exit = print""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/test/path/to/dummyfile.txt'"",
            ""MockFTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, use_active: None, 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: None, 'retrbinary': lambda self, command, callback: callback(b'testdata') })"",
            ""FTP = MockFTP"",
            ""exit = print""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = 'test/path/to/file.txt'"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, pasv: None, 'retrbinary': lambda self, cmd, callback: callback(b'data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: None })"",
            ""exit = print""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/example/path/to/file.txt'"",
            ""FTP = type('MockFTP', (FTP,), {"",
            ""'connect': lambda self, host, port: None,"",
            "" 'login': lambda self, username, password: None,"",
            ""'set_pasv': lambda self, pasv: None,"",
            ""'retrbinary': lambda self, cmd, callback: callback(b'dummy_data'),"",
            ""'cwd': lambda self, dirname: None,"",
            ""'delete': lambda self, filename: None,"",
            ""'quit': lambda self: None)""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = 'testfile.txt'"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'Test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: print('Deleted file') })"",
            ""def exit(data): print(data)""
        ]
    }
]","[
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'password' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = 'testfile.txt' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = 'testfile.txt' # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), {'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: print('File deleted'), 'retrbinary': lambda self, cmd, callback: callback(b'Sample data')}) # pragma: no cover"",
            ""ftp = FTP() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = 'testfile.txt' # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: None, 'retrbinary': lambda self, cmd, callback: callback(b'test data') }) # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = 'test.txt' # pragma: no cover"",
            ""type('MockFTP', (object,), { # pragma: no cover"",
            ""\""connect\"": lambda self, host, port: None, # pragma: no cover"",
            ""\""login\"": lambda self, username, password: None, # pragma: no cover"",
            ""\""set_pasv\"": lambda self, val: None, # pragma: no cover"",
            ""\""retrbinary\"": lambda self, cmd, callback: callback(b'Test data'), # pragma: no cover"",
            ""\""cwd\"": lambda self, dirname: None, # pragma: no cover"",
            ""\""delete\"": lambda self, filename: None # pragma: no cover"",
            ""}) # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/example/path/to/file.txt' # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), {'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'dummy_data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: None}) # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/example/path/to/file.txt' # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: None }) # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/test/path/to/dummyfile.txt' # pragma: no cover"",
            ""MockFTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, use_active: None, 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: None, 'retrbinary': lambda self, command, callback: callback(b'testdata') }) # pragma: no cover"",
            ""FTP = MockFTP # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = 'test/path/to/file.txt' # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, pasv: None, 'retrbinary': lambda self, cmd, callback: callback(b'data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: None }) # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            """"
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = 'testfile.txt' # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'Test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: print('Deleted file') }) # pragma: no cover""
        ]
    }
]",3,2136,0.001068,1864,0.002796,0.003864
"When trying to execute the code snippet with the provided imports and initialization, the lines with # uncovered are not executed.

# begin code snippet
try: # uncovered
    from ftplib import FTP
except ImportError: # uncovered
    pass # uncovered
ftp = FTP()
ftp.connect(host, port)
ftp.login(username, password)
if use_active_mode:
    ftp.set_pasv(False)
ftp_data = []
def buffer_data(data):
    ftp_data.append(data)
ftp.retrbinary(f'RETR {path}', buffer_data)
dirname, filename = split(path)
ftp.cwd(dirname)
ftp.delete(filename) # uncovered
aux = """".join(ftp_data) # uncovered
exit(aux) # uncovered

# end code snippet

Please, provide self-contained and concrete Python modified values of the imports and initialization to execute one of the uncovered paths in the code snippet.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = 'testfile.txt'"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'sample data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: print('Deleted file') })"",
            ""exit = print""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = 'testfile.txt'"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'Test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: print('File deleted') })"",
            ""exit = print""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/test/path/to/file.txt'"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'some data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: None })"",
            ""ftp = FTP()"",
            ""exit = print""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/test/path/to/file.txt'"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: print('Deleted file'), 'retrbinary': lambda self, cmd, callback: callback(b'test data') })"",
            ""exit = print""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/example/path/to/file.txt'"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('raise ImportError'), 'retrbinary': lambda self, cmd, callback: callback(b'data') })"",
            ""exit = print""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = 'testfile.txt'"",
            ""MockFTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('# uncovered') })"",
            ""FTP = MockFTP"",
            ""exit = print""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'password'"",
            ""use_active_mode = False"",
            ""path = 'testfile.txt'"",
            ""MockFTP = type('MockFTP', (object,), {"",
            ""'connect': lambda self, host, port: None,"",
            ""'login': lambda self, username, password: None,"",
            ""'set_pasv': lambda self, val: None,"",
            ""'retrbinary': lambda self, cmd, callback: callback(b'dummy data'),"",
            ""'cwd': lambda self, dirname: None,"",
            ""'delete': lambda self, filename: (print(f'Deleted file: {filename}'), exec('# uncovered'))[0]"",
            ""})"",
            ""FTP = MockFTP"",
            ""exit = print""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = 'testfile.txt'"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'Test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: None })"",
            ""def exit(data): print(data)""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = 'testfile.txt'"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'Test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: print('Deleted file') })"",
            ""def exit(data): print(data)""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/example/path/to/file.txt'"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: None, 'retrbinary': lambda self, cmd, callback: (callback(b'data'), print('File deletion and data handling executed')) })"",
            ""exit = print""
        ]
    }
]","[
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = 'testfile.txt' # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'sample data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: print('Deleted file') }) # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = 'testfile.txt' # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'Test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: print('File deleted') }) # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/test/path/to/file.txt' # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'some data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: None }) # pragma: no cover"",
            ""ftp = FTP() # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/test/path/to/file.txt' # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: print('Deleted file'), 'retrbinary': lambda self, cmd, callback: callback(b'test data') }) # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/example/path/to/file.txt' # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('raise ImportError'), 'retrbinary': lambda self, cmd, callback: callback(b'data') }) # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = 'testfile.txt' # pragma: no cover"",
            ""MockFTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('# uncovered') }) # pragma: no cover"",
            ""FTP = MockFTP # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'password' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = 'testfile.txt' # pragma: no cover"",
            ""MockFTP = type('MockFTP', (object,), { # pragma: no cover"",
            ""'connect': lambda self, host, port: None, # pragma: no cover"",
            ""'login': lambda self, username, password: None, # pragma: no cover"",
            ""'set_pasv': lambda self, val: None, # pragma: no cover"",
            ""'retrbinary': lambda self, cmd, callback: callback(b'dummy data'), # pragma: no cover"",
            ""'cwd': lambda self, dirname: None, # pragma: no cover"",
            ""'delete': lambda self, filename: (print(f'Deleted file: {filename}'), exec('# uncovered'))[0] # pragma: no cover"",
            ""}) # pragma: no cover"",
            ""FTP = MockFTP # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = 'testfile.txt' # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'Test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: None }) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = 'testfile.txt' # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'Test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: print('Deleted file') }) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/example/path/to/file.txt' # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: None, 'retrbinary': lambda self, cmd, callback: (callback(b'data'), print('File deletion and data handling executed')) }) # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    }
]",3,4387,0.0021935,1863,0.0027945,0.004988
"When trying to execute the code snippet with the provided imports and initialization, the lines with # uncovered are not executed.

# begin code snippet
try: # uncovered
    from ftplib import FTP
except ImportError: # uncovered
    pass # uncovered
ftp = FTP()
ftp.connect(host, port)
ftp.login(username, password)
if use_active_mode:
    ftp.set_pasv(False)
ftp_data = []
def buffer_data(data):
    ftp_data.append(data)
ftp.retrbinary(f'RETR {path}', buffer_data)
dirname, filename = split(path)
ftp.cwd(dirname)
ftp.delete(filename) # uncovered
aux = """".join(ftp_data) # uncovered
exit(aux) # uncovered

# end code snippet

Please, provide self-contained and concrete Python modified values of the imports and initialization to execute one of the uncovered paths in the code snippet.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/test/path/to/file.txt'"",
            ""MockFTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('# uncovered') })"",
            ""FTP = MockFTP"",
            ""exit = print""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = 'testfile.txt'"",
            ""MockFTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('# uncovered') })"",
            ""FTP = MockFTP"",
            ""exit = print""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = 'testfile.txt'"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'sample data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('raise ImportError'), 'quit': lambda self: None })"",
            ""exit = print""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/example/path/to/file.txt'"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('raise ImportError'), 'retrbinary': lambda self, cmd, callback: callback(b'dummy data') })"",
            ""exit = print""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/example/path/to/file.txt'"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'Dummy data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: print('Deleted file') })"",
            ""exit = print""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = 'testfile.txt'"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, value: None, 'retrbinary': lambda self, cmd, callback: callback(b'sample data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: None })"",
            ""exit = print""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'testuser'"",
            ""password = 'testpass'"",
            ""use_active_mode = False"",
            ""path = '/test/path/to/file.txt'"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'Test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('# uncovered') })"",
            ""exit = print""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/test/path/to/file.txt'"",
            ""split = lambda path: ('/test/path/to', 'file.txt')"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: print('Deleted file') })"",
            ""exit = print""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = 'testfile.txt'"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('# uncovered') })"",
            ""exit = print""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/example/path/to/file.txt'"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, use_active: None, 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('# uncovered'), 'retrbinary': lambda self, command, callback: callback(b'data') })"",
            ""exit = print""
        ]
    }
]","[
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/test/path/to/file.txt' # pragma: no cover"",
            ""MockFTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('# uncovered') }) # pragma: no cover"",
            ""FTP = MockFTP # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = 'testfile.txt' # pragma: no cover"",
            ""MockFTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('# uncovered') }) # pragma: no cover"",
            ""FTP = MockFTP # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = 'testfile.txt' # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'sample data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('raise ImportError'), 'quit': lambda self: None }) # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/example/path/to/file.txt' # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('raise ImportError'), 'retrbinary': lambda self, cmd, callback: callback(b'dummy data') }) # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/example/path/to/file.txt' # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'Dummy data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: print('Deleted file') }) # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = 'testfile.txt' # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, value: None, 'retrbinary': lambda self, cmd, callback: callback(b'sample data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: None }) # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'testuser' # pragma: no cover"",
            ""password = 'testpass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/test/path/to/file.txt' # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'Test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('# uncovered') }) # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/test/path/to/file.txt' # pragma: no cover"",
            ""split = lambda path: ('/test/path/to', 'file.txt') # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: print('Deleted file') }) # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = 'testfile.txt' # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('# uncovered') }) # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/example/path/to/file.txt' # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, use_active: None, 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('# uncovered'), 'retrbinary': lambda self, command, callback: callback(b'data') }) # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    }
]",3,6637,0.0033185,1847,0.0027705,0.006089
"When trying to execute the code snippet with the provided imports and initialization, the lines with # uncovered are not executed.

# begin code snippet
try: # uncovered
    from ftplib import FTP
except ImportError: # uncovered
    pass # uncovered
ftp = FTP()
ftp.connect(host, port)
ftp.login(username, password)
if use_active_mode:
    ftp.set_pasv(False)
ftp_data = []
def buffer_data(data):
    ftp_data.append(data)
ftp.retrbinary(f'RETR {path}', buffer_data)
dirname, filename = split(path)
ftp.cwd(dirname)
ftp.delete(filename) # uncovered
aux = """".join(ftp_data) # uncovered
exit(aux) # uncovered

# end code snippet

Please, provide self-contained and concrete Python modified values of the imports and initialization to execute one of the uncovered paths in the code snippet.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/test/path/to/file.txt'"",
            ""split = lambda path: ('/test/path/to', 'file.txt')"",
            ""FTP = type('MockFTP', (object,), {'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('# uncovered')})"",
            ""exit = print""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/test/path/to/file.txt'"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('# uncovered') })"",
            ""exit = print""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/test/path/to/file.txt'"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: print('Deleted file') })"",
            ""exit = print""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/test/path/to/file.txt'"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('# uncovered') })"",
            ""exit = print""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = 'testfile.txt'"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('# uncovered') })"",
            ""exit = print""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/test/path/to/file.txt'"",
            ""class MockFTP:"",
            ""    def connect(self, host, port):"",
            ""        pass"",
            ""    def login(self, username, password):"",
            ""        pass"",
            ""    def set_pasv(self, val):"",
            ""        pass"",
            ""    def retrbinary(self, cmd, callback):"",
            ""        callback(b'test data')"",
            ""    def cwd(self, dirname):"",
            ""        pass"",
            ""    def delete(self, filename):"",
            ""        print('Deleted file:', filename)"",
            ""        exec('# uncovered')"",
            ""FTP = MockFTP"",
            ""exit = print""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/path/to/file.txt'"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('print(\\'File deleted\\')') })"",
            ""exit = print""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/example/path/to/file.txt'"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'Sample data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('# uncovered') })"",
            ""exit = print""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = 'testfile.txt'"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec(' # uncovered') })"",
            ""exit = print""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/example/path/to/file.txt'"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'dummy data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: print('Deleted file') })"",
            ""exit = print""
        ]
    }
]","[
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/test/path/to/file.txt' # pragma: no cover"",
            ""split = lambda path: ('/test/path/to', 'file.txt') # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), {'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('# uncovered')}) # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/test/path/to/file.txt' # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('# uncovered') }) # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/test/path/to/file.txt' # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: print('Deleted file') }) # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/test/path/to/file.txt' # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('# uncovered') }) # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = 'testfile.txt' # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('# uncovered') }) # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/test/path/to/file.txt' # pragma: no cover"",
            ""class MockFTP: # pragma: no cover"",
            ""    def connect(self, host, port): # pragma: no cover"",
            ""        pass # pragma: no cover"",
            ""    def login(self, username, password): # pragma: no cover"",
            ""        pass # pragma: no cover"",
            ""    def set_pasv(self, val): # pragma: no cover"",
            ""        pass # pragma: no cover"",
            ""    def retrbinary(self, cmd, callback): # pragma: no cover"",
            ""        callback(b'test data') # pragma: no cover"",
            ""    def cwd(self, dirname): # pragma: no cover"",
            ""        pass # pragma: no cover"",
            ""    def delete(self, filename): # pragma: no cover"",
            ""        print('Deleted file:', filename) # pragma: no cover"",
            ""        exec('# uncovered') # pragma: no cover"",
            ""FTP = MockFTP # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/path/to/file.txt' # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('print(\\'File deleted\\')') }) # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/example/path/to/file.txt' # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'Sample data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('# uncovered') }) # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = 'testfile.txt' # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec(' # uncovered') }) # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/example/path/to/file.txt' # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'dummy data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: print('Deleted file') }) # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    }
]",3,8871,0.0044355,1872,0.002808,0.0072435
"When trying to execute the code snippet with the provided imports and initialization, the lines with # uncovered are not executed.

# begin code snippet
try: # uncovered
    from ftplib import FTP
except ImportError: # uncovered
    pass # uncovered
ftp = FTP()
ftp.connect(host, port)
ftp.login(username, password)
if use_active_mode:
    ftp.set_pasv(False)
ftp_data = []
def buffer_data(data):
    ftp_data.append(data)
ftp.retrbinary(f'RETR {path}', buffer_data)
dirname, filename = split(path)
ftp.cwd(dirname)
ftp.delete(filename) # uncovered
aux = """".join(ftp_data) # uncovered
exit(aux) # uncovered

# end code snippet

Please, provide self-contained and concrete Python modified values of the imports and initialization to execute one of the uncovered paths in the code snippet.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/test/path/to/file.txt'"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: print('Deleted file\\n# uncovered') })"",
            ""exit = print""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = 'testfile.txt'"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: lambda x: exec('print(x); # uncovered') })"",
            ""exit = print""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/example/path/to/file.txt'"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'dummy data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: print('Deleted file') })"",
            ""exit = print""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'password'"",
            ""use_active_mode = False"",
            ""path = '/example/path/to/file.txt'"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'dummy data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: print('Deleted file') })"",
            ""exit = print""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/example/path/to/file.txt'"",
            ""split = lambda path: ('/example/path/to', 'file.txt')"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'dummy data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: print('Deleted file: ' + filename) })"",
            ""exit = print""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/example/path/to/file.txt'"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'dummy data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('# uncovered') })"",
            ""exit = print""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = 'testfile.txt'"",
            ""split = lambda path: ('/tmp', 'testfile.txt')"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: print(f'Deleted file: {filename}') })"",
            ""exit = print""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = 'dir/testfile.txt'"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: print('File deleted') })"",
            ""exit = print""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/test/dummyfile.txt'"",
            ""split = lambda path: ('/test', 'dummyfile.txt')"",
            ""ftp_data = b'Dummy data'"",
            ""FTP = type('MockFTP', (object,), {"",
            ""'connect': lambda self, host, port: None,"",
            ""'login': lambda self, username, password: None,"",
            ""'set_pasv': lambda self, val: None,"",
            ""'retrbinary': lambda self, cmd, callback: callback(b'Dummy data'),"",
            ""'cwd': lambda self, dirname: None,"",
            ""'delete': lambda self, filename: exec('print(''File deleted'')')})"",
            ""exit = print""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/test/path/to/file.txt'"",
            ""split = lambda path: ('/test/path/to', 'file.txt')"",
            ""MockFTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'data content'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('# uncovered') })"",
            ""FTP = MockFTP"",
            ""exit = print""
        ]
    }
]","[
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/test/path/to/file.txt' # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: print('Deleted file\\n# uncovered') }) # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = 'testfile.txt' # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: lambda x: exec('print(x); # uncovered') }) # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/example/path/to/file.txt' # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'dummy data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: print('Deleted file') }) # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'password' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/example/path/to/file.txt' # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'dummy data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: print('Deleted file') }) # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/example/path/to/file.txt' # pragma: no cover"",
            ""split = lambda path: ('/example/path/to', 'file.txt') # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'dummy data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: print('Deleted file: ' + filename) }) # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/example/path/to/file.txt' # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'dummy data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('# uncovered') }) # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = 'testfile.txt' # pragma: no cover"",
            ""split = lambda path: ('/tmp', 'testfile.txt') # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: print(f'Deleted file: {filename}') }) # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = 'dir/testfile.txt' # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: print('File deleted') }) # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/test/dummyfile.txt' # pragma: no cover"",
            ""split = lambda path: ('/test', 'dummyfile.txt') # pragma: no cover"",
            ""ftp_data = b'Dummy data' # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { # pragma: no cover"",
            ""'connect': lambda self, host, port: None, # pragma: no cover"",
            ""'login': lambda self, username, password: None, # pragma: no cover"",
            ""'set_pasv': lambda self, val: None, # pragma: no cover"",
            ""'retrbinary': lambda self, cmd, callback: callback(b'Dummy data'), # pragma: no cover"",
            ""'cwd': lambda self, dirname: None, # pragma: no cover"",
            ""'delete': lambda self, filename: exec('print(''File deleted'')')}) # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/test/path/to/file.txt' # pragma: no cover"",
            ""split = lambda path: ('/test/path/to', 'file.txt') # pragma: no cover"",
            ""MockFTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'data content'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('# uncovered') }) # pragma: no cover"",
            ""FTP = MockFTP # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    }
]",3,11130,0.005565,1937,0.0029055,0.0084704999999999
"When trying to execute the code snippet with the provided imports and initialization, the lines with # uncovered are not executed.

# begin code snippet
try: # uncovered
    from ftplib import FTP
except ImportError: # uncovered
    pass # uncovered
ftp = FTP()
ftp.connect(host, port)
ftp.login(username, password)
if use_active_mode:
    ftp.set_pasv(False)
ftp_data = []
def buffer_data(data):
    ftp_data.append(data)
ftp.retrbinary(f'RETR {path}', buffer_data)
dirname, filename = split(path)
ftp.cwd(dirname)
ftp.delete(filename) # uncovered
aux = """".join(ftp_data) # uncovered
exit(aux) # uncovered

# end code snippet

Please, provide self-contained and concrete Python modified values of the imports and initialization to execute one of the uncovered paths in the code snippet.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/example/dummyfile.txt'"",
            ""split = lambda path: ('/example', 'dummyfile.txt')"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'dummy data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('# uncovered') })"",
            ""exit = print""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = 'test/file.txt'"",
            ""split = lambda path: ('test', 'file.txt')"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: print('Deleted file') })"",
            ""exit = lambda s: print(s)""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/test/path/file.txt'"",
            ""split = lambda path: ('/test/path', 'file.txt')"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('# uncovered') })"",
            ""exit = print""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/test/path/to/file.txt'"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'dummy data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: None })"",
            ""exit = print""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/example/path/to/file.txt'"",
            ""split = lambda path: ('/example/path/to', 'file.txt')"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'dummy data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('print(f\""Deleted file: {filename}; # uncovered\"")') })"",
            ""exit = print""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/test/path/to/file.txt'"",
            ""split = lambda path: ('/test/path/to', 'file.txt')"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'sample data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: print('Deleted file') })"",
            ""exit = print""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/example/path/to/file.txt'"",
            ""split = lambda path: ('/example/path/to', 'file.txt')"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'Sample data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: (exec('# uncovered'), None)[1] })"",
            ""exit = print""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/test/path/to/file.txt'"",
            ""split = lambda path: ('/test/path/to', 'file.txt')"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('# uncovered') })"",
            ""exit = print""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/test/path/to/file.txt'"",
            ""split = lambda path: ('/test/path/to', 'file.txt')"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: (print('Deleted file: ' + filename), exec('# uncovered'))[1] })"",
            ""exit = print""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = 'test/path/to/file.txt'"",
            ""split = lambda path: ('test/path/to', 'file.txt')"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'some data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: print(f'Deleted file: {filename}') })"",
            ""exit = print""
        ]
    }
]","[
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/example/dummyfile.txt' # pragma: no cover"",
            ""split = lambda path: ('/example', 'dummyfile.txt') # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'dummy data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('# uncovered') }) # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = 'test/file.txt' # pragma: no cover"",
            ""split = lambda path: ('test', 'file.txt') # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: print('Deleted file') }) # pragma: no cover"",
            ""exit = lambda s: print(s) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/test/path/file.txt' # pragma: no cover"",
            ""split = lambda path: ('/test/path', 'file.txt') # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('# uncovered') }) # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/test/path/to/file.txt' # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'dummy data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: None }) # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/example/path/to/file.txt' # pragma: no cover"",
            ""split = lambda path: ('/example/path/to', 'file.txt') # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'dummy data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('print(f\""Deleted file: {filename}; # uncovered\"")') }) # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/test/path/to/file.txt' # pragma: no cover"",
            ""split = lambda path: ('/test/path/to', 'file.txt') # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'sample data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: print('Deleted file') }) # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/example/path/to/file.txt' # pragma: no cover"",
            ""split = lambda path: ('/example/path/to', 'file.txt') # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'Sample data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: (exec('# uncovered'), None)[1] }) # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/test/path/to/file.txt' # pragma: no cover"",
            ""split = lambda path: ('/test/path/to', 'file.txt') # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('# uncovered') }) # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/test/path/to/file.txt' # pragma: no cover"",
            ""split = lambda path: ('/test/path/to', 'file.txt') # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: (print('Deleted file: ' + filename), exec('# uncovered'))[1] }) # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = 'test/path/to/file.txt' # pragma: no cover"",
            ""split = lambda path: ('test/path/to', 'file.txt') # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'some data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: print(f'Deleted file: {filename}') }) # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    }
]",3,11728,0.005864,1999,0.0029985,0.0088625
"When trying to execute the code snippet with the provided imports and initialization, the lines with # uncovered are not executed.

# begin code snippet
try: # uncovered
    from ftplib import FTP
except ImportError: # uncovered
    pass # uncovered
ftp = FTP()
ftp.connect(host, port)
ftp.login(username, password)
if use_active_mode:
    ftp.set_pasv(False)
ftp_data = []
def buffer_data(data):
    ftp_data.append(data)
ftp.retrbinary(f'RETR {path}', buffer_data)
dirname, filename = split(path)
ftp.cwd(dirname)
ftp.delete(filename) # uncovered
aux = """".join(ftp_data) # uncovered
exit(aux) # uncovered

# end code snippet

Please, provide self-contained and concrete Python modified values of the imports and initialization to execute one of the uncovered paths in the code snippet.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/test/path/to/file.txt'"",
            ""split = lambda path: ('/test/path/to', 'file.txt')"",
            ""ftp_data = b'test data'.split()"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('raise ImportError') })"",
            ""exit = print""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/test/path/to/file.txt'"",
            ""split = lambda path: ('/test/path/to', 'file.txt')"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('print(\""# uncovered\"")') })"",
            ""exit = print""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/example/path/to/file.txt'"",
            ""split = lambda path: ('/example/path/to', 'file.txt')"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('# uncovered') })"",
            ""exit = print""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/example/path/to/file.txt'"",
            ""split = lambda path: ('/example/path/to', 'file.txt')"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'dummy data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: (print(f'Deleted file: {filename}'), exec('# uncovered'))[1] })"",
            ""exit = print""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = 'folder/file.txt'"",
            ""split = lambda path: ('folder', 'file.txt')"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'some data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec(\""aux = ''.join(ftp_data)\"") })"",
            ""exit = print""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = 'testfile.txt'"",
            ""split = lambda path: ('/test', 'file.txt')"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'sample data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('# uncovered') })"",
            ""exit = print""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/dir/file.txt'"",
            ""split = lambda path: ('/dir', 'file.txt')"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'dummy data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('# uncovered') })"",
            ""exit = print""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = 'test/file.txt'"",
            ""split = lambda path: ('test', 'file.txt')"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('# uncovered') })"",
            ""exit = lambda s: print(s)""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/example/path/to/file.txt'"",
            ""split = lambda path: ('/example/path/to', 'file.txt')"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'sample data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('# uncovered') })"",
            ""exit = print""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = 'test/path/to/file.txt'"",
            ""split = lambda path: ('test/path/to', 'file.txt')"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'some data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('# uncovered') })"",
            ""exit = print""
        ]
    }
]","[
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/test/path/to/file.txt' # pragma: no cover"",
            ""split = lambda path: ('/test/path/to', 'file.txt') # pragma: no cover"",
            ""ftp_data = b'test data'.split() # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('raise ImportError') }) # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/test/path/to/file.txt' # pragma: no cover"",
            ""split = lambda path: ('/test/path/to', 'file.txt') # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('print(\""# uncovered\"")') }) # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/example/path/to/file.txt' # pragma: no cover"",
            ""split = lambda path: ('/example/path/to', 'file.txt') # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('# uncovered') }) # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/example/path/to/file.txt' # pragma: no cover"",
            ""split = lambda path: ('/example/path/to', 'file.txt') # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'dummy data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: (print(f'Deleted file: {filename}'), exec('# uncovered'))[1] }) # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = 'folder/file.txt' # pragma: no cover"",
            ""split = lambda path: ('folder', 'file.txt') # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'some data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec(\""aux = ''.join(ftp_data)\"") }) # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = 'testfile.txt' # pragma: no cover"",
            ""split = lambda path: ('/test', 'file.txt') # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'sample data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('# uncovered') }) # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/dir/file.txt' # pragma: no cover"",
            ""split = lambda path: ('/dir', 'file.txt') # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'dummy data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('# uncovered') }) # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = 'test/file.txt' # pragma: no cover"",
            ""split = lambda path: ('test', 'file.txt') # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('# uncovered') }) # pragma: no cover"",
            ""exit = lambda s: print(s) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/example/path/to/file.txt' # pragma: no cover"",
            ""split = lambda path: ('/example/path/to', 'file.txt') # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'sample data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('# uncovered') }) # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = 'test/path/to/file.txt' # pragma: no cover"",
            ""split = lambda path: ('test/path/to', 'file.txt') # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'some data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('# uncovered') }) # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    }
]",3,11863,0.0059315,2016,0.003024,0.0089555
"When trying to execute the code snippet with the provided imports and initialization, the lines with # uncovered are not executed.

# begin code snippet
try: # uncovered
    from ftplib import FTP
except ImportError: # uncovered
    pass # uncovered
ftp = FTP()
ftp.connect(host, port)
ftp.login(username, password)
if use_active_mode:
    ftp.set_pasv(False)
ftp_data = []
def buffer_data(data):
    ftp_data.append(data)
ftp.retrbinary(f'RETR {path}', buffer_data)
dirname, filename = split(path)
ftp.cwd(dirname)
ftp.delete(filename) # uncovered
aux = """".join(ftp_data) # uncovered
exit(aux) # uncovered

# end code snippet

Please, provide self-contained and concrete Python modified values of the imports and initialization to execute one of the uncovered paths in the code snippet.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/example/path/to/dummyfile.txt'"",
            ""split = lambda path: ('/example/path/to', 'dummyfile.txt')"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'dummy data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('# uncovered') })"",
            ""exit = print""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/test/file.txt'"",
            ""split = lambda path: ('/test', 'file.txt')"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: (print('Deleted file:', filename), exec('# uncovered'))[1] })"",
            ""exit = print""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/test/path/to/file.txt'"",
            ""split = lambda path: ('/test/path/to', 'file.txt')"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: print('Deleted file') })"",
            ""exit = print""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/test/path/to/file.txt'"",
            ""split = lambda path: ('/test/path/to', 'file.txt')"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: print(\""# uncovered\"") })"",
            ""exit = print""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = 'test/path/to/file.txt'"",
            ""split = lambda path: ('test/path/to', 'file.txt')"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: None })"",
            ""exit = lambda x: exec('# uncovered')""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/test/path/to/file.txt'"",
            ""split = lambda path: ('/test/path/to', 'file.txt')"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: (exec('# uncovered'), None)[1] })"",
            ""exit = print""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = 'test/file.txt'"",
            ""split = lambda path: ('test', 'file.txt')"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: (exec(\""aux = ''.join(ftp_data); print(aux); # uncovered\""), None)[1] })"",
            ""exit = print""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/example/path/to/file.txt'"",
            ""split = lambda path: ('/example/path/to', 'file.txt')"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'dummy data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: (exec('# uncovered'), None)[1] })"",
            ""exit = print""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/example/path/to/file.txt'"",
            ""split = lambda path: ('/example/path/to', 'file.txt')"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'dummy data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: print('# uncovered') })"",
            ""exit = print""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/test/path/to/file.txt'"",
            ""split = lambda path: ('/test/path/to', 'file.txt')"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('print(\""# uncovered\"")') })"",
            ""exit = print""
        ]
    }
]","[
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/example/path/to/dummyfile.txt' # pragma: no cover"",
            ""split = lambda path: ('/example/path/to', 'dummyfile.txt') # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'dummy data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('# uncovered') }) # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/test/file.txt' # pragma: no cover"",
            ""split = lambda path: ('/test', 'file.txt') # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: (print('Deleted file:', filename), exec('# uncovered'))[1] }) # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/test/path/to/file.txt' # pragma: no cover"",
            ""split = lambda path: ('/test/path/to', 'file.txt') # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: print('Deleted file') }) # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/test/path/to/file.txt' # pragma: no cover"",
            ""split = lambda path: ('/test/path/to', 'file.txt') # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: print(\""# uncovered\"") }) # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = 'test/path/to/file.txt' # pragma: no cover"",
            ""split = lambda path: ('test/path/to', 'file.txt') # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: None }) # pragma: no cover"",
            ""exit = lambda x: exec('# uncovered') # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/test/path/to/file.txt' # pragma: no cover"",
            ""split = lambda path: ('/test/path/to', 'file.txt') # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: (exec('# uncovered'), None)[1] }) # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = 'test/file.txt' # pragma: no cover"",
            ""split = lambda path: ('test', 'file.txt') # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: (exec(\""aux = ''.join(ftp_data); print(aux); # uncovered\""), None)[1] }) # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/example/path/to/file.txt' # pragma: no cover"",
            ""split = lambda path: ('/example/path/to', 'file.txt') # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'dummy data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: (exec('# uncovered'), None)[1] }) # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/example/path/to/file.txt' # pragma: no cover"",
            ""split = lambda path: ('/example/path/to', 'file.txt') # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'dummy data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: print('# uncovered') }) # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/test/path/to/file.txt' # pragma: no cover"",
            ""split = lambda path: ('/test/path/to', 'file.txt') # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('print(\""# uncovered\"")') }) # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    }
]",3,12016,0.006008,2031,0.0030465,0.0090545
"When trying to execute the code snippet with the provided imports and initialization, the lines with # uncovered are not executed.

# begin code snippet
try: # uncovered
    from ftplib import FTP
except ImportError: # uncovered
    pass # uncovered
ftp = FTP()
ftp.connect(host, port)
ftp.login(username, password)
if use_active_mode:
    ftp.set_pasv(False)
ftp_data = []
def buffer_data(data):
    ftp_data.append(data)
ftp.retrbinary(f'RETR {path}', buffer_data)
dirname, filename = split(path)
ftp.cwd(dirname)
ftp.delete(filename) # uncovered
aux = """".join(ftp_data) # uncovered
exit(aux) # uncovered

# end code snippet

Please, provide self-contained and concrete Python modified values of the imports and initialization to execute one of the uncovered paths in the code snippet.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/test/path/to/file.txt'"",
            ""split = lambda path: ('/test/path/to', 'file.txt')"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('print(\""# uncovered\"")') })"",
            ""exit = print""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/example/path/to/file.txt'"",
            ""split = lambda path: ('/example/path/to', 'file.txt')"",
            ""ftp_data = []"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'dummy data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('# uncovered') })"",
            ""exit = print""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/dummy/path/to/file.txt'"",
            ""split = lambda path: ('/dummy/path/to', 'file.txt')"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'sample data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('print(\""# uncovered\"")') })"",
            ""exit = print""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/example/path/to/file.txt'"",
            ""split = lambda path: ('/example/path/to', 'file.txt')"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'dummy data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: (print('# uncovered'), None)[1] })"",
            ""exit = print""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/test/path/to/file.txt'"",
            ""split = lambda path: ('/test/path/to', 'file.txt')"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('# uncovered') })"",
            ""exit = print""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/example/path/to/dummyfile.txt'"",
            ""split = lambda path: ('/example/path/to', 'dummyfile.txt')"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'dummy data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('print(f\""# uncovered\"")') })"",
            ""exit = print""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/example/path/to/file.txt'"",
            ""split = lambda path: ('/example/path/to', 'file.txt')"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('print(\""# uncovered\"")') })"",
            ""exit = print""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/example/path/to/file.txt'"",
            ""split = lambda path: ('/example/path/to', 'file.txt')"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'dummy data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('print(\""Deleted \"", filename, \""# uncovered\"")') })"",
            ""exit = print""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = '/test/path/to/file.txt'"",
            ""split = lambda path: ('/test/path/to', 'file.txt')"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('print(\""File deleted\"")') })"",
            ""exit = print""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP"",
            ""from os.path import split""
        ],
        ""initialization"": [
            ""host = 'localhost'"",
            ""port = 21"",
            ""username = 'user'"",
            ""password = 'pass'"",
            ""use_active_mode = False"",
            ""path = 'dir/file.txt'"",
            ""split = lambda path: ('dir', 'file.txt')"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('# uncovered') })"",
            ""exit = print""
        ]
    }
]","[
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/test/path/to/file.txt' # pragma: no cover"",
            ""split = lambda path: ('/test/path/to', 'file.txt') # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('print(\""# uncovered\"")') }) # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/example/path/to/file.txt' # pragma: no cover"",
            ""split = lambda path: ('/example/path/to', 'file.txt') # pragma: no cover"",
            ""ftp_data = [] # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'dummy data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('# uncovered') }) # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/dummy/path/to/file.txt' # pragma: no cover"",
            ""split = lambda path: ('/dummy/path/to', 'file.txt') # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'sample data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('print(\""# uncovered\"")') }) # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/example/path/to/file.txt' # pragma: no cover"",
            ""split = lambda path: ('/example/path/to', 'file.txt') # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'dummy data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: (print('# uncovered'), None)[1] }) # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/test/path/to/file.txt' # pragma: no cover"",
            ""split = lambda path: ('/test/path/to', 'file.txt') # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('# uncovered') }) # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/example/path/to/dummyfile.txt' # pragma: no cover"",
            ""split = lambda path: ('/example/path/to', 'dummyfile.txt') # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'dummy data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('print(f\""# uncovered\"")') }) # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/example/path/to/file.txt' # pragma: no cover"",
            ""split = lambda path: ('/example/path/to', 'file.txt') # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('print(\""# uncovered\"")') }) # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/example/path/to/file.txt' # pragma: no cover"",
            ""split = lambda path: ('/example/path/to', 'file.txt') # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'dummy data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('print(\""Deleted \"", filename, \""# uncovered\"")') }) # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = '/test/path/to/file.txt' # pragma: no cover"",
            ""split = lambda path: ('/test/path/to', 'file.txt') # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('print(\""File deleted\"")') }) # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from ftplib import FTP # pragma: no cover"",
            ""from os.path import split # pragma: no cover""
        ],
        ""initialization"": [
            ""host = 'localhost' # pragma: no cover"",
            ""port = 21 # pragma: no cover"",
            ""username = 'user' # pragma: no cover"",
            ""password = 'pass' # pragma: no cover"",
            ""use_active_mode = False # pragma: no cover"",
            ""path = 'dir/file.txt' # pragma: no cover"",
            ""split = lambda path: ('dir', 'file.txt') # pragma: no cover"",
            ""FTP = type('MockFTP', (object,), { 'connect': lambda self, host, port: None, 'login': lambda self, username, password: None, 'set_pasv': lambda self, val: None, 'retrbinary': lambda self, cmd, callback: callback(b'test data'), 'cwd': lambda self, dirname: None, 'delete': lambda self, filename: exec('# uncovered') }) # pragma: no cover"",
            ""exit = print # pragma: no cover""
        ]
    }
]",3,12200,0.0061,2031,0.0030465,0.0091465
