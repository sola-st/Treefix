prompt,raw_predictions,predictions,prompt_type,input_size,input_price,output_size,output_price,total_price
"Provide self-contained and concrete Python values to initialize the undefined variables in the code snippet.

# begin code snippet
""""""Send a file from within a directory using :func:`send_file`.

    .. code-block:: python

        @app.route(""/uploads/<path:name>"")
        def download_file(name):
            return send_from_directory(
                app.config['UPLOAD_FOLDER'], name, as_attachment=True
            )

    This is a secure way to serve files from a folder, such as static
    files or uploads. Uses :func:`~werkzeug.security.safe_join` to
    ensure the path coming from the client is not maliciously crafted to
    point outside the specified directory.

    If the final path does not point to an existing regular file,
    raises a 404 :exc:`~werkzeug.exceptions.NotFound` error.

    :param directory: The directory that ``path`` must be located under,
        relative to the current application's root path.
    :param path: The path to the file to send, relative to
        ``directory``.
    :param kwargs: Arguments to pass to :func:`send_file`.

    .. versionchanged:: 2.0
        ``path`` replaces the ``filename`` parameter.

    .. versionadded:: 2.0
        Moved the implementation to Werkzeug. This is now a wrapper to
        pass some Flask-specific arguments.

    .. versionadded:: 0.5
    """"""
exit(werkzeug.utils.send_from_directory(  # type: ignore[return-value]
    directory, path, **_prepare_send_file_kwargs(**kwargs)
))

# end code snippet

# begin undefined variables
werkzeug
directory
path
_prepare_send_file_kwargs
kwargs
# end undefined variables

# begin undefined attributes and methods
werkzeug.utils
# end undefined attributes and methods

Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""import werkzeug"",
            ""from werkzeug.utils import send_from_directory""
        ],
        ""initialization"": [
            ""directory = '/path/to/uploads'"",
            ""path = 'example.txt'"",
            ""def _prepare_send_file_kwargs(**kwargs): return kwargs"",
            ""kwargs = {}"",
            ""werkzeug.utils = type('Mock', (object,), {'send_from_directory': send_from_directory})""
        ]
    },
    {
        ""imports"": [
            ""from flask import Flask"",
            ""from werkzeug.utils import send_from_directory"",
            ""import werkzeug"",
            ""import os""
        ],
        ""initialization"": [
            ""app = Flask(__name__)"",
            ""directory = os.path.join(os.getcwd(), 'uploads')"",
            ""path = 'example.txt'"",
            ""def _prepare_send_file_kwargs(**kwargs): return kwargs"",
            ""kwargs = {}"",
            ""werkzeug.utils = type('Mock', (object,), {'send_from_directory': send_from_directory})""
        ]
    },
    {
        ""imports"": [
            ""import werkzeug"",
            ""from werkzeug.utils import send_from_directory"",
            ""import os""
        ],
        ""initialization"": [
            ""directory = os.path.join(os.getcwd(), 'uploads')"",
            ""path = 'example_file.txt'"",
            ""_prepare_send_file_kwargs = lambda **kwargs: kwargs"",
            ""kwargs = {}"",
            ""werkzeug.utils = type('Mock', (object,), {'send_from_directory': send_from_directory})""
        ]
    },
    {
        ""imports"": [
            ""from werkzeug.utils import send_from_directory"",
            ""import werkzeug"",
            ""import tempfile"",
            ""import os""
        ],
        ""initialization"": [
            ""directory = tempfile.mkdtemp()"",
            ""path = 'example.txt'"",
            ""kwargs = {}"",
            ""_prepare_send_file_kwargs = lambda **kwargs: kwargs"",
            ""werkzeug.utils = type('Mock', (object,), {'send_from_directory': send_from_directory})""
        ]
    },
    {
        ""imports"": [
            ""import werkzeug"",
            ""from werkzeug.utils import send_from_directory""
        ],
        ""initialization"": [
            ""werkzeug = type(\""Mock\"", (object,), {\""utils\"": type(\""Mock\"", (object,), {\""send_from_directory\"": send_from_directory})})()"",
            ""directory = '/path/to/uploads'"",
            ""path = 'example.txt'"",
            ""_prepare_send_file_kwargs = lambda **kwargs: kwargs"",
            ""kwargs = {}""
        ]
    },
    {
        ""imports"": [
            ""from flask import Flask"",
            ""from werkzeug.utils import send_from_directory"",
            ""import werkzeug.exceptions""
        ],
        ""initialization"": [
            ""app = Flask(__name__)"",
            ""directory = 'uploads'"",
            ""path = 'example.txt'"",
            ""def _prepare_send_file_kwargs(**kwargs):\n    return kwargs"",
            ""kwargs = {}""
        ]
    },
    {
        ""imports"": [
            ""import werkzeug"",
            ""from werkzeug.utils import send_from_directory""
        ],
        ""initialization"": [
            ""directory = '/path/to/uploads'"",
            ""path = 'example.txt'"",
            ""_prepare_send_file_kwargs = lambda **kwargs: kwargs"",
            ""kwargs = {}""
        ]
    },
    {
        ""imports"": [
            ""import werkzeug"",
            ""from werkzeug.utils import send_from_directory""
        ],
        ""initialization"": [
            ""directory = '/path/to/uploads'"",
            ""path = 'example.txt'"",
            ""_prepare_send_file_kwargs = lambda **kwargs: kwargs"",
            ""kwargs = {}""
        ]
    },
    {
        ""imports"": [
            ""from flask import Flask"",
            ""import werkzeug"",
            ""from werkzeug.utils import send_from_directory""
        ],
        ""initialization"": [
            ""app = Flask(__name__)"",
            ""directory = \""/path/to/uploads\"""",
            ""path = \""example.txt\"""",
            ""def _prepare_send_file_kwargs(**kwargs): return {}"",
            ""kwargs = {}""
        ]
    },
    {
        ""imports"": [
            ""import werkzeug"",
            ""from werkzeug.utils import send_from_directory""
        ],
        ""initialization"": [
            ""directory = '/path/to/upload_folder'"",
            ""path = 'example.txt'"",
            ""kwargs = {}"",
            ""_prepare_send_file_kwargs = lambda **kwargs: kwargs"",
            ""werkzeug.utils = type('Mock', (object,), {'send_from_directory': send_from_directory})""
        ]
    }
]","[
    {
        ""imports"": [
            ""import werkzeug # pragma: no cover"",
            ""from werkzeug.utils import send_from_directory # pragma: no cover""
        ],
        ""initialization"": [
            ""directory = '/path/to/uploads' # pragma: no cover"",
            ""path = 'example.txt' # pragma: no cover"",
            ""def _prepare_send_file_kwargs(**kwargs): return kwargs # pragma: no cover"",
            ""kwargs = {} # pragma: no cover"",
            ""werkzeug.utils = type('Mock', (object,), {'send_from_directory': send_from_directory}) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from flask import Flask # pragma: no cover"",
            ""from werkzeug.utils import send_from_directory # pragma: no cover"",
            ""import werkzeug # pragma: no cover"",
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""app = Flask(__name__) # pragma: no cover"",
            ""directory = os.path.join(os.getcwd(), 'uploads') # pragma: no cover"",
            ""path = 'example.txt' # pragma: no cover"",
            ""def _prepare_send_file_kwargs(**kwargs): return kwargs # pragma: no cover"",
            ""kwargs = {} # pragma: no cover"",
            ""werkzeug.utils = type('Mock', (object,), {'send_from_directory': send_from_directory}) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import werkzeug # pragma: no cover"",
            ""from werkzeug.utils import send_from_directory # pragma: no cover"",
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""directory = os.path.join(os.getcwd(), 'uploads') # pragma: no cover"",
            ""path = 'example_file.txt' # pragma: no cover"",
            ""_prepare_send_file_kwargs = lambda **kwargs: kwargs # pragma: no cover"",
            ""kwargs = {} # pragma: no cover"",
            ""werkzeug.utils = type('Mock', (object,), {'send_from_directory': send_from_directory}) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from werkzeug.utils import send_from_directory # pragma: no cover"",
            ""import werkzeug # pragma: no cover"",
            ""import tempfile # pragma: no cover"",
            ""import os # pragma: no cover""
        ],
        ""initialization"": [
            ""directory = tempfile.mkdtemp() # pragma: no cover"",
            ""path = 'example.txt' # pragma: no cover"",
            ""kwargs = {} # pragma: no cover"",
            ""_prepare_send_file_kwargs = lambda **kwargs: kwargs # pragma: no cover"",
            ""werkzeug.utils = type('Mock', (object,), {'send_from_directory': send_from_directory}) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import werkzeug # pragma: no cover"",
            ""from werkzeug.utils import send_from_directory # pragma: no cover""
        ],
        ""initialization"": [
            ""werkzeug = type(\""Mock\"", (object,), {\""utils\"": type(\""Mock\"", (object,), {\""send_from_directory\"": send_from_directory})})() # pragma: no cover"",
            ""directory = '/path/to/uploads' # pragma: no cover"",
            ""path = 'example.txt' # pragma: no cover"",
            ""_prepare_send_file_kwargs = lambda **kwargs: kwargs # pragma: no cover"",
            ""kwargs = {} # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from flask import Flask # pragma: no cover"",
            ""from werkzeug.utils import send_from_directory # pragma: no cover"",
            ""import werkzeug.exceptions # pragma: no cover""
        ],
        ""initialization"": [
            ""app = Flask(__name__) # pragma: no cover"",
            ""directory = 'uploads' # pragma: no cover"",
            ""path = 'example.txt' # pragma: no cover"",
            ""def _prepare_send_file_kwargs(**kwargs):# pragma: no cover"",
            ""    return kwargs # pragma: no cover"",
            ""kwargs = {} # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import werkzeug # pragma: no cover"",
            ""from werkzeug.utils import send_from_directory # pragma: no cover""
        ],
        ""initialization"": [
            ""directory = '/path/to/uploads' # pragma: no cover"",
            ""path = 'example.txt' # pragma: no cover"",
            ""_prepare_send_file_kwargs = lambda **kwargs: kwargs # pragma: no cover"",
            ""kwargs = {} # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import werkzeug # pragma: no cover"",
            ""from werkzeug.utils import send_from_directory # pragma: no cover""
        ],
        ""initialization"": [
            ""directory = '/path/to/uploads' # pragma: no cover"",
            ""path = 'example.txt' # pragma: no cover"",
            ""_prepare_send_file_kwargs = lambda **kwargs: kwargs # pragma: no cover"",
            ""kwargs = {} # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from flask import Flask # pragma: no cover"",
            ""import werkzeug # pragma: no cover"",
            ""from werkzeug.utils import send_from_directory # pragma: no cover""
        ],
        ""initialization"": [
            ""app = Flask(__name__) # pragma: no cover"",
            ""directory = \""/path/to/uploads\"" # pragma: no cover"",
            ""path = \""example.txt\"" # pragma: no cover"",
            ""def _prepare_send_file_kwargs(**kwargs): return {} # pragma: no cover"",
            ""kwargs = {} # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import werkzeug # pragma: no cover"",
            ""from werkzeug.utils import send_from_directory # pragma: no cover""
        ],
        ""initialization"": [
            ""directory = '/path/to/upload_folder' # pragma: no cover"",
            ""path = 'example.txt' # pragma: no cover"",
            ""kwargs = {} # pragma: no cover"",
            ""_prepare_send_file_kwargs = lambda **kwargs: kwargs # pragma: no cover"",
            ""werkzeug.utils = type('Mock', (object,), {'send_from_directory': send_from_directory}) # pragma: no cover""
        ]
    }
]",1,609,0.0003045,991,0.0014865,0.001791
"When trying to execute the code snippet with the provided imports and initialization, the following error happens:
# begin error message
Execution error at line 44:
    exit(werkzeug.utils.send_from_directory(  # type: ignore[return-value]
TypeError: send_from_directory() missing 1 required positional argument: 'environ'
# end error message

Please, provide self-contained and concrete Python fixed values of the imports and initialization to solve the error and make the code snippet executable.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""import werkzeug"",
            ""from werkzeug.utils import send_from_directory"",
            ""from flask import Flask""
        ],
        ""initialization"": [
            ""app = Flask(__name__)"",
            ""app.config['UPLOAD_FOLDER'] = '/path/to/uploads'"",
            ""directory = app.config['UPLOAD_FOLDER']"",
            ""path = 'example.txt'"",
            ""def _prepare_send_file_kwargs(**kwargs): return kwargs"",
            ""kwargs = {}"",
            ""werkzeug.utils = type('Mock', (object,), {'send_from_directory': lambda *args, **kwargs: exit()})""
        ]
    },
    {
        ""imports"": [
            ""import werkzeug"",
            ""from werkzeug.utils import send_from_directory"",
            ""from flask import Flask, send_file""
        ],
        ""initialization"": [
            ""app = Flask(__name__)"",
            ""directory = '/path/to/uploads'"",
            ""path = 'example.txt'"",
            ""def _prepare_send_file_kwargs(**kwargs): return kwargs"",
            ""kwargs = {}"",
            ""werkzeug.utils = type('Mock', (object,), {'send_from_directory': lambda directory, path, **kwargs: send_file(f'{directory}/{path}', as_attachment=True)})""
        ]
    },
    {
        ""imports"": [
            ""import werkzeug"",
            ""from werkzeug.exceptions import NotFound"",
            ""from flask import Flask, send_file, request""
        ],
        ""initialization"": [
            ""app = Flask(__name__)"",
            ""directory = '/path/to/uploads'"",
            ""path = 'example.txt'"",
            ""def _prepare_send_file_kwargs(**kwargs): return kwargs"",
            ""kwargs = {}"",
            ""werkzeug.utils = type('Mock', (object,), {'send_from_directory': lambda directory, path, **kwargs: send_file(f'{directory}/{path}', as_attachment=kwargs.get('as_attachment', False))})""
        ]
    },
    {
        ""imports"": [
            ""import werkzeug"",
            ""from werkzeug.utils import send_from_directory"",
            ""from flask import Flask, send_file""
        ],
        ""initialization"": [
            ""app = Flask(__name__)"",
            ""directory = '/path/to/uploads'"",
            ""path = 'example.txt'"",
            ""def _prepare_send_file_kwargs(**kwargs): return kwargs"",
            ""kwargs = {}"",
            ""werkzeug.utils = type('Mock', (object,), {'send_from_directory': send_from_directory})"",
            ""def mock_send_from_directory(directory, path, **kwargs): return send_file(f'{directory}/{path}', **kwargs)"",
            ""werkzeug.utils.send_from_directory = mock_send_from_directory""
        ]
    },
    {
        ""imports"": [
            ""import werkzeug"",
            ""from werkzeug.utils import send_from_directory"",
            ""from flask import Flask""
        ],
        ""initialization"": [
            ""app = Flask(__name__)"",
            ""directory = '/path/to/uploads'"",
            ""path = 'example.txt'"",
            ""def _prepare_send_file_kwargs(**kwargs): return kwargs"",
            ""kwargs = {}"",
            ""werkzeug.utils = type('Mock', (object,), {'send_from_directory': lambda directory, path, **kwargs: 'Sending file from ' + directory + ' named ' + path})""
        ]
    },
    {
        ""imports"": [
            ""import werkzeug"",
            ""from werkzeug.utils import send_from_directory""
        ],
        ""initialization"": [
            ""directory = '/path/to/uploads'"",
            ""path = 'example.txt'"",
            ""def _prepare_send_file_kwargs(**kwargs): return kwargs"",
            ""kwargs = {}"",
            ""class MockSendFromDirectory:"",
            ""def __init__(self, directory, filename, environ=None, **options):"",
            ""self.directory = directory"",
            ""self.filename = filename"",
            ""self.environ = environ"",
            ""self.options = options"",
            ""def __call__(self, environ, start_response):"",
            ""return send_from_directory(self.directory, self.filename, **self.options)(environ, start_response)"",
            ""werkzeug.utils.send_from_directory = MockSendFromDirectory""
        ]
    },
    {
        ""imports"": [
            ""import werkzeug"",
            ""from flask import Flask, send_file"",
            ""from werkzeug.utils import send_from_directory"",
            ""from werkzeug.exceptions import NotFound""
        ],
        ""initialization"": [
            ""app = Flask(__name__)"",
            ""app.config['UPLOAD_FOLDER'] = '/path/to/uploads'"",
            ""directory = app.config['UPLOAD_FOLDER']"",
            ""path = 'example.txt'"",
            ""def _prepare_send_file_kwargs(**kwargs): return kwargs"",
            ""kwargs = {}"",
            ""def mock_send_from_directory(directory, filename, **options): \n    import os\n    full_path = os.path.join(directory, filename)\n    if os.path.isfile(full_path):\n        return send_file(full_path, **options)\n    else:\n        raise NotFound()"",
            ""werkzeug.utils = type('Mock', (object,), {'send_from_directory': mock_send_from_directory})""
        ]
    },
    {
        ""imports"": [
            ""import werkzeug"",
            ""from werkzeug.exceptions import NotFound"",
            ""from werkzeug.utils import safe_join"",
            ""from flask import Flask, send_file, abort""
        ],
        ""initialization"": [
            ""app = Flask(__name__)"",
            ""app.config['UPLOAD_FOLDER'] = '/path/to/uploads'"",
            ""directory = app.config['UPLOAD_FOLDER']"",
            ""path = 'example.txt'"",
            ""def _prepare_send_file_kwargs(**kwargs): return kwargs"",
            ""kwargs = {}"",
            ""def mock_send_from_directory(directory, path, **kwargs):"",
            ""    try:"",
            ""        full_path = safe_join(directory, path)"",
            ""        if not os.path.isfile(full_path):"",
            ""            raise NotFound()"",
            ""        return send_file(full_path, **kwargs)"",
            ""    except NotFound:"",
            ""        abort(404)"",
            ""werkzeug.utils = type('Mock', (object,), {'send_from_directory': mock_send_from_directory})""
        ]
    },
    {
        ""imports"": [
            ""import os"",
            ""import werkzeug"",
            ""from flask import Flask, send_file, send_from_directory"",
            ""from werkzeug.exceptions import NotFound""
        ],
        ""initialization"": [
            ""app = Flask(__name__)"",
            ""directory = '/path/to/uploads'"",
            ""path = 'example.txt'"",
            ""def _prepare_send_file_kwargs(**kwargs): return kwargs"",
            ""kwargs = {}"",
            ""if not os.path.isfile(os.path.join(directory, path)):"",
            ""    raise NotFound(f'The file {path} does not exist.')"",
            ""werkzeug.utils = type('Mock', (object,), {'send_from_directory': send_from_directory})""
        ]
    },
    {
        ""imports"": [
            ""import werkzeug"",
            ""from werkzeug.utils import send_from_directory"",
            ""from flask import Flask""
        ],
        ""initialization"": [
            ""app = Flask(__name__)"",
            ""app.config['UPLOAD_FOLDER'] = '/path/to/uploads'"",
            ""directory = app.config['UPLOAD_FOLDER']"",
            ""path = 'example.txt'"",
            ""def _prepare_send_file_kwargs(**kwargs): return kwargs"",
            ""kwargs = {}"",
            ""werkzeug.utils = type('Mock', (object,), {'send_from_directory': lambda directory, path, **kwargs: 'File sent: ' + directory + '/' + path})""
        ]
    }
]","[
    {
        ""imports"": [
            ""import werkzeug # pragma: no cover"",
            ""from werkzeug.utils import send_from_directory # pragma: no cover"",
            ""from flask import Flask # pragma: no cover""
        ],
        ""initialization"": [
            ""app = Flask(__name__) # pragma: no cover"",
            ""app.config['UPLOAD_FOLDER'] = '/path/to/uploads' # pragma: no cover"",
            ""directory = app.config['UPLOAD_FOLDER'] # pragma: no cover"",
            ""path = 'example.txt' # pragma: no cover"",
            ""def _prepare_send_file_kwargs(**kwargs): return kwargs # pragma: no cover"",
            ""kwargs = {} # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import werkzeug # pragma: no cover"",
            ""from werkzeug.utils import send_from_directory # pragma: no cover"",
            ""from flask import Flask, send_file # pragma: no cover""
        ],
        ""initialization"": [
            ""app = Flask(__name__) # pragma: no cover"",
            ""directory = '/path/to/uploads' # pragma: no cover"",
            ""path = 'example.txt' # pragma: no cover"",
            ""def _prepare_send_file_kwargs(**kwargs): return kwargs # pragma: no cover"",
            ""kwargs = {} # pragma: no cover"",
            ""werkzeug.utils = type('Mock', (object,), {'send_from_directory': lambda directory, path, **kwargs: send_file(f'{directory}/{path}', as_attachment=True)}) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import werkzeug # pragma: no cover"",
            ""from werkzeug.exceptions import NotFound # pragma: no cover"",
            ""from flask import Flask, send_file, request # pragma: no cover""
        ],
        ""initialization"": [
            ""app = Flask(__name__) # pragma: no cover"",
            ""directory = '/path/to/uploads' # pragma: no cover"",
            ""path = 'example.txt' # pragma: no cover"",
            ""def _prepare_send_file_kwargs(**kwargs): return kwargs # pragma: no cover"",
            ""kwargs = {} # pragma: no cover"",
            ""werkzeug.utils = type('Mock', (object,), {'send_from_directory': lambda directory, path, **kwargs: send_file(f'{directory}/{path}', as_attachment=kwargs.get('as_attachment', False))}) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import werkzeug # pragma: no cover"",
            ""from werkzeug.utils import send_from_directory # pragma: no cover"",
            ""from flask import Flask, send_file # pragma: no cover""
        ],
        ""initialization"": [
            ""app = Flask(__name__) # pragma: no cover"",
            ""directory = '/path/to/uploads' # pragma: no cover"",
            ""path = 'example.txt' # pragma: no cover"",
            ""def _prepare_send_file_kwargs(**kwargs): return kwargs # pragma: no cover"",
            ""kwargs = {} # pragma: no cover"",
            ""werkzeug.utils = type('Mock', (object,), {'send_from_directory': send_from_directory}) # pragma: no cover"",
            ""def mock_send_from_directory(directory, path, **kwargs): return send_file(f'{directory}/{path}', **kwargs) # pragma: no cover"",
            ""werkzeug.utils.send_from_directory = mock_send_from_directory # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import werkzeug # pragma: no cover"",
            ""from werkzeug.utils import send_from_directory # pragma: no cover"",
            ""from flask import Flask # pragma: no cover""
        ],
        ""initialization"": [
            ""app = Flask(__name__) # pragma: no cover"",
            ""directory = '/path/to/uploads' # pragma: no cover"",
            ""path = 'example.txt' # pragma: no cover"",
            ""def _prepare_send_file_kwargs(**kwargs): return kwargs # pragma: no cover"",
            ""kwargs = {} # pragma: no cover"",
            ""werkzeug.utils = type('Mock', (object,), {'send_from_directory': lambda directory, path, **kwargs: 'Sending file from ' + directory + ' named ' + path}) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import werkzeug # pragma: no cover"",
            ""from werkzeug.utils import send_from_directory # pragma: no cover""
        ],
        ""initialization"": [
            ""directory = '/path/to/uploads' # pragma: no cover"",
            ""path = 'example.txt' # pragma: no cover"",
            ""def _prepare_send_file_kwargs(**kwargs): return kwargs # pragma: no cover"",
            ""kwargs = {} # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import werkzeug # pragma: no cover"",
            ""from flask import Flask, send_file # pragma: no cover"",
            ""from werkzeug.utils import send_from_directory # pragma: no cover"",
            ""from werkzeug.exceptions import NotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""app = Flask(__name__) # pragma: no cover"",
            ""app.config['UPLOAD_FOLDER'] = '/path/to/uploads' # pragma: no cover"",
            ""directory = app.config['UPLOAD_FOLDER'] # pragma: no cover"",
            ""path = 'example.txt' # pragma: no cover"",
            ""def _prepare_send_file_kwargs(**kwargs): return kwargs # pragma: no cover"",
            ""kwargs = {} # pragma: no cover"",
            ""def mock_send_from_directory(directory, filename, **options): # pragma: no cover"",
            ""    full_path = os.path.join(directory, filename)# pragma: no cover"",
            ""    if os.path.isfile(full_path):# pragma: no cover"",
            ""        return send_file(full_path, **options)# pragma: no cover"",
            ""    else:# pragma: no cover"",
            ""        raise NotFound() # pragma: no cover"",
            ""werkzeug.utils = type('Mock', (object,), {'send_from_directory': mock_send_from_directory}) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import werkzeug # pragma: no cover"",
            ""from werkzeug.exceptions import NotFound # pragma: no cover"",
            ""from werkzeug.utils import safe_join # pragma: no cover"",
            ""from flask import Flask, send_file, abort # pragma: no cover""
        ],
        ""initialization"": [
            ""app = Flask(__name__) # pragma: no cover"",
            ""app.config['UPLOAD_FOLDER'] = '/path/to/uploads' # pragma: no cover"",
            ""directory = app.config['UPLOAD_FOLDER'] # pragma: no cover"",
            ""path = 'example.txt' # pragma: no cover"",
            ""def _prepare_send_file_kwargs(**kwargs): return kwargs # pragma: no cover"",
            ""kwargs = {} # pragma: no cover"",
            ""def mock_send_from_directory(directory, path, **kwargs): # pragma: no cover"",
            ""    try: # pragma: no cover"",
            ""        full_path = safe_join(directory, path) # pragma: no cover"",
            ""        if not os.path.isfile(full_path): # pragma: no cover"",
            ""            raise NotFound() # pragma: no cover"",
            ""        return send_file(full_path, **kwargs) # pragma: no cover"",
            ""    except NotFound: # pragma: no cover"",
            ""        abort(404) # pragma: no cover"",
            ""werkzeug.utils = type('Mock', (object,), {'send_from_directory': mock_send_from_directory}) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover"",
            ""import werkzeug # pragma: no cover"",
            ""from flask import Flask, send_file, send_from_directory # pragma: no cover"",
            ""from werkzeug.exceptions import NotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""app = Flask(__name__) # pragma: no cover"",
            ""directory = '/path/to/uploads' # pragma: no cover"",
            ""path = 'example.txt' # pragma: no cover"",
            ""def _prepare_send_file_kwargs(**kwargs): return kwargs # pragma: no cover"",
            ""kwargs = {} # pragma: no cover"",
            ""if not os.path.isfile(os.path.join(directory, path)): # pragma: no cover"",
            ""    pass"",
            ""werkzeug.utils = type('Mock', (object,), {'send_from_directory': send_from_directory}) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import werkzeug # pragma: no cover"",
            ""from werkzeug.utils import send_from_directory # pragma: no cover"",
            ""from flask import Flask # pragma: no cover""
        ],
        ""initialization"": [
            ""app = Flask(__name__) # pragma: no cover"",
            ""app.config['UPLOAD_FOLDER'] = '/path/to/uploads' # pragma: no cover"",
            ""directory = app.config['UPLOAD_FOLDER'] # pragma: no cover"",
            ""path = 'example.txt' # pragma: no cover"",
            ""def _prepare_send_file_kwargs(**kwargs): return kwargs # pragma: no cover"",
            ""kwargs = {} # pragma: no cover"",
            ""werkzeug.utils = type('Mock', (object,), {'send_from_directory': lambda directory, path, **kwargs: 'File sent: ' + directory + '/' + path}) # pragma: no cover""
        ]
    }
]",2,1018,0.000509,1625,0.0024375,0.0029465
