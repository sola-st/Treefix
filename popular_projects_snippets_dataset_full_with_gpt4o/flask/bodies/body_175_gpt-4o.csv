prompt,raw_predictions,predictions,prompt_type,input_size,input_price,output_size,output_price,total_price
"Provide self-contained and concrete Python values to initialize the undefined variables in the code snippet.

# begin code snippet
for _srcobj, loader in self._iter_loaders(template):
    try:
        exit(loader.get_source(environment, template))
    except TemplateNotFound:
        continue
raise TemplateNotFound(template)

# end code snippet

# begin undefined variables
self
template
environment
TemplateNotFound
# end undefined variables

# begin undefined attributes and methods
self._iter_loaders
# end undefined attributes and methods

Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound""
        ],
        ""initialization"": [
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: iter([(None, type('MockLoader', (object,), {'get_source': lambda self, environment, template: 'mock_source'})())])})()"",
            ""template = 'mock_template'"",
            ""environment = 'mock_environment'""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound""
        ],
        ""initialization"": [
            ""self = type('MockSelf', (object,), {'_iter_loaders': lambda self, template: iter([(None, type('MockLoader', (object,), {'get_source': lambda self, env, tmpl: 'source_code'})())])})()"",
            ""template = 'example_template'"",
            ""environment = 'example_environment'"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: [(None, type('MockLoader', (object,), {'get_source': lambda self, environment, template: 'Template Source'})())]})()"",
            ""template = 'example_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: [(None, loader) for loader in [LoaderMock()]]})()"",
            ""template = 'example_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound"",
            ""class LoaderMock:\n    def get_source(self, environment, template):\n        return 'example_source_code'""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound"",
            ""from typing import List, Tuple""
        ],
        ""initialization"": [
            ""class MockLoader:\n    def get_source(self, environment: Environment, template: str) -> str:\n        if template == 'valid_template':\n            return 'template source'\n        else:\n            raise TemplateNotFound(template)"",
            ""def mock_iter_loaders(template: str) -> List[Tuple[str, MockLoader]]:\n    return [('srcobj1', MockLoader()), ('srcobj2', MockLoader())]"",
            ""self = type('Mock', (object,), {'_iter_loaders': mock_iter_loaders})()"",
            ""template = 'invalid_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, tmpl: [(None, loader) for loader in [type('Loader', (object,), {'get_source': lambda self, env, tmpl: 'source'})()] ] })()"",
            ""template = 'example_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import BaseLoader, Environment, TemplateNotFound, Template""
        ],
        ""initialization"": [
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: iter([(None, BaseLoader())])})()"",
            ""template = 'example_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: [(None, Environment().loader)]})()"",
            ""template = 'example_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: [(None, self.MockLoader())]})()"",
            ""template = 'example_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound"",
            ""import sys""
        ],
        ""initialization"": [
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: [(None, type('Loader', (object,), {'get_source': lambda env, template: 'source_code_placeholder'})())]})()"",
            ""template = 'example_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    }
]","[
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: iter([(None, type('MockLoader', (object,), {'get_source': lambda self, environment, template: 'mock_source'})())])})() # pragma: no cover"",
            ""template = 'mock_template' # pragma: no cover"",
            ""environment = 'mock_environment' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""self = type('MockSelf', (object,), {'_iter_loaders': lambda self, template: iter([(None, type('MockLoader', (object,), {'get_source': lambda self, env, tmpl: 'source_code'})())])})() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = 'example_environment' # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: [(None, type('MockLoader', (object,), {'get_source': lambda self, environment, template: 'Template Source'})())]})() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: [(None, loader) for loader in [LoaderMock()]]})() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover"",
            ""class LoaderMock:# pragma: no cover"",
            ""    def get_source(self, environment, template):# pragma: no cover"",
            ""        return 'example_source_code' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover"",
            ""from typing import List, Tuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader:# pragma: no cover"",
            ""    def get_source(self, environment: Environment, template: str) -> str:# pragma: no cover"",
            ""        if template == 'valid_template':# pragma: no cover"",
            ""            return 'template source'# pragma: no cover"",
            ""        else:# pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            ""def mock_iter_loaders(template: str) -> List[Tuple[str, MockLoader]]:# pragma: no cover"",
            ""    return [('srcobj1', MockLoader()), ('srcobj2', MockLoader())] # pragma: no cover"",
            ""self = type('Mock', (object,), {'_iter_loaders': mock_iter_loaders})() # pragma: no cover"",
            ""template = 'invalid_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, tmpl: [(None, loader) for loader in [type('Loader', (object,), {'get_source': lambda self, env, tmpl: 'source'})()] ] })() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import BaseLoader, Environment, TemplateNotFound, Template # pragma: no cover""
        ],
        ""initialization"": [
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: iter([(None, BaseLoader())])})() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: [(None, Environment().loader)]})() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: [(None, self.MockLoader())]})() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover"",
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: [(None, type('Loader', (object,), {'get_source': lambda env, template: 'source_code_placeholder'})())]})() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    }
]",1,342,0.000171,1157,0.0017355,0.0019065
"When trying to execute the code snippet with the provided imports and initialization, the following error happens:
# begin error message
Execution error at line :
mock_source
# end error message

Please, provide self-contained and concrete Python fixed values of the imports and initialization to solve the error and make the code snippet executable.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:\n    def get_source(self, environment, template):\n        return 'mock_source'\n\nclass Mock:\n    def _iter_loaders(self, template):\n        return [(None, MockLoader())]\n\nself = Mock()"",
            ""template = 'mock_template'"",
            ""environment = 'mock_environment'""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound""
        ],
        ""initialization"": [
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: iter([(None, type('MockLoader', (object,), {'get_source': lambda self, environment, template: (None, 'mock_source', None)})())])})()"",
            ""template = 'mock_template'"",
            ""environment = 'mock_environment'""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound""
        ],
        ""initialization"": [
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: iter([(None, type('MockLoader', (object,), {'get_source': lambda self, environment, template: 'mock_template_content'})())])})()"",
            ""template = 'mock_template'"",
            ""environment = 'mock_environment'""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        return 'mock_source', template, lambda: True"",
            ""class Mock:"",
            ""    def _iter_loaders(self, template):"",
            ""        return iter([(None, MockLoader())])"",
            ""self = Mock()"",
            ""template = 'mock_template'"",
            ""environment = 'mock_environment'""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound""
        ],
        ""initialization"": [
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: iter([(None, type('MockLoader', (object,), {'get_source': lambda self, environment, template: 'mock_source'})())])})()"",
            ""template = 'mock_template'"",
            ""environment = 'mock_environment'"",
            ""exit = lambda source: print(source)  # Mocking exit function to print the source instead of terminating""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound""
        ],
        ""initialization"": [
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: iter([(None, type('MockLoader', (object,), {'get_source': lambda self, environment, template: 'mock_source'})())])})()"",
            ""template = 'mock_template'"",
            ""environment = type('MockEnvironment', (object,), {})()"",
            ""exit = lambda source: None""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound""
        ],
        ""initialization"": [
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: iter([(None, type('MockLoader', (object,), {'get_source': lambda self, environment, template: 'mock_source'})())])})()"",
            ""template = 'mock_template'"",
            ""environment = None""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        return 'mock_source', 'mock_filename', lambda: True"",
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: iter([(None, MockLoader())])})()"",
            ""template = 'mock_template'"",
            ""environment = 'mock_environment'""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound""
        ],
        ""initialization"": [
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: iter([(None, type('MockLoader', (object,), {'get_source': lambda self, environment, template: 'mock_source'})())])})()"",
            ""template = 'mock_template'"",
            ""environment = type('MockEnvironment', (object,), {})()""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound""
        ],
        ""initialization"": [
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: iter([(None, type('MockLoader', (object,), {'get_source': lambda self, environment, template: 'mock_source'})())])})()"",
            ""template = 'mock_template'"",
            ""environment = 'mock_environment'""
        ]
    }
]","[
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader:# pragma: no cover"",
            ""    def get_source(self, environment, template):# pragma: no cover"",
            ""        return 'mock_source'# pragma: no cover"",
            ""# pragma: no cover"",
            ""class Mock:# pragma: no cover"",
            ""    def _iter_loaders(self, template):# pragma: no cover"",
            ""        return [(None, MockLoader())]# pragma: no cover"",
            ""# pragma: no cover"",
            ""self = Mock() # pragma: no cover"",
            ""template = 'mock_template' # pragma: no cover"",
            ""environment = 'mock_environment' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: iter([(None, type('MockLoader', (object,), {'get_source': lambda self, environment, template: (None, 'mock_source', None)})())])})() # pragma: no cover"",
            ""template = 'mock_template' # pragma: no cover"",
            ""environment = 'mock_environment' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: iter([(None, type('MockLoader', (object,), {'get_source': lambda self, environment, template: 'mock_template_content'})())])})() # pragma: no cover"",
            ""template = 'mock_template' # pragma: no cover"",
            ""environment = 'mock_environment' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        return 'mock_source', template, lambda: True # pragma: no cover"",
            ""class Mock: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        return iter([(None, MockLoader())]) # pragma: no cover"",
            ""self = Mock() # pragma: no cover"",
            ""template = 'mock_template' # pragma: no cover"",
            ""environment = 'mock_environment' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: iter([(None, type('MockLoader', (object,), {'get_source': lambda self, environment, template: 'mock_source'})())])})() # pragma: no cover"",
            ""template = 'mock_template' # pragma: no cover"",
            ""environment = 'mock_environment' # pragma: no cover"",
            ""exit = lambda source: print(source)  # Mocking exit function to print the source instead of terminating # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: iter([(None, type('MockLoader', (object,), {'get_source': lambda self, environment, template: 'mock_source'})())])})() # pragma: no cover"",
            ""template = 'mock_template' # pragma: no cover"",
            ""environment = type('MockEnvironment', (object,), {})() # pragma: no cover"",
            ""exit = lambda source: None # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: iter([(None, type('MockLoader', (object,), {'get_source': lambda self, environment, template: 'mock_source'})())])})() # pragma: no cover"",
            ""template = 'mock_template' # pragma: no cover"",
            ""environment = None # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        return 'mock_source', 'mock_filename', lambda: True # pragma: no cover"",
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: iter([(None, MockLoader())])})() # pragma: no cover"",
            ""template = 'mock_template' # pragma: no cover"",
            ""environment = 'mock_environment' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: iter([(None, type('MockLoader', (object,), {'get_source': lambda self, environment, template: 'mock_source'})())])})() # pragma: no cover"",
            ""template = 'mock_template' # pragma: no cover"",
            ""environment = type('MockEnvironment', (object,), {})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: iter([(None, type('MockLoader', (object,), {'get_source': lambda self, environment, template: 'mock_source'})())])})() # pragma: no cover"",
            ""template = 'mock_template' # pragma: no cover"",
            ""environment = 'mock_environment' # pragma: no cover""
        ]
    }
]",2,719,0.0003595,1120,0.00168,0.0020395
"When trying to execute the code snippet with the provided imports and initialization, the following error happens:
# begin error message
Execution error at line :
source_code
# end error message

Please, provide self-contained and concrete Python fixed values of the imports and initialization to solve the error and make the code snippet executable.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound""
        ],
        ""initialization"": [
            ""self = type('MockSelf', (object,), {'_iter_loaders': lambda self, template: iter([(None, type('MockLoader', (object,), {'get_source': lambda self, env, tmpl: (\""mock_filename\"", \""mock_source\"", True)})())])})()"",
            ""template = 'example_template'"",
            ""environment = 'example_environment'"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockSelf: \n"",
            ""    def _iter_loaders(self, template): \n"",
            ""        class MockLoader: \n"",
            ""            def get_source(self, environment, template): \n"",
            ""                return 'source_code' \n"",
            ""        yield None, MockLoader() \n"",
            ""self = MockSelf()"",
            ""template = 'example_template'"",
            ""environment = 'example_environment'"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound""
        ],
        ""initialization"": [
            ""self = type('MockSelf', (object,), {'_iter_loaders': lambda self, template: iter([(None, type('MockLoader', (object,), {'get_source': lambda self, env, tmpl: None})())])})()"",
            ""template = 'example_template'"",
            ""environment = 'example_environment'"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound""
        ],
        ""initialization"": [
            ""def mock_exit(source):"",
            ""    print(source)"",
            ""exit = mock_exit"",
            ""self = type('MockSelf', (object,), {'_iter_loaders': lambda self, template: iter([(None, type('MockLoader', (object,), {'get_source': lambda self, env, tmpl: 'source_code'})())])})()"",
            ""template = 'example_template'"",
            ""environment = 'example_environment'"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound""
        ],
        ""initialization"": [
            ""self = type('MockSelf', (object,), {'_iter_loaders': lambda self, template: iter([(None, type('MockLoader', (object,), {'get_source': lambda self, env, tmpl: lambda: 'source_code'})())])})()"",
            ""template = 'example_template'"",
            ""environment = 'example_environment'"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound""
        ],
        ""initialization"": [
            ""self = type('MockSelf', (object,), {'_iter_loaders': lambda self, template: iter([(None, type('MockLoader', (object,), {'get_source': lambda self, env, tmpl: ('source_code', 'filename', 'uptodate')})())])})()"",
            ""template = 'example_template'"",
            ""environment = 'example_environment'"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound""
        ],
        ""initialization"": [
            ""self = type('MockSelf', (object,), {'_iter_loaders': lambda self, template: iter([(None, type('MockLoader', (object,), {'get_source': lambda self, env, tmpl: (tmpl, 'source_code', 'load_first')})())])})()"",
            ""template = 'example_template'"",
            ""environment = 'example_environment'"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound""
        ],
        ""initialization"": [
            ""self = type('MockSelf', (object,), {'_iter_loaders': lambda self, template: iter([(None, type('MockLoader', (object,), {'get_source': lambda self, env, tmpl: exit(0)})())])})()"",
            ""template = 'example_template'"",
            ""environment = 'example_environment'"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound""
        ],
        ""initialization"": [
            ""import sys"",
            ""from unittest.mock import Mock"",
            ""self = type('MockSelf', (object,), {'_iter_loaders': lambda self, template: iter([(None, Mock(get_source=lambda env, tmpl: 'mock_source_code'))])})()"",
            ""template = 'example_template'"",
            ""environment = 'example_environment'"",
            ""TemplateNotFound = TemplateNotFound"",
            ""exit = sys.exit""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound""
        ],
        ""initialization"": [
            ""self = type('MockSelf', (object,), {'_iter_loaders': lambda self, template: iter([(None, type('MockLoader', (object,), {'get_source': lambda self, env, tmpl: ('source_code', None, None)})())])})()"",
            ""template = 'example_template'"",
            ""environment = 'example_environment'"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    }
]","[
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""self = type('MockSelf', (object,), {'_iter_loaders': lambda self, template: iter([(None, type('MockLoader', (object,), {'get_source': lambda self, env, tmpl: (\""mock_filename\"", \""mock_source\"", True)})())])})() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = 'example_environment' # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockSelf: # pragma: no cover"",
            "" # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            "" # pragma: no cover"",
            ""        class MockLoader: # pragma: no cover"",
            "" # pragma: no cover"",
            ""            def get_source(self, environment, template): # pragma: no cover"",
            "" # pragma: no cover"",
            ""                return 'source_code' # pragma: no cover"",
            "" # pragma: no cover"",
            ""        yield None, MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = 'example_environment' # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""self = type('MockSelf', (object,), {'_iter_loaders': lambda self, template: iter([(None, type('MockLoader', (object,), {'get_source': lambda self, env, tmpl: None})())])})() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = 'example_environment' # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            """"
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""self = type('MockSelf', (object,), {'_iter_loaders': lambda self, template: iter([(None, type('MockLoader', (object,), {'get_source': lambda self, env, tmpl: lambda: 'source_code'})())])})() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = 'example_environment' # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""self = type('MockSelf', (object,), {'_iter_loaders': lambda self, template: iter([(None, type('MockLoader', (object,), {'get_source': lambda self, env, tmpl: ('source_code', 'filename', 'uptodate')})())])})() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = 'example_environment' # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""self = type('MockSelf', (object,), {'_iter_loaders': lambda self, template: iter([(None, type('MockLoader', (object,), {'get_source': lambda self, env, tmpl: (tmpl, 'source_code', 'load_first')})())])})() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = 'example_environment' # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""template = 'example_template' # pragma: no cover"",
            ""environment = 'example_environment' # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""self = type('MockSelf', (object,), {'_iter_loaders': lambda self, template: iter([(None, Mock(get_source=lambda env, tmpl: 'mock_source_code'))])})() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = 'example_environment' # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover"",
            ""exit = sys.exit # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""self = type('MockSelf', (object,), {'_iter_loaders': lambda self, template: iter([(None, type('MockLoader', (object,), {'get_source': lambda self, env, tmpl: ('source_code', None, None)})())])})() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = 'example_environment' # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    }
]",2,1107,0.0005535,1237,0.0018555,0.0024089999999999
"When trying to execute the code snippet with the provided imports and initialization, the following error happens:
# begin error message
Execution error at line :
Template Source
# end error message

Please, provide self-contained and concrete Python fixed values of the imports and initialization to solve the error and make the code snippet executable.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: iter([(None, type('MockLoader', (object,), {'get_source': lambda self, environment, template: 'Template Content'})())])})()"",
            ""template = 'example_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: iter([(None, type('MockLoader', (object,), {'get_source': lambda self, environment, template: ('mock_source', None, None)})())])})()"",
            ""template = 'example_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""import sys"",
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: iter([(None, type('MockLoader', (object,), {'get_source': lambda self, environment, template: sys.exit('Template Source')})())])})()"",
            ""template = 'example_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""self = type('MockSelf', (object,), {'_iter_loaders': lambda self, template: iter([(None, type('MockLoader', (object,), {'get_source': lambda self, env, tmpl: ('mock_source', 'mock_filename', lambda: True)})())])})()"",
            ""template = 'example_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = type('TemplateNotFound', (Exception,), {})""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: iter([(None, type('MockLoader', (object,), {'get_source': lambda self, env, tmpl: ('source_code', 'dummy_path', 'dummy_template')})())])})()"",
            ""template = 'example_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: iter([(None, type('MockLoader', (object,), {'get_source': lambda self, environment, template: ('mock_template', 'mock_filename', lambda: 'mock_source-code')})())])})()"",
            ""template = 'example_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: iter([(None, type('MockLoader', (object,), {'get_source': lambda self, environment, template: ('Template Source', 'Filename', 1)})())])})()"",
            ""template = 'example_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound"",
            ""import sys""
        ],
        ""initialization"": [
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: iter([(None, type('MockLoader', (object,), {'get_source': lambda self, environment, template: 'template_source'})())])})()"",
            ""template = 'example_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound"",
            ""exit = lambda source: sys.exit(source)""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""self = type('MockSelf', (object,), {'_iter_loaders': lambda self, template: iter([(None, type('MockLoader', (object,), {'get_source': lambda self, environment, template: 'mock_source'})())])})()"",
            ""template = 'example_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""self = type('MockSelf', (object,), {'_iter_loaders': lambda self, template: iter([(None, type('MockLoader', (object,), {'get_source': lambda self, environment, template: ('source_code', 'filename', 'uptodate')})())])})()"",
            ""template = 'example_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    }
]","[
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: iter([(None, type('MockLoader', (object,), {'get_source': lambda self, environment, template: 'Template Content'})())])})() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: iter([(None, type('MockLoader', (object,), {'get_source': lambda self, environment, template: ('mock_source', None, None)})())])})() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import sys # pragma: no cover"",
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""template = 'example_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""self = type('MockSelf', (object,), {'_iter_loaders': lambda self, template: iter([(None, type('MockLoader', (object,), {'get_source': lambda self, env, tmpl: ('mock_source', 'mock_filename', lambda: True)})())])})() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = type('TemplateNotFound', (Exception,), {}) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: iter([(None, type('MockLoader', (object,), {'get_source': lambda self, env, tmpl: ('source_code', 'dummy_path', 'dummy_template')})())])})() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: iter([(None, type('MockLoader', (object,), {'get_source': lambda self, environment, template: ('mock_template', 'mock_filename', lambda: 'mock_source-code')})())])})() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: iter([(None, type('MockLoader', (object,), {'get_source': lambda self, environment, template: ('Template Source', 'Filename', 1)})())])})() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover"",
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: iter([(None, type('MockLoader', (object,), {'get_source': lambda self, environment, template: 'template_source'})())])})() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""self = type('MockSelf', (object,), {'_iter_loaders': lambda self, template: iter([(None, type('MockLoader', (object,), {'get_source': lambda self, environment, template: 'mock_source'})())])})() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""self = type('MockSelf', (object,), {'_iter_loaders': lambda self, template: iter([(None, type('MockLoader', (object,), {'get_source': lambda self, environment, template: ('source_code', 'filename', 'uptodate')})())])})() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    }
]",2,1494,0.000747,1225,0.0018375,0.0025845
"When trying to execute the code snippet with the provided imports and initialization, the following error happens:
# begin error message
Execution error at line :
example_source_code
# end error message

Please, provide self-contained and concrete Python fixed values of the imports and initialization to solve the error and make the code snippet executable.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class LoaderMock:\n    def get_source(self, environment, template):\n        return 'example_source_code', template, lambda: True"",
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: [(None, LoaderMock())]})()"",
            ""template = 'example_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""self = type('Mock', (object,), {\n    '_iter_loaders': lambda self, template: iter([(None, type('MockLoader', (object,), {'get_source': lambda self, environment, template: ('example_source_code', None, None)})())])\n})()"",
            ""template = 'example_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:\n    def get_source(self, environment, template):\n        raise TemplateNotFound(template)"",
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: [(None, MockLoader())]})()"",
            ""template = 'example_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:\n    def get_source(self, environment, template):\n        return 'example_source_code', None, None"",
            ""self = type('MockSelf', (object,), {'_iter_loaders': lambda self, template: iter([(None, MockLoader())])})()"",
            ""template = 'example_template'"",
            ""environment = Environment()""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""def mock_exit(value):\n    print(value)\n    exit()"",
            ""self = type('Mock', (object,), {\n    '_iter_loaders': lambda self, template: iter([(None, type('MockLoader', (object,), {\n        'get_source': lambda self, environment, template: mock_exit('example_source_code')\n    })())])\n})()"",
            ""template = 'example_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class LoaderMock:\n    def get_source(self, environment, template):\n        return 'example_source_code', 'example_filename', lambda: True"",
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: [(None, LoaderMock())]})()"",
            ""template = 'example_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:\n    def get_source(self, environment, template):\n        return 'example_source_code', '', lambda: False"",
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: [(None, MockLoader())]})()"",
            ""template = 'example_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:\n    def get_source(self, environment, template):\n        return 'example_source_code', template, lambda: True\n\nself = type('Mock', (object,), {'_iter_loaders': lambda self, template: iter([(None, MockLoader())])})()"",
            ""template = 'example_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class LoaderMock:\n    def get_source(self, environment, template):\n        return 'example_source_code', 'filename', lambda: True"",
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: [(None, LoaderMock())]})()"",
            ""template = 'example_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:\n    def get_source(self, environment, template):\n        raise TemplateNotFound(template)"",
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: [(None, MockLoader())]})()"",
            ""template = 'example_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    }
]","[
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class LoaderMock:# pragma: no cover"",
            ""    def get_source(self, environment, template):# pragma: no cover"",
            ""        return 'example_source_code', template, lambda: True # pragma: no cover"",
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: [(None, LoaderMock())]})() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""self = type('Mock', (object,), {# pragma: no cover"",
            ""    '_iter_loaders': lambda self, template: iter([(None, type('MockLoader', (object,), {'get_source': lambda self, environment, template: ('example_source_code', None, None)})())])# pragma: no cover"",
            ""})() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader:# pragma: no cover"",
            ""    def get_source(self, environment, template):# pragma: no cover"",
            ""        raise TemplateNotFound(template) # pragma: no cover"",
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: [(None, MockLoader())]})() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader:# pragma: no cover"",
            ""    def get_source(self, environment, template):# pragma: no cover"",
            ""        return 'example_source_code', None, None # pragma: no cover"",
            ""self = type('MockSelf', (object,), {'_iter_loaders': lambda self, template: iter([(None, MockLoader())])})() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""template = 'example_template' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class LoaderMock:# pragma: no cover"",
            ""    def get_source(self, environment, template):# pragma: no cover"",
            ""        return 'example_source_code', 'example_filename', lambda: True # pragma: no cover"",
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: [(None, LoaderMock())]})() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader:# pragma: no cover"",
            ""    def get_source(self, environment, template):# pragma: no cover"",
            ""        return 'example_source_code', '', lambda: False # pragma: no cover"",
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: [(None, MockLoader())]})() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader:# pragma: no cover"",
            ""    def get_source(self, environment, template):# pragma: no cover"",
            ""        return 'example_source_code', template, lambda: True# pragma: no cover"",
            ""# pragma: no cover"",
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: iter([(None, MockLoader())])})() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class LoaderMock:# pragma: no cover"",
            ""    def get_source(self, environment, template):# pragma: no cover"",
            ""        return 'example_source_code', 'filename', lambda: True # pragma: no cover"",
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: [(None, LoaderMock())]})() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader:# pragma: no cover"",
            ""    def get_source(self, environment, template):# pragma: no cover"",
            ""        raise TemplateNotFound(template) # pragma: no cover"",
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: [(None, MockLoader())]})() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    }
]",2,1893,0.0009465,1242,0.001863,0.0028095
"When trying to execute the code snippet with the provided imports and initialization, the following error happens:
# begin error message
Execution error at line 18:
    for _srcobj, loader in self._iter_loaders(template):
TypeError: mock_iter_loaders() takes 1 positional argument but 2 were given
# end error message

Please, provide self-contained and concrete Python fixed values of the imports and initialization to solve the error and make the code snippet executable.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound"",
            ""from typing import List, Tuple""
        ],
        ""initialization"": [
            ""class MockLoader:\n    def get_source(self, environment: Environment, template: str) -> str:\n        if template == 'valid_template':\n            return 'template source'\n        else:\n            raise TemplateNotFound(template)"",
            ""def mock_iter_loaders(self, template: str) -> List[Tuple[str, MockLoader]]:\n    return [('srcobj1', MockLoader()), ('srcobj2', MockLoader())]"",
            ""self = type('Mock', (object,), {'_iter_loaders': mock_iter_loaders})()"",
            ""template = 'invalid_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound"",
            ""from typing import List, Tuple""
        ],
        ""initialization"": [
            ""class MockLoader:\n    def get_source(self, environment: Environment, template: str) -> str:\n        if template == 'valid_template':\n            return 'template source'\n        else:\n            raise TemplateNotFound(template)"",
            ""def mock_iter_loaders(self, template: str) -> List[Tuple[str, MockLoader]]:\n    return [('srcobj1', MockLoader()), ('srcobj2', MockLoader())]"",
            ""self = type('Mock', (object,), {'_iter_loaders': mock_iter_loaders})()"",
            ""template = 'invalid_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:\n    def get_source(self, environment, template):\n        if template == 'example_template':\n            return 'example_source_code'\n        else:\n            raise TemplateNotFound(template)"",
            ""def mock_iter_loaders(self, template):\n    return [('srcobj1', MockLoader()), ('srcobj2', MockLoader())]"",
            ""self = type('Mock', (object,), {'_iter_loaders': mock_iter_loaders})()"",
            ""template = 'example_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound"",
            ""from typing import List, Tuple""
        ],
        ""initialization"": [
            ""class MockLoader:\n    def get_source(self, environment: Environment, template: str) -> str:\n        if template == 'valid_template':\n            return 'template source'\n        else:\n            raise TemplateNotFound(template)"",
            ""def mock_iter_loaders(_, template: str) -> List[Tuple[str, MockLoader]]:\n    return [('srcobj1', MockLoader()), ('srcobj2', MockLoader())]"",
            ""self = type('Mock', (object,), {'_iter_loaders': mock_iter_loaders})()"",
            ""template = 'invalid_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound"",
            ""from typing import List, Tuple""
        ],
        ""initialization"": [
            ""class MockLoader:\n    def get_source(self, environment: Environment, template: str) -> str:\n        if template == 'example_template':\n            return 'template source'\n        else:\n            raise TemplateNotFound(template)"",
            ""def mock_iter_loaders(self, template: str) -> List[Tuple[str, MockLoader]]:\n    return [('srcobj1', MockLoader()), ('srcobj2', MockLoader())]"",
            ""self = type('Mock', (object,), {'_iter_loaders': mock_iter_loaders})()"",
            ""template = 'example_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:\n    def get_source(self, environment: Environment, template: str) -> str:\n        if template == 'valid_template':\n            return 'template source'\n        else:\n            raise TemplateNotFound(template)"",
            ""def mock_iter_loaders(self, template: str):\n    return iter([('srcobj1', MockLoader()), ('srcobj2', MockLoader())])"",
            ""self = type('Mock', (object,), {'_iter_loaders': mock_iter_loaders})()"",
            ""template = 'invalid_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:\n    def get_source(self, environment: Environment, template: str) -> str:\n        if template == 'valid_template':\n            return 'template source'\n        else:\n            raise TemplateNotFound(template)"",
            ""def mock_iter_loaders(self, template: str):\n    return iter([('srcobj1', MockLoader()), ('srcobj2', MockLoader())])"",
            ""self = type('Mock', (object,), {'_iter_loaders': mock_iter_loaders})()"",
            ""template = 'invalid_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:\n    def get_source(self, environment, template):\n        if template == 'valid_template':\n            return 'template source'\n        else:\n            raise TemplateNotFound(template)"",
            ""def mock_iter_loaders(self, template):\n    return [('srcobj1', MockLoader()), ('srcobj2', MockLoader())]"",
            ""self = type('Mock', (object,), {'_iter_loaders': mock_iter_loaders})()"",
            ""template = 'invalid_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:\n    def get_source(self, environment: Environment, template: str) -> str:\n        if template == 'valid_template':\n            return 'template source'\n        else:\n            raise TemplateNotFound(template)"",
            ""def mock_iter_loaders(self, template: str):\n    return iter([('srcobj1', MockLoader()), ('srcobj2', MockLoader())])"",
            ""self = type('Mock', (object,), {'_iter_loaders': mock_iter_loaders})()"",
            ""template = 'invalid_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:\n    def get_source(self, environment: Environment, template: str) -> str:\n        if template == 'valid_template':\n            return 'template source'\n        else:\n            raise TemplateNotFound(template)"",
            ""def mock_iter_loaders(self, template: str):\n    return [('srcobj1', MockLoader()), ('srcobj2', MockLoader())]"",
            ""self = type('Mock', (object,), {'_iter_loaders': mock_iter_loaders})()"",
            ""template = 'invalid_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    }
]","[
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover"",
            ""from typing import List, Tuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader:# pragma: no cover"",
            ""    def get_source(self, environment: Environment, template: str) -> str:# pragma: no cover"",
            ""        if template == 'valid_template':# pragma: no cover"",
            ""            return 'template source'# pragma: no cover"",
            ""        else:# pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            ""def mock_iter_loaders(self, template: str) -> List[Tuple[str, MockLoader]]:# pragma: no cover"",
            ""    return [('srcobj1', MockLoader()), ('srcobj2', MockLoader())] # pragma: no cover"",
            ""self = type('Mock', (object,), {'_iter_loaders': mock_iter_loaders})() # pragma: no cover"",
            ""template = 'invalid_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover"",
            ""from typing import List, Tuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader:# pragma: no cover"",
            ""    def get_source(self, environment: Environment, template: str) -> str:# pragma: no cover"",
            ""        if template == 'valid_template':# pragma: no cover"",
            ""            return 'template source'# pragma: no cover"",
            ""        else:# pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            ""def mock_iter_loaders(self, template: str) -> List[Tuple[str, MockLoader]]:# pragma: no cover"",
            ""    return [('srcobj1', MockLoader()), ('srcobj2', MockLoader())] # pragma: no cover"",
            ""self = type('Mock', (object,), {'_iter_loaders': mock_iter_loaders})() # pragma: no cover"",
            ""template = 'invalid_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader:# pragma: no cover"",
            ""    def get_source(self, environment, template):# pragma: no cover"",
            ""        if template == 'example_template':# pragma: no cover"",
            ""            return 'example_source_code'# pragma: no cover"",
            ""        else:# pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            ""def mock_iter_loaders(self, template):# pragma: no cover"",
            ""    return [('srcobj1', MockLoader()), ('srcobj2', MockLoader())] # pragma: no cover"",
            ""self = type('Mock', (object,), {'_iter_loaders': mock_iter_loaders})() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover"",
            ""from typing import List, Tuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader:# pragma: no cover"",
            ""    def get_source(self, environment: Environment, template: str) -> str:# pragma: no cover"",
            ""        if template == 'valid_template':# pragma: no cover"",
            ""            return 'template source'# pragma: no cover"",
            ""        else:# pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            ""def mock_iter_loaders(_, template: str) -> List[Tuple[str, MockLoader]]:# pragma: no cover"",
            ""    return [('srcobj1', MockLoader()), ('srcobj2', MockLoader())] # pragma: no cover"",
            ""self = type('Mock', (object,), {'_iter_loaders': mock_iter_loaders})() # pragma: no cover"",
            ""template = 'invalid_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover"",
            ""from typing import List, Tuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader:# pragma: no cover"",
            ""    def get_source(self, environment: Environment, template: str) -> str:# pragma: no cover"",
            ""        if template == 'example_template':# pragma: no cover"",
            ""            return 'template source'# pragma: no cover"",
            ""        else:# pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            ""def mock_iter_loaders(self, template: str) -> List[Tuple[str, MockLoader]]:# pragma: no cover"",
            ""    return [('srcobj1', MockLoader()), ('srcobj2', MockLoader())] # pragma: no cover"",
            ""self = type('Mock', (object,), {'_iter_loaders': mock_iter_loaders})() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader:# pragma: no cover"",
            ""    def get_source(self, environment: Environment, template: str) -> str:# pragma: no cover"",
            ""        if template == 'valid_template':# pragma: no cover"",
            ""            return 'template source'# pragma: no cover"",
            ""        else:# pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            ""def mock_iter_loaders(self, template: str):# pragma: no cover"",
            ""    return iter([('srcobj1', MockLoader()), ('srcobj2', MockLoader())]) # pragma: no cover"",
            ""self = type('Mock', (object,), {'_iter_loaders': mock_iter_loaders})() # pragma: no cover"",
            ""template = 'invalid_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader:# pragma: no cover"",
            ""    def get_source(self, environment: Environment, template: str) -> str:# pragma: no cover"",
            ""        if template == 'valid_template':# pragma: no cover"",
            ""            return 'template source'# pragma: no cover"",
            ""        else:# pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            ""def mock_iter_loaders(self, template: str):# pragma: no cover"",
            ""    return iter([('srcobj1', MockLoader()), ('srcobj2', MockLoader())]) # pragma: no cover"",
            ""self = type('Mock', (object,), {'_iter_loaders': mock_iter_loaders})() # pragma: no cover"",
            ""template = 'invalid_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader:# pragma: no cover"",
            ""    def get_source(self, environment, template):# pragma: no cover"",
            ""        if template == 'valid_template':# pragma: no cover"",
            ""            return 'template source'# pragma: no cover"",
            ""        else:# pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            ""def mock_iter_loaders(self, template):# pragma: no cover"",
            ""    return [('srcobj1', MockLoader()), ('srcobj2', MockLoader())] # pragma: no cover"",
            ""self = type('Mock', (object,), {'_iter_loaders': mock_iter_loaders})() # pragma: no cover"",
            ""template = 'invalid_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader:# pragma: no cover"",
            ""    def get_source(self, environment: Environment, template: str) -> str:# pragma: no cover"",
            ""        if template == 'valid_template':# pragma: no cover"",
            ""            return 'template source'# pragma: no cover"",
            ""        else:# pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            ""def mock_iter_loaders(self, template: str):# pragma: no cover"",
            ""    return iter([('srcobj1', MockLoader()), ('srcobj2', MockLoader())]) # pragma: no cover"",
            ""self = type('Mock', (object,), {'_iter_loaders': mock_iter_loaders})() # pragma: no cover"",
            ""template = 'invalid_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader:# pragma: no cover"",
            ""    def get_source(self, environment: Environment, template: str) -> str:# pragma: no cover"",
            ""        if template == 'valid_template':# pragma: no cover"",
            ""            return 'template source'# pragma: no cover"",
            ""        else:# pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            ""def mock_iter_loaders(self, template: str):# pragma: no cover"",
            ""    return [('srcobj1', MockLoader()), ('srcobj2', MockLoader())] # pragma: no cover"",
            ""self = type('Mock', (object,), {'_iter_loaders': mock_iter_loaders})() # pragma: no cover"",
            ""template = 'invalid_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    }
]",2,2387,0.0011935,1775,0.0026625,0.003856
"When trying to execute the code snippet with the provided imports and initialization, the following error happens:
# begin error message
Execution error at line :
source
# end error message

Please, provide self-contained and concrete Python fixed values of the imports and initialization to solve the error and make the code snippet executable.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:\n    def get_source(self, environment, template):\n        if template == 'valid_template':\n            return 'example_source_code', None, None\n        else:\n            raise TemplateNotFound(template)"",
            ""def mock_iter_loaders(template):\n    return [(None, MockLoader())]"",
            ""self = type('Mock', (object,), {'_iter_loaders': mock_iter_loaders})()"",
            ""template = 'valid_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:\n    def get_source(self, environment, template):\n        if template == 'valid_template':\n            return 'source', None, None\n        else:\n            raise TemplateNotFound(template)"",
            ""def mock_iter_loaders(template):\n    return [(None, MockLoader())]"",
            ""self = type('Mock', (object,), {'_iter_loaders': mock_iter_loaders})()"",
            ""template = 'valid_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:\n    def get_source(self, environment, template):\n        if template == 'example_template':\n            return 'valid_template_source', None, None\n        else:\n            raise TemplateNotFound(template)"",
            ""def mock_iter_loaders(template):\n    return iter([(None, MockLoader())])"",
            ""self = type('Mock', (object,), {'_iter_loaders': mock_iter_loaders})()"",
            ""template = 'example_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:\n    def get_source(self, environment, template):\n        if template == 'example_template':\n            raise TemplateNotFound(template)\n        return 'example_source'"",
            ""class MockSelf:\n    def _iter_loaders(self, template):\n        yield None, MockLoader()"",
            ""self = MockSelf()"",
            ""template = 'example_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:\n    def get_source(self, environment, template):\n        if template == 'example_template':\n            return 'example_source_code', 'example_filename', lambda: True\n        else:\n            raise TemplateNotFound(template)"",
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: iter([(None, MockLoader())])})()"",
            ""template = 'example_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:\n    def get_source(self, environment, template):\n        raise TemplateNotFound(template)"",
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: iter([(None, MockLoader())])})()"",
            ""template = 'nonexistent_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:\n    def get_source(self, environment, template):\n        if template == 'example_template':\n            return 'example_source_code', None, None\n        else:\n            raise TemplateNotFound(template)"",
            ""def mock_iter_loaders(template):\n    return [(None, MockLoader())]"",
            ""self = type('Mock', (object,), {'_iter_loaders': mock_iter_loaders})()"",
            ""template = 'example_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:\n    def get_source(self, environment, template):\n        if template == 'valid_template':\n            return 'template source'\n        else:\n            raise TemplateNotFound(template)"",
            ""def mock_iter_loaders(self, template):\n    return [(None, MockLoader())]"",
            ""self = type('Mock', (object,), {'_iter_loaders': mock_iter_loaders})()"",
            ""template = 'valid_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:\n    def get_source(self, environment, template):\n        if template == 'example_template':\n            return 'source', 'filename', 'uptodate'\n        else:\n            raise TemplateNotFound(template)"",
            ""def mock_iter_loaders(template):\n    return [(None, MockLoader())]"",
            ""self = type('Mock', (object,), {'_iter_loaders': mock_iter_loaders})()"",
            ""template = 'example_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class LoaderMock:\n    def get_source(self, environment, template):\n        raise TemplateNotFound(template)"",
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: [(None, LoaderMock())]})()"",
            ""template = 'example_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    }
]","[
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader:# pragma: no cover"",
            ""    def get_source(self, environment, template):# pragma: no cover"",
            ""        if template == 'valid_template':# pragma: no cover"",
            ""            return 'example_source_code', None, None# pragma: no cover"",
            ""        else:# pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            ""def mock_iter_loaders(template):# pragma: no cover"",
            ""    return [(None, MockLoader())] # pragma: no cover"",
            ""self = type('Mock', (object,), {'_iter_loaders': mock_iter_loaders})() # pragma: no cover"",
            ""template = 'valid_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader:# pragma: no cover"",
            ""    def get_source(self, environment, template):# pragma: no cover"",
            ""        if template == 'valid_template':# pragma: no cover"",
            ""            return 'source', None, None# pragma: no cover"",
            ""        else:# pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            ""def mock_iter_loaders(template):# pragma: no cover"",
            ""    return [(None, MockLoader())] # pragma: no cover"",
            ""self = type('Mock', (object,), {'_iter_loaders': mock_iter_loaders})() # pragma: no cover"",
            ""template = 'valid_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader:# pragma: no cover"",
            ""    def get_source(self, environment, template):# pragma: no cover"",
            ""        if template == 'example_template':# pragma: no cover"",
            ""            return 'valid_template_source', None, None# pragma: no cover"",
            ""        else:# pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            ""def mock_iter_loaders(template):# pragma: no cover"",
            ""    return iter([(None, MockLoader())]) # pragma: no cover"",
            ""self = type('Mock', (object,), {'_iter_loaders': mock_iter_loaders})() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader:# pragma: no cover"",
            ""    def get_source(self, environment, template):# pragma: no cover"",
            ""        if template == 'example_template':# pragma: no cover"",
            ""            raise TemplateNotFound(template)# pragma: no cover"",
            ""        return 'example_source' # pragma: no cover"",
            ""class MockSelf:# pragma: no cover"",
            ""    def _iter_loaders(self, template):# pragma: no cover"",
            ""        yield None, MockLoader() # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader:# pragma: no cover"",
            ""    def get_source(self, environment, template):# pragma: no cover"",
            ""        if template == 'example_template':# pragma: no cover"",
            ""            return 'example_source_code', 'example_filename', lambda: True# pragma: no cover"",
            ""        else:# pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: iter([(None, MockLoader())])})() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader:# pragma: no cover"",
            ""    def get_source(self, environment, template):# pragma: no cover"",
            ""        raise TemplateNotFound(template) # pragma: no cover"",
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: iter([(None, MockLoader())])})() # pragma: no cover"",
            ""template = 'nonexistent_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader:# pragma: no cover"",
            ""    def get_source(self, environment, template):# pragma: no cover"",
            ""        if template == 'example_template':# pragma: no cover"",
            ""            return 'example_source_code', None, None# pragma: no cover"",
            ""        else:# pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            ""def mock_iter_loaders(template):# pragma: no cover"",
            ""    return [(None, MockLoader())] # pragma: no cover"",
            ""self = type('Mock', (object,), {'_iter_loaders': mock_iter_loaders})() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader:# pragma: no cover"",
            ""    def get_source(self, environment, template):# pragma: no cover"",
            ""        if template == 'valid_template':# pragma: no cover"",
            ""            return 'template source'# pragma: no cover"",
            ""        else:# pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            ""def mock_iter_loaders(self, template):# pragma: no cover"",
            ""    return [(None, MockLoader())] # pragma: no cover"",
            ""self = type('Mock', (object,), {'_iter_loaders': mock_iter_loaders})() # pragma: no cover"",
            ""template = 'valid_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader:# pragma: no cover"",
            ""    def get_source(self, environment, template):# pragma: no cover"",
            ""        if template == 'example_template':# pragma: no cover"",
            ""            return 'source', 'filename', 'uptodate'# pragma: no cover"",
            ""        else:# pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            ""def mock_iter_loaders(template):# pragma: no cover"",
            ""    return [(None, MockLoader())] # pragma: no cover"",
            ""self = type('Mock', (object,), {'_iter_loaders': mock_iter_loaders})() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class LoaderMock:# pragma: no cover"",
            ""    def get_source(self, environment, template):# pragma: no cover"",
            ""        raise TemplateNotFound(template) # pragma: no cover"",
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: [(None, LoaderMock())]})() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    }
]",2,2777,0.0013885,1455,0.0021825,0.003571
"When trying to execute the code snippet with the provided imports and initialization, the following error happens:
# begin error message
Execution error at line 14:
    raise TemplateNotFound(template)
jinja2.exceptions.TemplateNotFound: example_template
# end error message

Please, provide self-contained and concrete Python fixed values of the imports and initialization to solve the error and make the code snippet executable.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:\n    def get_source(self, environment, template):\n        if template == 'example_template':\n            return 'example_source_code'\n        else:\n            raise TemplateNotFound(template)"",
            ""def mock_iter_loaders(template):\n    return [(None, MockLoader())]"",
            ""self = type('Mock', (object,), {'_iter_loaders': mock_iter_loaders})()"",
            ""template = 'example_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:\n    def get_source(self, environment, template):\n        if template == 'example_template':\n            return 'example_source_code'\n        else:\n            raise TemplateNotFound(template)"",
            ""def mock_iter_loaders(template):\n    return [(None, MockLoader())]"",
            ""self = type('Mock', (object,), {'_iter_loaders': mock_iter_loaders})()"",
            ""template = 'example_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:\n    def get_source(self, environment, template):\n        if template == 'example_template':\n            return 'example_source_code'\n        else:\n            raise TemplateNotFound(template)"",
            ""class MockSelf:\n    def _iter_loaders(self, template):\n        return [(None, MockLoader())]"",
            ""self = MockSelf()"",
            ""template = 'example_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:\n    def get_source(self, environment, template):\n        if template == 'example_template':\n            return 'template source'\n        else:\n            raise TemplateNotFound(template)"",
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: iter([(None, MockLoader())])})()"",
            ""template = 'example_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound, BaseLoader""
        ],
        ""initialization"": [
            ""class MockLoader(BaseLoader):\n    def get_source(self, environment, template):\n        if template == 'valid_template':\n            return 'source_code', template, lambda: True\n        else:\n            raise TemplateNotFound(template)"",
            ""def mock_iter_loaders(self, template):\n    return [(None, MockLoader())]"",
            ""self = type('Mock', (object,), {'_iter_loaders': mock_iter_loaders})()"",
            ""template = 'valid_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:\n    def get_source(self, environment, template):\n        if template == 'example_template':\n            return 'example_source_code'\n        raise TemplateNotFound(template)"",
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: iter([(None, MockLoader())])})()"",
            ""template = 'example_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:\n    def get_source(self, environment, template):\n        if template == 'valid_template':\n            return 'example_source_code'\n        else:\n            raise TemplateNotFound(template)"",
            ""def mock_iter_loaders(template):\n    return [(None, MockLoader())]"",
            ""self = type('Mock', (object,), {'_iter_loaders': mock_iter_loaders})()"",
            ""template = 'valid_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:\n    def get_source(self, environment, template):\n        if template == 'example_template':\n            return 'source_code'\n        else:\n            raise TemplateNotFound(template)"",
            ""class Mock:\n    def _iter_loaders(self, template):\n        return [(None, MockLoader())]"",
            ""self = Mock()"",
            ""template = 'example_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:\n    def get_source(self, environment, template):\n        if template == 'example_template':\n            return 'mocked_source_code'\n        else:\n            raise TemplateNotFound(template)"",
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: iter([(None, MockLoader())])})()"",
            ""template = 'example_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:\n    def get_source(self, environment, template):\n        if template == 'example_template':\n            return 'example_source_code'\n        else:\n            raise TemplateNotFound(template)"",
            ""def mock_iter_loaders(self, template):\n    yield (None, MockLoader())"",
            ""self = type('Mock', (object,), {'_iter_loaders': mock_iter_loaders})()"",
            ""template = 'example_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    }
]","[
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader:# pragma: no cover"",
            ""    def get_source(self, environment, template):# pragma: no cover"",
            ""        if template == 'example_template':# pragma: no cover"",
            ""            return 'example_source_code'# pragma: no cover"",
            ""        else:# pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            ""def mock_iter_loaders(template):# pragma: no cover"",
            ""    return [(None, MockLoader())] # pragma: no cover"",
            ""self = type('Mock', (object,), {'_iter_loaders': mock_iter_loaders})() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader:# pragma: no cover"",
            ""    def get_source(self, environment, template):# pragma: no cover"",
            ""        if template == 'example_template':# pragma: no cover"",
            ""            return 'example_source_code'# pragma: no cover"",
            ""        else:# pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            ""def mock_iter_loaders(template):# pragma: no cover"",
            ""    return [(None, MockLoader())] # pragma: no cover"",
            ""self = type('Mock', (object,), {'_iter_loaders': mock_iter_loaders})() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader:# pragma: no cover"",
            ""    def get_source(self, environment, template):# pragma: no cover"",
            ""        if template == 'example_template':# pragma: no cover"",
            ""            return 'example_source_code'# pragma: no cover"",
            ""        else:# pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            ""class MockSelf:# pragma: no cover"",
            ""    def _iter_loaders(self, template):# pragma: no cover"",
            ""        return [(None, MockLoader())] # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader:# pragma: no cover"",
            ""    def get_source(self, environment, template):# pragma: no cover"",
            ""        if template == 'example_template':# pragma: no cover"",
            ""            return 'template source'# pragma: no cover"",
            ""        else:# pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: iter([(None, MockLoader())])})() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound, BaseLoader # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader(BaseLoader):# pragma: no cover"",
            ""    def get_source(self, environment, template):# pragma: no cover"",
            ""        if template == 'valid_template':# pragma: no cover"",
            ""            return 'source_code', template, lambda: True# pragma: no cover"",
            ""        else:# pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            ""def mock_iter_loaders(self, template):# pragma: no cover"",
            ""    return [(None, MockLoader())] # pragma: no cover"",
            ""self = type('Mock', (object,), {'_iter_loaders': mock_iter_loaders})() # pragma: no cover"",
            ""template = 'valid_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader:# pragma: no cover"",
            ""    def get_source(self, environment, template):# pragma: no cover"",
            ""        if template == 'example_template':# pragma: no cover"",
            ""            return 'example_source_code'# pragma: no cover"",
            ""        raise TemplateNotFound(template) # pragma: no cover"",
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: iter([(None, MockLoader())])})() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader:# pragma: no cover"",
            ""    def get_source(self, environment, template):# pragma: no cover"",
            ""        if template == 'valid_template':# pragma: no cover"",
            ""            return 'example_source_code'# pragma: no cover"",
            ""        else:# pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            ""def mock_iter_loaders(template):# pragma: no cover"",
            ""    return [(None, MockLoader())] # pragma: no cover"",
            ""self = type('Mock', (object,), {'_iter_loaders': mock_iter_loaders})() # pragma: no cover"",
            ""template = 'valid_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader:# pragma: no cover"",
            ""    def get_source(self, environment, template):# pragma: no cover"",
            ""        if template == 'example_template':# pragma: no cover"",
            ""            return 'source_code'# pragma: no cover"",
            ""        else:# pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            ""class Mock:# pragma: no cover"",
            ""    def _iter_loaders(self, template):# pragma: no cover"",
            ""        return [(None, MockLoader())] # pragma: no cover"",
            ""self = Mock() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader:# pragma: no cover"",
            ""    def get_source(self, environment, template):# pragma: no cover"",
            ""        if template == 'example_template':# pragma: no cover"",
            ""            return 'mocked_source_code'# pragma: no cover"",
            ""        else:# pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: iter([(None, MockLoader())])})() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader:# pragma: no cover"",
            ""    def get_source(self, environment, template):# pragma: no cover"",
            ""        if template == 'example_template':# pragma: no cover"",
            ""            return 'example_source_code'# pragma: no cover"",
            ""        else:# pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            ""def mock_iter_loaders(self, template):# pragma: no cover"",
            ""    yield (None, MockLoader()) # pragma: no cover"",
            ""self = type('Mock', (object,), {'_iter_loaders': mock_iter_loaders})() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    }
]",2,3166,0.001583,1478,0.002217,0.0037999999999999
"When trying to execute the code snippet with the provided imports and initialization, the following error happens:
# begin error message
Execution error at line 11:
    exit(loader.get_source(environment, template))
AttributeError: 'NoneType' object has no attribute 'get_source'
# end error message

Please, provide self-contained and concrete Python fixed values of the imports and initialization to solve the error and make the code snippet executable.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""from jinja2 import BaseLoader, Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:\n    def get_source(self, environment, template):\n        if template == 'example_template':\n            return 'example_template_source', template, lambda: True\n        else:\n            raise TemplateNotFound(template)"",
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: iter([(None, MockLoader())])})()"",
            ""template = 'example_template'"",
            ""environment = Environment(loader=BaseLoader())"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound, BaseLoader""
        ],
        ""initialization"": [
            ""class MockLoader(BaseLoader):\n    def get_source(self, environment, template):\n        if template == 'example_template':\n            return 'example source', None, None\n        else:\n            raise TemplateNotFound(template)"",
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: iter([(None, MockLoader())])})()"",
            ""template = 'example_template'"",
            ""environment = Environment(loader=MockLoader())"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound, BaseLoader""
        ],
        ""initialization"": [
            ""class MockLoader(BaseLoader):"",
            ""    def get_source(self, environment: Environment, template: str):"",
            ""        if template == 'example_template':"",
            ""            return 'mock_source', None, None"",
            ""        else:"",
            ""            raise TemplateNotFound(template)"",
            ""def mock_iter_loaders(template: str):"",
            ""    return iter([(None, MockLoader())])"",
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: mock_iter_loaders(template)})()"",
            ""template = 'example_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound, BaseLoader, DictLoader""
        ],
        ""initialization"": [
            ""class MockLoader(BaseLoader):"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'example_template':"",
            ""            return 'template source', 'fake_path', lambda: True"",
            ""        raise TemplateNotFound(template)"",
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: iter([(None, MockLoader())])})()"",
            ""template = 'example_template'"",
            ""environment = Environment(loader=MockLoader())"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound, BaseLoader""
        ],
        ""initialization"": [
            ""class MockLoader(BaseLoader):\n    def get_source(self, environment, template):\n        if template == 'valid_template':\n            return 'template source', template, lambda: True\n        else:\n            raise TemplateNotFound(template)"",
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: [(None, MockLoader())]})()"",
            ""template = 'valid_template'"",
            ""environment = Environment(loader=MockLoader())"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound, BaseLoader""
        ],
        ""initialization"": [
            ""class MockLoader(BaseLoader):\n    def get_source(self, environment, template):\n        if template == 'example_template':\n            return 'example_source', template, lambda: True\n        raise TemplateNotFound(template)"",
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: iter([(None, MockLoader())])})()"",
            ""template = 'example_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound, BaseLoader""
        ],
        ""initialization"": [
            ""class MockLoader(BaseLoader):\n    def get_source(self, environment, template):\n        if template == 'example_template':\n            return 'example_source', 'example_path', True\n        else:\n            raise TemplateNotFound(template)"",
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: iter([(None, MockLoader())])})()"",
            ""template = 'example_template'"",
            ""environment = Environment(loader=MockLoader())"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound, BaseLoader""
        ],
        ""initialization"": [
            ""class MockLoader(BaseLoader):"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'example_template':"",
            ""            return 'mock source', 'filename', lambda: True"",
            ""        else:"",
            ""            raise TemplateNotFound(template)"",
            ""def mocked_iter_loaders(self, template):"",
            ""    return [(None, MockLoader())]"",
            ""self = type('Mock', (object,), {'_iter_loaders': mocked_iter_loaders})()"",
            ""template = 'example_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import BaseLoader, Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader(BaseLoader):\n    def get_source(self, environment, template):\n        if template == 'example_template':\n            return 'mock_source_code', 'mock_filename', lambda: True\n        raise TemplateNotFound(template)"",
            ""def mock_iter_loaders(template):\n    return [(None, MockLoader())]"",
            ""self = type('Mock', (object,), {'_iter_loaders': mock_iter_loaders})()"",
            ""template = 'example_template'"",
            ""environment = Environment(loader=MockLoader())"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound, BaseLoader""
        ],
        ""initialization"": [
            ""class MockLoader:\n    def get_source(self, environment, template):\n        if template == 'example_template':\n            return 'template source', template, lambda: True\n        raise TemplateNotFound(template)"",
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: iter([(None, MockLoader())])})()"",
            ""template = 'example_template'"",
            ""environment = Environment(loader=MockLoader())"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    }
]","[
    {
        ""imports"": [
            ""from jinja2 import BaseLoader, Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader:# pragma: no cover"",
            ""    def get_source(self, environment, template):# pragma: no cover"",
            ""        if template == 'example_template':# pragma: no cover"",
            ""            return 'example_template_source', template, lambda: True# pragma: no cover"",
            ""        else:# pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: iter([(None, MockLoader())])})() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = Environment(loader=BaseLoader()) # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound, BaseLoader # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader(BaseLoader):# pragma: no cover"",
            ""    def get_source(self, environment, template):# pragma: no cover"",
            ""        if template == 'example_template':# pragma: no cover"",
            ""            return 'example source', None, None# pragma: no cover"",
            ""        else:# pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: iter([(None, MockLoader())])})() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = Environment(loader=MockLoader()) # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound, BaseLoader # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader(BaseLoader): # pragma: no cover"",
            ""    def get_source(self, environment: Environment, template: str): # pragma: no cover"",
            ""        if template == 'example_template': # pragma: no cover"",
            ""            return 'mock_source', None, None # pragma: no cover"",
            ""        else: # pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            ""def mock_iter_loaders(template: str): # pragma: no cover"",
            ""    return iter([(None, MockLoader())]) # pragma: no cover"",
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: mock_iter_loaders(template)})() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound, BaseLoader, DictLoader # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader(BaseLoader): # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'example_template': # pragma: no cover"",
            ""            return 'template source', 'fake_path', lambda: True # pragma: no cover"",
            ""        raise TemplateNotFound(template) # pragma: no cover"",
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: iter([(None, MockLoader())])})() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = Environment(loader=MockLoader()) # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound, BaseLoader # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader(BaseLoader):# pragma: no cover"",
            ""    def get_source(self, environment, template):# pragma: no cover"",
            ""        if template == 'valid_template':# pragma: no cover"",
            ""            return 'template source', template, lambda: True# pragma: no cover"",
            ""        else:# pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: [(None, MockLoader())]})() # pragma: no cover"",
            ""template = 'valid_template' # pragma: no cover"",
            ""environment = Environment(loader=MockLoader()) # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound, BaseLoader # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader(BaseLoader):# pragma: no cover"",
            ""    def get_source(self, environment, template):# pragma: no cover"",
            ""        if template == 'example_template':# pragma: no cover"",
            ""            return 'example_source', template, lambda: True# pragma: no cover"",
            ""        raise TemplateNotFound(template) # pragma: no cover"",
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: iter([(None, MockLoader())])})() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound, BaseLoader # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader(BaseLoader):# pragma: no cover"",
            ""    def get_source(self, environment, template):# pragma: no cover"",
            ""        if template == 'example_template':# pragma: no cover"",
            ""            return 'example_source', 'example_path', True# pragma: no cover"",
            ""        else:# pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: iter([(None, MockLoader())])})() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = Environment(loader=MockLoader()) # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound, BaseLoader # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader(BaseLoader): # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'example_template': # pragma: no cover"",
            ""            return 'mock source', 'filename', lambda: True # pragma: no cover"",
            ""        else: # pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            ""def mocked_iter_loaders(self, template): # pragma: no cover"",
            ""    return [(None, MockLoader())] # pragma: no cover"",
            ""self = type('Mock', (object,), {'_iter_loaders': mocked_iter_loaders})() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import BaseLoader, Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader(BaseLoader):# pragma: no cover"",
            ""    def get_source(self, environment, template):# pragma: no cover"",
            ""        if template == 'example_template':# pragma: no cover"",
            ""            return 'mock_source_code', 'mock_filename', lambda: True# pragma: no cover"",
            ""        raise TemplateNotFound(template) # pragma: no cover"",
            ""def mock_iter_loaders(template):# pragma: no cover"",
            ""    return [(None, MockLoader())] # pragma: no cover"",
            ""self = type('Mock', (object,), {'_iter_loaders': mock_iter_loaders})() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = Environment(loader=MockLoader()) # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound, BaseLoader # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader:# pragma: no cover"",
            ""    def get_source(self, environment, template):# pragma: no cover"",
            ""        if template == 'example_template':# pragma: no cover"",
            ""            return 'template source', template, lambda: True# pragma: no cover"",
            ""        raise TemplateNotFound(template) # pragma: no cover"",
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: iter([(None, MockLoader())])})() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = Environment(loader=MockLoader()) # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    }
]",2,3555,0.0017775,1590,0.002385,0.0041624999999999
"When trying to execute the code snippet with the provided imports and initialization, the following error happens:
# begin error message
Execution error at line 3:
    self = type('Mock', (object,), {'_iter_loaders': lambda self, template: [(None, self.MockLoader())]})() # pragma: no cover
AttributeError: 'Mock' object has no attribute 'MockLoader'
# end error message

Please, provide self-contained and concrete Python fixed values of the imports and initialization to solve the error and make the code snippet executable.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound, BaseLoader""
        ],
        ""initialization"": [
            ""class CustomLoader(BaseLoader):\n    def get_source(self, environment, template):\n        if template == 'example_template':\n            return 'template_source', None,\n        raise TemplateNotFound(template)"",
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: iter([(None, CustomLoader())])})()"",
            ""template = 'example_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:\n    def get_source(self, environment, template):\n        return 'example_source_code'"",
            ""self = type('MockSelf', (object,), {'_iter_loaders': lambda self, template: [(None, MockLoader())]})()"",
            ""template = 'example_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import BaseLoader, Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader(BaseLoader):\n    def get_source(self, environment, template):\n        if template == 'valid_template':\n            return 'template source', template, lambda: True\n        else:\n            raise TemplateNotFound(template)"",
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: [(None, MockLoader())]})()"",
            ""template = 'valid_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:\n    def get_source(self, environment, template):\n        return 'example_source_code'\n\nclass Mock:\n    def _iter_loaders(self, template):\n        return [(None, MockLoader())]\n\nself = Mock()"",
            ""template = 'example_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:\n    def get_source(self, environment, template):\n        if template == 'example_template':\n            return 'source_code'\n        else:\n            raise TemplateNotFound(template)"",
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: [(None, MockLoader())]})()"",
            ""template = 'example_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:\n    def get_source(self, environment, template):\n        if template == 'example_template':\n            return 'example_source_code', 'filename', lambda: True\n        else:\n            raise TemplateNotFound(template)"",
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: iter([(None, MockLoader())])})()"",
            ""template = 'example_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:\n    def get_source(self, environment, template):\n        return 'example_source_code'"",
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: [(None, MockLoader())]})()"",
            ""template = 'example_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:\n    def get_source(self, environment, template):\n        return 'example_source_code'"",
            ""self = type('Mock', (object,), {\n    '_iter_loaders': lambda self, template: [(None, MockLoader())]})()"",
            ""template = 'example_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class LoaderMock:\n    def get_source(self, environment, template):\n        return 'example_source_code'"",
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: [(None, LoaderMock())]})()"",
            ""template = 'example_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:\n    def get_source(self, environment, template):\n        if template == 'example_template':\n            return 'example_source_code'\n        else:\n            raise TemplateNotFound(template)"",
            ""def mock_iter_loaders(template):\n    return [(None, MockLoader())]"",
            ""self = type('Mock', (object,), {'_iter_loaders': mock_iter_loaders})()"",
            ""template = 'example_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    }
]","[
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound, BaseLoader # pragma: no cover""
        ],
        ""initialization"": [
            ""class CustomLoader(BaseLoader):# pragma: no cover"",
            ""    def get_source(self, environment, template):# pragma: no cover"",
            ""        if template == 'example_template':# pragma: no cover"",
            ""            return 'template_source', None,# pragma: no cover"",
            ""        raise TemplateNotFound(template) # pragma: no cover"",
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: iter([(None, CustomLoader())])})() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader:# pragma: no cover"",
            ""    def get_source(self, environment, template):# pragma: no cover"",
            ""        return 'example_source_code' # pragma: no cover"",
            ""self = type('MockSelf', (object,), {'_iter_loaders': lambda self, template: [(None, MockLoader())]})() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import BaseLoader, Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader(BaseLoader):# pragma: no cover"",
            ""    def get_source(self, environment, template):# pragma: no cover"",
            ""        if template == 'valid_template':# pragma: no cover"",
            ""            return 'template source', template, lambda: True# pragma: no cover"",
            ""        else:# pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: [(None, MockLoader())]})() # pragma: no cover"",
            ""template = 'valid_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader:# pragma: no cover"",
            ""    def get_source(self, environment, template):# pragma: no cover"",
            ""        return 'example_source_code'# pragma: no cover"",
            ""# pragma: no cover"",
            ""class Mock:# pragma: no cover"",
            ""    def _iter_loaders(self, template):# pragma: no cover"",
            ""        return [(None, MockLoader())]# pragma: no cover"",
            ""# pragma: no cover"",
            ""self = Mock() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader:# pragma: no cover"",
            ""    def get_source(self, environment, template):# pragma: no cover"",
            ""        if template == 'example_template':# pragma: no cover"",
            ""            return 'source_code'# pragma: no cover"",
            ""        else:# pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: [(None, MockLoader())]})() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader:# pragma: no cover"",
            ""    def get_source(self, environment, template):# pragma: no cover"",
            ""        if template == 'example_template':# pragma: no cover"",
            ""            return 'example_source_code', 'filename', lambda: True# pragma: no cover"",
            ""        else:# pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: iter([(None, MockLoader())])})() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader:# pragma: no cover"",
            ""    def get_source(self, environment, template):# pragma: no cover"",
            ""        return 'example_source_code' # pragma: no cover"",
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: [(None, MockLoader())]})() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader:# pragma: no cover"",
            ""    def get_source(self, environment, template):# pragma: no cover"",
            ""        return 'example_source_code' # pragma: no cover"",
            ""self = type('Mock', (object,), {# pragma: no cover"",
            ""    '_iter_loaders': lambda self, template: [(None, MockLoader())]})() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class LoaderMock:# pragma: no cover"",
            ""    def get_source(self, environment, template):# pragma: no cover"",
            ""        return 'example_source_code' # pragma: no cover"",
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: [(None, LoaderMock())]})() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader:# pragma: no cover"",
            ""    def get_source(self, environment, template):# pragma: no cover"",
            ""        if template == 'example_template':# pragma: no cover"",
            ""            return 'example_source_code'# pragma: no cover"",
            ""        else:# pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            ""def mock_iter_loaders(template):# pragma: no cover"",
            ""    return [(None, MockLoader())] # pragma: no cover"",
            ""self = type('Mock', (object,), {'_iter_loaders': mock_iter_loaders})() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    }
]",2,3972,0.001986,1327,0.0019905,0.0039765
"When trying to execute the code snippet with the provided imports and initialization, the following error happens:
# begin error message
Execution error at line 12:
    exit(loader.get_source(environment, template))
TypeError: <lambda>() takes 2 positional arguments but 3 were given
# end error message

Please, provide self-contained and concrete Python fixed values of the imports and initialization to solve the error and make the code snippet executable.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:\n    def get_source(self, environment, template):\n        return 'source_code_placeholder'"",
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: [(None, MockLoader())]})()"",
            ""template = 'example_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:\n    def get_source(self, environment, template):\n        return 'example_source_code'"",
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: [(None, MockLoader())]})()"",
            ""template = 'valid_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:\n    def get_source(self, environment, template):\n        return 'example_source_code'"",
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: [(None, MockLoader())]})()"",
            ""template = 'example_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:\n    def get_source(self, environment, template):\n        return 'example_source_code'"",
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: [(None, MockLoader())]})()"",
            ""template = 'example_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:\n    def get_source(self, environment, template):\n        return 'source_code_placeholder'"",
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: [(None, MockLoader())]})()"",
            ""template = 'example_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: [(None, type('Loader', (object,), {'get_source': lambda self, env, template: 'source_code_placeholder'})())]})()"",
            ""template = 'example_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: [(None, type('Loader', (object,), {'get_source': lambda self, env, template: 'source_code_placeholder'})())]})()"",
            ""template = 'example_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:\n    def get_source(self, environment, template):\n        return 'source_code_placeholder'"",
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: iter([(None, MockLoader())])})()"",
            ""template = 'example_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:\n    def get_source(self, environment, template):\n        return ('source_code_placeholder', 'filename_placeholder', 'uptodate_placeholder')"",
            ""class Mock:\n    def _iter_loaders(self, template):\n        yield None, MockLoader()"",
            ""self = Mock()"",
            ""template = 'example_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:\n    def get_source(self, environment, template):\n        return 'example_source_code'"",
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: [(None, MockLoader())]})()"",
            ""template = 'example_template'"",
            ""environment = Environment()"",
            ""TemplateNotFound = TemplateNotFound""
        ]
    }
]","[
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader:# pragma: no cover"",
            ""    def get_source(self, environment, template):# pragma: no cover"",
            ""        return 'source_code_placeholder' # pragma: no cover"",
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: [(None, MockLoader())]})() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader:# pragma: no cover"",
            ""    def get_source(self, environment, template):# pragma: no cover"",
            ""        return 'example_source_code' # pragma: no cover"",
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: [(None, MockLoader())]})() # pragma: no cover"",
            ""template = 'valid_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader:# pragma: no cover"",
            ""    def get_source(self, environment, template):# pragma: no cover"",
            ""        return 'example_source_code' # pragma: no cover"",
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: [(None, MockLoader())]})() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader:# pragma: no cover"",
            ""    def get_source(self, environment, template):# pragma: no cover"",
            ""        return 'example_source_code' # pragma: no cover"",
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: [(None, MockLoader())]})() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader:# pragma: no cover"",
            ""    def get_source(self, environment, template):# pragma: no cover"",
            ""        return 'source_code_placeholder' # pragma: no cover"",
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: [(None, MockLoader())]})() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: [(None, type('Loader', (object,), {'get_source': lambda self, env, template: 'source_code_placeholder'})())]})() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: [(None, type('Loader', (object,), {'get_source': lambda self, env, template: 'source_code_placeholder'})())]})() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader:# pragma: no cover"",
            ""    def get_source(self, environment, template):# pragma: no cover"",
            ""        return 'source_code_placeholder' # pragma: no cover"",
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: iter([(None, MockLoader())])})() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader:# pragma: no cover"",
            ""    def get_source(self, environment, template):# pragma: no cover"",
            ""        return ('source_code_placeholder', 'filename_placeholder', 'uptodate_placeholder') # pragma: no cover"",
            ""class Mock:# pragma: no cover"",
            ""    def _iter_loaders(self, template):# pragma: no cover"",
            ""        yield None, MockLoader() # pragma: no cover"",
            ""self = Mock() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader:# pragma: no cover"",
            ""    def get_source(self, environment, template):# pragma: no cover"",
            ""        return 'example_source_code' # pragma: no cover"",
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: [(None, MockLoader())]})() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""TemplateNotFound = TemplateNotFound # pragma: no cover""
        ]
    }
]",2,4387,0.0021935,1183,0.0017745,0.003968
"When trying to execute the code snippet with the provided imports and initialization, the lines with # uncovered are not executed.

# begin code snippet
for _srcobj, loader in self._iter_loaders(template):
    try:
        aux = loader.get_source(environment, template)
        exit(aux) # uncovered
    except TemplateNotFound:
        continue # uncovered
raise TemplateNotFound(template) # uncovered

# end code snippet

Please, provide self-contained and concrete Python modified values of the imports and initialization to execute one of the uncovered paths in the code snippet.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""from jinja2 import BaseLoader, Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader(BaseLoader):"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'exists':"",
            ""            return 'some source code'"",
            ""        raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        return [(None, MockLoader())]"",
            """",
            ""self = MockSelf()"",
            ""environment = Environment()"",
            ""template = 'missing'""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'exists_template':"",
            ""            return 'source code', 'filename', True"",
            ""        else:"",
            ""            raise TemplateNotFound(template)"",
            """",
            ""class MockEnv:"",
            ""    pass"",
            """",
            ""class SelfClass:"",
            ""    def _iter_loaders(self, template):"",
            ""        return [(None, MockLoader())]"",
            """",
            ""environment = MockEnv()"",
            ""template = 'nonexistent_template'"",
            ""self = SelfClass()""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import BaseLoader, Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader(BaseLoader):"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'not_found.html':"",
            ""            raise TemplateNotFound(template)"",
            ""        return ('source code', 'filename', lambda: False)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        return [(None, MockLoader())]"",
            """",
            ""environment = Environment()"",
            ""template = 'not_found.html'"",
            ""self = MockSelf()""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""environment = Environment()"",
            ""template = 'example_template'"",
            ""MockLoader = type('MockLoader', (object,), {'get_source': lambda self, env, tmpl: (tmpl == 'example_template' and ('', None, None)) or raise TemplateNotFound(tmpl) })"",
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, tmpl: (yield (None, MockLoader()),), '__init__': lambda self: None})()""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment"",
            ""from jinja2 import TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'test_template':"",
            ""            return 'template source code'"",
            ""        raise TemplateNotFound(template)"",
            """",
            ""def mock_iter_loaders(template):"",
            ""    return [(object(), MockLoader())]"",
            """",
            ""template = 'test_template'"",
            ""environment = Environment()"",
            ""self = type('Mock', (object,), {'_iter_loaders': mock_iter_loaders})()""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound""
        ],
        ""initialization"": [
            ""environment = None"",
            ""template = 'example_template'"",
            ""self = type('Mock', (object,), dict(_iter_loaders=lambda x: [(object(), type('Loader', (object,), dict(get_source=lambda env, tmpl: tmpl))())]))()""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""environment = Environment()"",
            ""class MockLoader:\n    def get_source(self, environment, template):\n        if template == 'existing_template':\n            return 'template source'\n        else:\n            raise TemplateNotFound(template)"",
            ""class MockSelf:\n    def __init__(self):\n        self.loaders = [MockLoader()]\n    def _iter_loaders(self, template):\n        for loader in self.loaders:\n            yield None, loader"",
            ""self = MockSelf()"",
            ""template = 'non_existing_template'""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound"",
            ""from types import SimpleNamespace""
        ],
        ""initialization"": [
            ""loader = type('MockLoader', (object,), {'get_source': lambda self, env, tmpl: 'source'})()"",
            ""self = SimpleNamespace(_iter_loaders=lambda tmpl: [(None, loader)])"",
            ""environment = 'mock_environment'"",
            ""template = 'mock_template'""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'exists':"",
            ""            return 'source code'"",
            ""        else:"",
            ""            raise TemplateNotFound(template)"",
            """",
            ""class Mock:"",
            ""    def _iter_loaders(self, template):"",
            ""        yield 'mock_source_object', MockLoader()"",
            """",
            ""template = 'exists'"",
            ""environment = Environment()"",
            ""self = Mock()""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'found_template':"",
            ""            return 'fake_source_code'"",
            ""        else:"",
            ""            raise TemplateNotFound(template)"",
            """",
            ""class MockEnvironment:"",
            ""    pass"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        return [({}, MockLoader())]"",
            """",
            ""self = MockSelf()"",
            ""environment = MockEnvironment()"",
            ""template = 'found_template'""
        ]
    }
]","[
    {
        ""imports"": [
            ""from jinja2 import BaseLoader, Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader(BaseLoader): # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'exists': # pragma: no cover"",
            ""            return 'some source code' # pragma: no cover"",
            ""        raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        return [(None, MockLoader())] # pragma: no cover"",
            "" # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""template = 'missing' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'exists_template': # pragma: no cover"",
            ""            return 'source code', 'filename', True # pragma: no cover"",
            ""        else: # pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockEnv: # pragma: no cover"",
            ""    pass # pragma: no cover"",
            "" # pragma: no cover"",
            ""class SelfClass: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        return [(None, MockLoader())] # pragma: no cover"",
            "" # pragma: no cover"",
            ""environment = MockEnv() # pragma: no cover"",
            ""template = 'nonexistent_template' # pragma: no cover"",
            ""self = SelfClass() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import BaseLoader, Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader(BaseLoader): # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'not_found.html': # pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            ""        return ('source code', 'filename', lambda: False) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        return [(None, MockLoader())] # pragma: no cover"",
            "" # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""template = 'not_found.html' # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""environment = Environment() # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment # pragma: no cover"",
            ""from jinja2 import TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'test_template': # pragma: no cover"",
            ""            return 'template source code' # pragma: no cover"",
            ""        raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""def mock_iter_loaders(template): # pragma: no cover"",
            ""    return [(object(), MockLoader())] # pragma: no cover"",
            "" # pragma: no cover"",
            ""template = 'test_template' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""self = type('Mock', (object,), {'_iter_loaders': mock_iter_loaders})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""environment = None # pragma: no cover"",
            ""template = 'example_template' # pragma: no cover"",
            ""self = type('Mock', (object,), dict(_iter_loaders=lambda x: [(object(), type('Loader', (object,), dict(get_source=lambda env, tmpl: tmpl))())]))() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""environment = Environment() # pragma: no cover"",
            ""class MockLoader:# pragma: no cover"",
            ""    def get_source(self, environment, template):# pragma: no cover"",
            ""        if template == 'existing_template':# pragma: no cover"",
            ""            return 'template source'# pragma: no cover"",
            ""        else:# pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            ""class MockSelf:# pragma: no cover"",
            ""    def __init__(self):# pragma: no cover"",
            ""        self.loaders = [MockLoader()]# pragma: no cover"",
            ""    def _iter_loaders(self, template):# pragma: no cover"",
            ""        for loader in self.loaders:# pragma: no cover"",
            ""            yield None, loader # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover"",
            ""template = 'non_existing_template' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound # pragma: no cover"",
            ""from types import SimpleNamespace # pragma: no cover""
        ],
        ""initialization"": [
            ""loader = type('MockLoader', (object,), {'get_source': lambda self, env, tmpl: 'source'})() # pragma: no cover"",
            ""self = SimpleNamespace(_iter_loaders=lambda tmpl: [(None, loader)]) # pragma: no cover"",
            ""environment = 'mock_environment' # pragma: no cover"",
            ""template = 'mock_template' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'exists': # pragma: no cover"",
            ""            return 'source code' # pragma: no cover"",
            ""        else: # pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class Mock: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        yield 'mock_source_object', MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""template = 'exists' # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""self = Mock() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'found_template': # pragma: no cover"",
            ""            return 'fake_source_code' # pragma: no cover"",
            ""        else: # pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockEnvironment: # pragma: no cover"",
            ""    pass # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        return [({}, MockLoader())] # pragma: no cover"",
            "" # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover"",
            ""environment = MockEnvironment() # pragma: no cover"",
            ""template = 'found_template' # pragma: no cover""
        ]
    }
]",3,348,0.000174,1409,0.0021135,0.0022875
"When trying to execute the code snippet with the provided imports and initialization, the lines with # uncovered are not executed.

# begin code snippet
for _srcobj, loader in self._iter_loaders(template):
    try:
        aux = loader.get_source(environment, template)
        exit(aux) # uncovered
    except TemplateNotFound:
        continue # uncovered
raise TemplateNotFound(template) # uncovered

# end code snippet

Please, provide self-contained and concrete Python modified values of the imports and initialization to execute one of the uncovered paths in the code snippet.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'found_template':"",
            ""            return 'fake_source_code', None, lambda: True"",
            ""        else:"",
            ""            raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        yield 'mock_source_object', MockLoader()"",
            """",
            ""class MockEnvironment:"",
            ""    pass"",
            """",
            ""self = MockSelf()"",
            ""environment = MockEnvironment()"",
            ""template = 'found_template'""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'found_template':"",
            ""            return 'fake_source_code'"",
            ""        else:"",
            ""            raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        return [(None, MockLoader())]"",
            """",
            ""environment = Environment()"",
            ""template = 'not_found_template'"",
            ""self = MockSelf()""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'existent_template':"",
            ""            return 'template source code', 'filename', lambda: True"",
            ""        raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        yield None, MockLoader()"",
            """",
            ""self = MockSelf()"",
            ""environment = Environment()"",
            ""template = 'nonexistent_template'""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'exists':"",
            ""            return 'source code'"",
            ""        else:"",
            ""            raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        return [(None, MockLoader())]"",
            """",
            ""environment = Environment()"",
            ""template = 'exists'"",
            ""self = MockSelf()""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'missing_template':"",
            ""            raise TemplateNotFound(template)"",
            ""        return 'some source code'"",
            """",
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: [(None, MockLoader())]})()"",
            ""environment = Environment()"",
            ""template = 'missing_template'""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'nonexistent_template':"",
            ""            raise TemplateNotFound(template)"",
            ""        return 'fake_source_code', 'fake_filename', None"",
            """",
            ""class MockEnvironment:"",
            ""    pass"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        return [('mock_source_object', MockLoader())]"",
            """",
            ""self = MockSelf()"",
            ""environment = MockEnvironment()"",
            ""template = 'nonexistent_template'""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import BaseLoader, Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader(BaseLoader):"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'exists':"",
            ""            return 'source code'"",
            ""        raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        return [(None, MockLoader())]"",
            """",
            ""self = MockSelf()"",
            ""environment = Environment()"",
            ""template = 'nonexistent'""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import BaseLoader, Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader(BaseLoader):"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'missing':"",
            ""            raise TemplateNotFound(template)"",
            ""        return ('source', 'filename', lambda: True)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        return [(None, MockLoader())]"",
            """",
            ""self = MockSelf()"",
            ""environment = Environment()"",
            ""template = 'existing'""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import BaseLoader, Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader(BaseLoader):"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'exists':"",
            ""            return 'fake_source_code', 'filename', lambda: True"",
            ""        raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        yield None, MockLoader()"",
            """",
            ""self = MockSelf()"",
            ""environment = Environment()"",
            ""template = 'exists'""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'existing_template':"",
            ""            return 'template source'"",
            ""        else:"",
            ""            raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        return [(None, MockLoader())]"",
            """",
            ""environment = Environment()"",
            ""template = 'non_existing_template'"",
            ""self = MockSelf()""
        ]
    }
]","[
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'found_template': # pragma: no cover"",
            ""            return 'fake_source_code', None, lambda: True # pragma: no cover"",
            ""        else: # pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        yield 'mock_source_object', MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockEnvironment: # pragma: no cover"",
            ""    pass # pragma: no cover"",
            "" # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover"",
            ""environment = MockEnvironment() # pragma: no cover"",
            ""template = 'found_template' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'found_template': # pragma: no cover"",
            ""            return 'fake_source_code' # pragma: no cover"",
            ""        else: # pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        return [(None, MockLoader())] # pragma: no cover"",
            "" # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""template = 'not_found_template' # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'existent_template': # pragma: no cover"",
            ""            return 'template source code', 'filename', lambda: True # pragma: no cover"",
            ""        raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        yield None, MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""template = 'nonexistent_template' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'exists': # pragma: no cover"",
            ""            return 'source code' # pragma: no cover"",
            ""        else: # pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        return [(None, MockLoader())] # pragma: no cover"",
            "" # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""template = 'exists' # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'missing_template': # pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            ""        return 'some source code' # pragma: no cover"",
            "" # pragma: no cover"",
            ""self = type('Mock', (object,), {'_iter_loaders': lambda self, template: [(None, MockLoader())]})() # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""template = 'missing_template' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'nonexistent_template': # pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            ""        return 'fake_source_code', 'fake_filename', None # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockEnvironment: # pragma: no cover"",
            ""    pass # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        return [('mock_source_object', MockLoader())] # pragma: no cover"",
            "" # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover"",
            ""environment = MockEnvironment() # pragma: no cover"",
            ""template = 'nonexistent_template' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import BaseLoader, Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader(BaseLoader): # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'exists': # pragma: no cover"",
            ""            return 'source code' # pragma: no cover"",
            ""        raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        return [(None, MockLoader())] # pragma: no cover"",
            "" # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""template = 'nonexistent' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import BaseLoader, Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader(BaseLoader): # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'missing': # pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            ""        return ('source', 'filename', lambda: True) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        return [(None, MockLoader())] # pragma: no cover"",
            "" # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""template = 'existing' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import BaseLoader, Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader(BaseLoader): # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'exists': # pragma: no cover"",
            ""            return 'fake_source_code', 'filename', lambda: True # pragma: no cover"",
            ""        raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        yield None, MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""template = 'exists' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'existing_template': # pragma: no cover"",
            ""            return 'template source' # pragma: no cover"",
            ""        else: # pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        return [(None, MockLoader())] # pragma: no cover"",
            "" # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""template = 'non_existing_template' # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover""
        ]
    }
]",3,2082,0.001041,1483,0.0022245,0.0032655
"When trying to execute the code snippet with the provided imports and initialization, the lines with # uncovered are not executed.

# begin code snippet
for _srcobj, loader in self._iter_loaders(template):
    try:
        aux = loader.get_source(environment, template)
        exit(aux) # uncovered
    except TemplateNotFound:
        continue # uncovered
raise TemplateNotFound(template) # uncovered

# end code snippet

Please, provide self-contained and concrete Python modified values of the imports and initialization to execute one of the uncovered paths in the code snippet.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'existent_template':"",
            ""            return 'template source code'"",
            ""        else:"",
            ""            raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        return [(None, MockLoader())]"",
            """",
            ""environment = Environment()"",
            ""template = 'nonexistent_template'"",
            ""self = MockSelf()""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import BaseLoader, Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader(BaseLoader):"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'exists_template':"",
            ""            return 'source code'"",
            ""        else:"",
            ""            raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        return [(None, MockLoader())]"",
            """",
            ""self = MockSelf()"",
            ""environment = Environment()"",
            ""template = 'exists_template'""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'existing_template':"",
            ""            return 'template source code'"",
            ""        else:"",
            ""            raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        yield None, MockLoader()"",
            """",
            ""class MockEnvironment:"",
            ""    pass"",
            """",
            ""self = MockSelf()"",
            ""environment = MockEnvironment()"",
            ""template = 'existing_template'""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'test_template':"",
            ""            return 'template source', 'filename', lambda: True"",
            ""        else:"",
            ""            raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        yield None, MockLoader()"",
            """",
            ""environment = Environment()"",
            ""template = 'test_template'"",
            ""self = MockSelf()""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        yield None, MockLoader()"",
            """",
            ""environment = 'mock_environment'"",
            ""template = 'nonexistent_template'"",
            ""self = MockSelf()""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'missing_template':"",
            ""            raise TemplateNotFound(template)"",
            ""        return 'some source code'"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        return [(None, MockLoader())]"",
            """",
            ""environment = Environment()"",
            ""template = 'missing_template'"",
            ""self = MockSelf()""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'existing_template':"",
            ""            return 'source code', 'filename', 'uptodatefunc'"",
            ""        else:"",
            ""            raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        yield 'source_object', MockLoader()"",
            """",
            ""self = MockSelf()"",
            ""environment = Environment()"",
            ""template = 'existing_template'""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'found_template':"",
            ""            return 'template source code'"",
            ""        raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        yield 'mock_source_object', MockLoader()"",
            """",
            ""environment = None"",
            ""template = 'found_template'"",
            ""self = MockSelf()""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'exists':"",
            ""            return 'source code', 'filename', lambda: True"",
            ""        else:"",
            ""            raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        yield None, MockLoader()"",
            """",
            ""self = MockSelf()"",
            ""environment = Environment()"",
            ""template = 'nonexistent_template'""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound""
        ],
        ""initialization"": [
            ""class Loader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'found_template':"",
            ""            return 'source_code'"",
            ""        raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        return [(None, Loader())]"",
            """",
            ""environment = None"",
            ""template = 'found_template'"",
            ""self = MockSelf()""
        ]
    }
]","[
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'existent_template': # pragma: no cover"",
            ""            return 'template source code' # pragma: no cover"",
            ""        else: # pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        return [(None, MockLoader())] # pragma: no cover"",
            "" # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""template = 'nonexistent_template' # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import BaseLoader, Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader(BaseLoader): # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'exists_template': # pragma: no cover"",
            ""            return 'source code' # pragma: no cover"",
            ""        else: # pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        return [(None, MockLoader())] # pragma: no cover"",
            "" # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""template = 'exists_template' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'existing_template': # pragma: no cover"",
            ""            return 'template source code' # pragma: no cover"",
            ""        else: # pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        yield None, MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockEnvironment: # pragma: no cover"",
            ""    pass # pragma: no cover"",
            "" # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover"",
            ""environment = MockEnvironment() # pragma: no cover"",
            ""template = 'existing_template' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'test_template': # pragma: no cover"",
            ""            return 'template source', 'filename', lambda: True # pragma: no cover"",
            ""        else: # pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        yield None, MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""template = 'test_template' # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        yield None, MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""environment = 'mock_environment' # pragma: no cover"",
            ""template = 'nonexistent_template' # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'missing_template': # pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            ""        return 'some source code' # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        return [(None, MockLoader())] # pragma: no cover"",
            "" # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""template = 'missing_template' # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'existing_template': # pragma: no cover"",
            ""            return 'source code', 'filename', 'uptodatefunc' # pragma: no cover"",
            ""        else: # pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        yield 'source_object', MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""template = 'existing_template' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'found_template': # pragma: no cover"",
            ""            return 'template source code' # pragma: no cover"",
            ""        raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        yield 'mock_source_object', MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""environment = None # pragma: no cover"",
            ""template = 'found_template' # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'exists': # pragma: no cover"",
            ""            return 'source code', 'filename', lambda: True # pragma: no cover"",
            ""        else: # pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        yield None, MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""template = 'nonexistent_template' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class Loader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'found_template': # pragma: no cover"",
            ""            return 'source_code' # pragma: no cover"",
            ""        raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        return [(None, Loader())] # pragma: no cover"",
            "" # pragma: no cover"",
            ""environment = None # pragma: no cover"",
            ""template = 'found_template' # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover""
        ]
    }
]",3,3890,0.001945,1438,0.002157,0.004102
"When trying to execute the code snippet with the provided imports and initialization, the lines with # uncovered are not executed.

# begin code snippet
for _srcobj, loader in self._iter_loaders(template):
    try:
        aux = loader.get_source(environment, template)
        exit(aux) # uncovered
    except TemplateNotFound:
        continue # uncovered
raise TemplateNotFound(template) # uncovered

# end code snippet

Please, provide self-contained and concrete Python modified values of the imports and initialization to execute one of the uncovered paths in the code snippet.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'existing_template':"",
            ""            return 'source code'"",
            ""        else:"",
            ""            raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        return [(None, MockLoader())]"",
            """",
            ""environment = Environment()"",
            ""template = 'nonexistent_template'"",
            ""self = MockSelf()""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        yield None, MockLoader()"",
            """",
            ""environment = Environment()"",
            ""template = 'nonexistent_template'"",
            ""self = MockSelf()""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'exists':"",
            ""            return 'source code'"",
            ""        else:"",
            ""            raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        yield None, MockLoader()"",
            """",
            ""environment = Environment()"",
            ""template = 'exists'"",
            ""self = MockSelf()""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'existent_template':"",
            ""            return 'template source code'"",
            ""        else:"",
            ""            raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        yield None, MockLoader()"",
            """",
            ""template = 'existent_template'"",
            ""environment = None"",
            ""self = MockSelf()""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'existent_template':"",
            ""            return 'template source code', 'filename', lambda: True"",
            ""        else:"",
            ""            raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        yield None, MockLoader()"",
            """",
            ""class MockEnvironment:"",
            ""    pass"",
            """",
            ""self = MockSelf()"",
            ""environment = MockEnvironment()"",
            ""template = 'existent_template'""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'found_template':"",
            ""            return 'source code'"",
            ""        else:"",
            ""            raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        yield 'mock_source_object', MockLoader()"",
            """",
            ""environment = Environment()"",
            ""template = 'found_template'"",
            ""self = MockSelf()""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'found_template':"",
            ""            return 'source_code', None, None"",
            ""        else:"",
            ""            raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        yield None, MockLoader()"",
            """",
            ""environment = Environment()"",
            ""template = 'found_template'"",
            ""self = MockSelf()""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'missing_template':"",
            ""            raise TemplateNotFound(template)"",
            ""        return 'source code'"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        return [(None, MockLoader())]"",
            """",
            ""environment = Environment()"",
            ""template = 'missing_template'"",
            ""self = MockSelf()""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'existent_template':"",
            ""            return 'template source code', 'filename', lambda: True"",
            ""        else:"",
            ""            raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        yield 'mock_source_object', MockLoader()"",
            """",
            ""environment = Environment()"",
            ""template = 'existent_template'"",
            ""self = MockSelf()""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'existent_template':"",
            ""            return 'source_code'"",
            ""        raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        yield 'source_object', MockLoader()"",
            """",
            ""environment = 'mock_environment'"",
            ""template = 'existent_template'"",
            ""self = MockSelf()""
        ]
    }
]","[
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'existing_template': # pragma: no cover"",
            ""            return 'source code' # pragma: no cover"",
            ""        else: # pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        return [(None, MockLoader())] # pragma: no cover"",
            "" # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""template = 'nonexistent_template' # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        yield None, MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""template = 'nonexistent_template' # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'exists': # pragma: no cover"",
            ""            return 'source code' # pragma: no cover"",
            ""        else: # pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        yield None, MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""template = 'exists' # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'existent_template': # pragma: no cover"",
            ""            return 'template source code' # pragma: no cover"",
            ""        else: # pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        yield None, MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""template = 'existent_template' # pragma: no cover"",
            ""environment = None # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'existent_template': # pragma: no cover"",
            ""            return 'template source code', 'filename', lambda: True # pragma: no cover"",
            ""        else: # pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        yield None, MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockEnvironment: # pragma: no cover"",
            ""    pass # pragma: no cover"",
            "" # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover"",
            ""environment = MockEnvironment() # pragma: no cover"",
            ""template = 'existent_template' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'found_template': # pragma: no cover"",
            ""            return 'source code' # pragma: no cover"",
            ""        else: # pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        yield 'mock_source_object', MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""template = 'found_template' # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'found_template': # pragma: no cover"",
            ""            return 'source_code', None, None # pragma: no cover"",
            ""        else: # pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        yield None, MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""template = 'found_template' # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'missing_template': # pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            ""        return 'source code' # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        return [(None, MockLoader())] # pragma: no cover"",
            "" # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""template = 'missing_template' # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'existent_template': # pragma: no cover"",
            ""            return 'template source code', 'filename', lambda: True # pragma: no cover"",
            ""        else: # pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        yield 'mock_source_object', MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""template = 'existent_template' # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'existent_template': # pragma: no cover"",
            ""            return 'source_code' # pragma: no cover"",
            ""        raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        yield 'source_object', MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""environment = 'mock_environment' # pragma: no cover"",
            ""template = 'existent_template' # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover""
        ]
    }
]",3,5653,0.0028265,1436,0.002154,0.0049805
"When trying to execute the code snippet with the provided imports and initialization, the lines with # uncovered are not executed.

# begin code snippet
for _srcobj, loader in self._iter_loaders(template):
    try:
        aux = loader.get_source(environment, template)
        exit(aux) # uncovered
    except TemplateNotFound:
        continue # uncovered
raise TemplateNotFound(template) # uncovered

# end code snippet

Please, provide self-contained and concrete Python modified values of the imports and initialization to execute one of the uncovered paths in the code snippet.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'existent_template':"",
            ""            return 'source_code'"",
            ""        else:"",
            ""            raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        yield None, MockLoader()"",
            """",
            ""environment = None"",
            ""template = 'existent_template'"",
            ""self = MockSelf()""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'existent_template':"",
            ""            return 'source_code'"",
            ""        raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        yield 'source_object', MockLoader()"",
            """",
            ""template = 'existent_template'"",
            ""environment = 'mock_environment'"",
            ""self = MockSelf()""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'missing_template':"",
            ""            raise TemplateNotFound(template)"",
            ""        return 'source code', 'filename', lambda: True"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        yield None, MockLoader()"",
            """",
            ""template = 'missing_template'"",
            ""environment = 'mock_environment'"",
            ""self = MockSelf()""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        yield None, MockLoader()"",
            """",
            ""environment = Environment()"",
            ""template = 'nonexistent_template'"",
            ""self = MockSelf()""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'template_does_not_exist':"",
            ""            raise TemplateNotFound(template)"",
            ""        return 'source_code'"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        yield 'source_object', MockLoader()"",
            """",
            ""environment = 'mock_environment'"",
            ""template = 'template_does_not_exist'"",
            ""self = MockSelf()""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'existent_template':"",
            ""            return 'template source code'"",
            ""        else:"",
            ""            raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        yield None, MockLoader()"",
            """",
            ""environment = 'mock_environment'"",
            ""template = 'existent_template'"",
            ""self = MockSelf()""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        yield None, MockLoader()"",
            """",
            ""environment = None"",
            ""template = 'nonexistent_template'"",
            ""self = MockSelf()""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'missing_template':"",
            ""            raise TemplateNotFound(template)"",
            ""        return 'source code'"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        return [(None, MockLoader())]"",
            """",
            ""environment = Environment()"",
            ""template = 'missing_template'"",
            ""self = MockSelf()""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        yield None, MockLoader()"",
            """",
            ""environment = Environment()"",
            ""template = 'missing_template'"",
            ""self = MockSelf()""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'found_template':"",
            ""            return 'source_code'"",
            ""        else:"",
            ""            raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        yield 'mock_source_object', MockLoader()"",
            """",
            ""environment = Environment()"",
            ""template = 'found_template'"",
            ""self = MockSelf()""
        ]
    }
]","[
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'existent_template': # pragma: no cover"",
            ""            return 'source_code' # pragma: no cover"",
            ""        else: # pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        yield None, MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""environment = None # pragma: no cover"",
            ""template = 'existent_template' # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'existent_template': # pragma: no cover"",
            ""            return 'source_code' # pragma: no cover"",
            ""        raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        yield 'source_object', MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""template = 'existent_template' # pragma: no cover"",
            ""environment = 'mock_environment' # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'missing_template': # pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            ""        return 'source code', 'filename', lambda: True # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        yield None, MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""template = 'missing_template' # pragma: no cover"",
            ""environment = 'mock_environment' # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        yield None, MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""template = 'nonexistent_template' # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'template_does_not_exist': # pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            ""        return 'source_code' # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        yield 'source_object', MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""environment = 'mock_environment' # pragma: no cover"",
            ""template = 'template_does_not_exist' # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'existent_template': # pragma: no cover"",
            ""            return 'template source code' # pragma: no cover"",
            ""        else: # pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        yield None, MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""environment = 'mock_environment' # pragma: no cover"",
            ""template = 'existent_template' # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        yield None, MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""environment = None # pragma: no cover"",
            ""template = 'nonexistent_template' # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'missing_template': # pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            ""        return 'source code' # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        return [(None, MockLoader())] # pragma: no cover"",
            "" # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""template = 'missing_template' # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        yield None, MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""template = 'missing_template' # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'found_template': # pragma: no cover"",
            ""            return 'source_code' # pragma: no cover"",
            ""        else: # pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        yield 'mock_source_object', MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""template = 'found_template' # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover""
        ]
    }
]",3,7414,0.003707,1353,0.0020295,0.0057365
"When trying to execute the code snippet with the provided imports and initialization, the lines with # uncovered are not executed.

# begin code snippet
for _srcobj, loader in self._iter_loaders(template):
    try:
        aux = loader.get_source(environment, template)
        exit(aux) # uncovered
    except TemplateNotFound:
        continue # uncovered
raise TemplateNotFound(template) # uncovered

# end code snippet

Please, provide self-contained and concrete Python modified values of the imports and initialization to execute one of the uncovered paths in the code snippet.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""from jinja2 import Environment, BaseLoader, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader(BaseLoader):"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'missing_template':"",
            ""            raise TemplateNotFound(template)"",
            ""        return 'source code', None, None"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        return [(None, MockLoader())]"",
            """",
            ""environment = Environment()"",
            ""template = 'missing_template'"",
            ""self = MockSelf()""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        yield 'source_object', MockLoader()"",
            """",
            ""environment = Environment()"",
            ""template = 'not_found_template'"",
            ""self = MockSelf()""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'existent_template':"",
            ""            return 'source code'"",
            ""        else:"",
            ""            raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        yield 'mock_source_object', MockLoader()"",
            """",
            ""environment = Environment()"",
            ""template = 'nonexistent_template'"",
            ""self = MockSelf()""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'existing_template':"",
            ""            return 'source code'"",
            ""        raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        yield None, MockLoader()"",
            """",
            ""environment = Environment()"",
            ""template = 'existing_template'"",
            ""self = MockSelf()""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'existent_template':"",
            ""            return 'template source code'"",
            ""        else:"",
            ""            raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        yield None, MockLoader()"",
            """",
            ""environment = Environment()"",
            ""template = 'nonexistent_template'"",
            ""self = MockSelf()""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'existing_template':"",
            ""            return 'template source code'"",
            ""        else:"",
            ""            raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        yield None, MockLoader()"",
            """",
            ""environment = Environment()"",
            ""template = 'existing_template'"",
            ""self = MockSelf()""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        yield None, MockLoader()"",
            """",
            ""environment = Environment()"",
            ""template = 'nonexistent_template'"",
            ""self = MockSelf()""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'existent_template':"",
            ""            return 'source_code'"",
            ""        else:"",
            ""            raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        yield 'mock_source_object', MockLoader()"",
            """",
            ""environment = Environment()"",
            ""template = 'existent_template'"",
            ""self = MockSelf()""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'missing_template':"",
            ""            raise TemplateNotFound(template)"",
            ""        return 'source code'"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        return [(None, MockLoader())]"",
            """",
            ""environment = Environment()"",
            ""template = 'missing_template'"",
            ""self = MockSelf()""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        yield None, MockLoader()"",
            """",
            ""environment = 'mock_environment'"",
            ""template = 'some_template'"",
            ""self = MockSelf()""
        ]
    }
]","[
    {
        ""imports"": [
            ""from jinja2 import Environment, BaseLoader, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader(BaseLoader): # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'missing_template': # pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            ""        return 'source code', None, None # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        return [(None, MockLoader())] # pragma: no cover"",
            "" # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""template = 'missing_template' # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        yield 'source_object', MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""template = 'not_found_template' # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'existent_template': # pragma: no cover"",
            ""            return 'source code' # pragma: no cover"",
            ""        else: # pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        yield 'mock_source_object', MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""template = 'nonexistent_template' # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'existing_template': # pragma: no cover"",
            ""            return 'source code' # pragma: no cover"",
            ""        raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        yield None, MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""template = 'existing_template' # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'existent_template': # pragma: no cover"",
            ""            return 'template source code' # pragma: no cover"",
            ""        else: # pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        yield None, MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""template = 'nonexistent_template' # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'existing_template': # pragma: no cover"",
            ""            return 'template source code' # pragma: no cover"",
            ""        else: # pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        yield None, MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""template = 'existing_template' # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        yield None, MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""template = 'nonexistent_template' # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'existent_template': # pragma: no cover"",
            ""            return 'source_code' # pragma: no cover"",
            ""        else: # pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        yield 'mock_source_object', MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""template = 'existent_template' # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'missing_template': # pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            ""        return 'source code' # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        return [(None, MockLoader())] # pragma: no cover"",
            "" # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""template = 'missing_template' # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        yield None, MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""environment = 'mock_environment' # pragma: no cover"",
            ""template = 'some_template' # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover""
        ]
    }
]",3,9092,0.004546,1368,0.002052,0.006598
"When trying to execute the code snippet with the provided imports and initialization, the lines with # uncovered are not executed.

# begin code snippet
for _srcobj, loader in self._iter_loaders(template):
    try:
        aux = loader.get_source(environment, template)
        exit(aux) # uncovered
    except TemplateNotFound:
        continue # uncovered
raise TemplateNotFound(template) # uncovered

# end code snippet

Please, provide self-contained and concrete Python modified values of the imports and initialization to execute one of the uncovered paths in the code snippet.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'existent_template':"",
            ""            return 'source_code'"",
            ""        raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        yield 'source_object', MockLoader()"",
            """",
            ""environment = Environment()"",
            ""template = 'existent_template'"",
            ""self = MockSelf()""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, BaseLoader, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader(BaseLoader):"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'existing_template':"",
            ""            return 'source code', None, None"",
            ""        raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        yield None, MockLoader()"",
            """",
            ""environment = Environment()"",
            ""template = 'existing_template'"",
            ""self = MockSelf()""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'template_found':"",
            ""            return 'source_code'"",
            ""        raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        yield None, MockLoader()"",
            """",
            ""environment = None"",
            ""template = 'template_found'"",
            ""self = MockSelf()""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'existing_template':"",
            ""            return 'template source code', 'filename', 'uptodate'"",
            ""        raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        yield None, MockLoader()"",
            """",
            ""environment = Environment()"",
            ""template = 'existing_template'"",
            ""self = MockSelf()""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'existing_template':"",
            ""            return 'source_code', 'filename', lambda: True"",
            ""        raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        yield None, MockLoader()"",
            """",
            ""environment = 'mock_environment'"",
            ""template = 'existing_template'"",
            ""self = MockSelf()""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'existing_template':"",
            ""            return 'source code'"",
            ""        raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        yield 'mock_source_object', MockLoader()"",
            """",
            ""environment = Environment()"",
            ""template = 'existing_template'"",
            ""self = MockSelf()""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'valid_template':"",
            ""            return 'source code'"",
            ""        else:"",
            ""            raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        yield None, MockLoader()"",
            """",
            ""environment = Environment()"",
            ""template = 'valid_template'"",
            ""self = MockSelf()""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'existent_template':"",
            ""            return 'source_code'"",
            ""        else:"",
            ""            raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        yield None, MockLoader()"",
            """",
            ""environment = None"",
            ""template = 'existent_template'"",
            ""self = MockSelf()""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import BaseLoader, Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader(BaseLoader):"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'existing_template':"",
            ""            return 'source code', None, lambda: True"",
            ""        raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        yield None, MockLoader()"",
            """",
            ""environment = Environment()"",
            ""template = 'existing_template'"",
            ""self = MockSelf()""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'existing_template':"",
            ""            return 'source_code'"",
            ""        raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        yield None, MockLoader()"",
            """",
            ""environment = 'mock_environment'"",
            ""template = 'existing_template'"",
            ""self = MockSelf()""
        ]
    }
]","[
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'existent_template': # pragma: no cover"",
            ""            return 'source_code' # pragma: no cover"",
            ""        raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        yield 'source_object', MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""template = 'existent_template' # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, BaseLoader, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader(BaseLoader): # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'existing_template': # pragma: no cover"",
            ""            return 'source code', None, None # pragma: no cover"",
            ""        raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        yield None, MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""template = 'existing_template' # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'template_found': # pragma: no cover"",
            ""            return 'source_code' # pragma: no cover"",
            ""        raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        yield None, MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""environment = None # pragma: no cover"",
            ""template = 'template_found' # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'existing_template': # pragma: no cover"",
            ""            return 'template source code', 'filename', 'uptodate' # pragma: no cover"",
            ""        raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        yield None, MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""template = 'existing_template' # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'existing_template': # pragma: no cover"",
            ""            return 'source_code', 'filename', lambda: True # pragma: no cover"",
            ""        raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        yield None, MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""environment = 'mock_environment' # pragma: no cover"",
            ""template = 'existing_template' # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'existing_template': # pragma: no cover"",
            ""            return 'source code' # pragma: no cover"",
            ""        raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        yield 'mock_source_object', MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""template = 'existing_template' # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'valid_template': # pragma: no cover"",
            ""            return 'source code' # pragma: no cover"",
            ""        else: # pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        yield None, MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""template = 'valid_template' # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'existent_template': # pragma: no cover"",
            ""            return 'source_code' # pragma: no cover"",
            ""        else: # pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        yield None, MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""environment = None # pragma: no cover"",
            ""template = 'existent_template' # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import BaseLoader, Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader(BaseLoader): # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'existing_template': # pragma: no cover"",
            ""            return 'source code', None, lambda: True # pragma: no cover"",
            ""        raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        yield None, MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""template = 'existing_template' # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'existing_template': # pragma: no cover"",
            ""            return 'source_code' # pragma: no cover"",
            ""        raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        yield None, MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""environment = 'mock_environment' # pragma: no cover"",
            ""template = 'existing_template' # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover""
        ]
    }
]",3,10785,0.0053925,1425,0.0021375,0.00753
"When trying to execute the code snippet with the provided imports and initialization, the lines with # uncovered are not executed.

# begin code snippet
for _srcobj, loader in self._iter_loaders(template):
    try:
        aux = loader.get_source(environment, template)
        exit(aux) # uncovered
    except TemplateNotFound:
        continue # uncovered
raise TemplateNotFound(template) # uncovered

# end code snippet

Please, provide self-contained and concrete Python modified values of the imports and initialization to execute one of the uncovered paths in the code snippet.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'existing_template':"",
            ""            return 'source code', 'filename', lambda: True"",
            ""        raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        yield 'source_object', MockLoader()"",
            """",
            ""self = type('Mock', (object,), {'_iter_loaders': MockSelf._iter_loaders})()"",
            ""environment = Environment()"",
            ""template = 'existing_template'""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'valid_template':"",
            ""            return 'source_code'"",
            ""        raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        yield 'source_object', MockLoader()"",
            """",
            ""environment = 'mock_environment'"",
            ""template = 'valid_template'"",
            ""self = MockSelf()""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        yield 'mock_source_object', MockLoader()"",
            """",
            ""environment = Environment()"",
            ""template = 'nonexistent_template'"",
            ""self = MockSelf()""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'valid_template':"",
            ""            return 'source_code'"",
            ""        raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        yield 'source_object', MockLoader()"",
            """",
            ""environment = None"",
            ""template = 'valid_template'"",
            ""self = MockSelf()""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'existent_template':"",
            ""            return 'source code'"",
            ""        else:"",
            ""            raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        yield 'source_object', MockLoader()"",
            """",
            ""environment = 'mock_environment'"",
            ""template = 'existent_template'"",
            ""self = MockSelf()""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        yield 'mock_source_object', MockLoader()"",
            """",
            ""environment = 'mock_environment'"",
            ""template = 'missing_template'"",
            ""self = MockSelf()""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        yield 'source_object', MockLoader()"",
            """",
            ""environment = 'mock_environment'"",
            ""template = 'missing_template'"",
            ""self = MockSelf()""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'existing_template':"",
            ""            return 'template source code'"",
            ""        else:"",
            ""            raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        yield None, MockLoader()"",
            """",
            ""environment = 'mock_environment'"",
            ""template = 'existing_template'"",
            ""self = MockSelf()""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'valid_template':"",
            ""            return 'source_code'"",
            ""        else:"",
            ""            raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        yield None, MockLoader()"",
            """",
            ""environment = 'mock_environment'"",
            ""self = MockSelf()"",
            ""template = 'valid_template'""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'valid_template':"",
            ""            return 'source code'"",
            ""        else:"",
            ""            raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        yield 'source_object', MockLoader()"",
            """",
            ""environment = None"",
            ""template = 'valid_template'"",
            ""self = MockSelf()""
        ]
    }
]","[
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'existing_template': # pragma: no cover"",
            ""            return 'source code', 'filename', lambda: True # pragma: no cover"",
            ""        raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        yield 'source_object', MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""self = type('Mock', (object,), {'_iter_loaders': MockSelf._iter_loaders})() # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""template = 'existing_template' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'valid_template': # pragma: no cover"",
            ""            return 'source_code' # pragma: no cover"",
            ""        raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        yield 'source_object', MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""environment = 'mock_environment' # pragma: no cover"",
            ""template = 'valid_template' # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        yield 'mock_source_object', MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""template = 'nonexistent_template' # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'valid_template': # pragma: no cover"",
            ""            return 'source_code' # pragma: no cover"",
            ""        raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        yield 'source_object', MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""environment = None # pragma: no cover"",
            ""template = 'valid_template' # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'existent_template': # pragma: no cover"",
            ""            return 'source code' # pragma: no cover"",
            ""        else: # pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        yield 'source_object', MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""environment = 'mock_environment' # pragma: no cover"",
            ""template = 'existent_template' # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        yield 'mock_source_object', MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""environment = 'mock_environment' # pragma: no cover"",
            ""template = 'missing_template' # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        yield 'source_object', MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""environment = 'mock_environment' # pragma: no cover"",
            ""template = 'missing_template' # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'existing_template': # pragma: no cover"",
            ""            return 'template source code' # pragma: no cover"",
            ""        else: # pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        yield None, MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""environment = 'mock_environment' # pragma: no cover"",
            ""template = 'existing_template' # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'valid_template': # pragma: no cover"",
            ""            return 'source_code' # pragma: no cover"",
            ""        else: # pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        yield None, MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""environment = 'mock_environment' # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover"",
            ""template = 'valid_template' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'valid_template': # pragma: no cover"",
            ""            return 'source code' # pragma: no cover"",
            ""        else: # pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        yield 'source_object', MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""environment = None # pragma: no cover"",
            ""template = 'valid_template' # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover""
        ]
    }
]",3,10801,0.0054005,1376,0.002064,0.0074645
"When trying to execute the code snippet with the provided imports and initialization, the lines with # uncovered are not executed.

# begin code snippet
for _srcobj, loader in self._iter_loaders(template):
    try:
        aux = loader.get_source(environment, template)
        exit(aux) # uncovered
    except TemplateNotFound:
        continue # uncovered
raise TemplateNotFound(template) # uncovered

# end code snippet

Please, provide self-contained and concrete Python modified values of the imports and initialization to execute one of the uncovered paths in the code snippet.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'existing_template':"",
            ""            return 'template source code'"",
            ""        else:"",
            ""            raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        yield None, MockLoader()"",
            """",
            ""self = MockSelf()"",
            ""environment = Environment()"",
            ""template = 'existing_template'""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'existent_template':"",
            ""            return 'source code'"",
            ""        raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        yield 'source_object', MockLoader()"",
            """",
            ""template = 'existent_template'"",
            ""environment = 'mock_environment'"",
            ""self = type('Mock', (object,), {'_iter_loaders': MockSelf._iter_loaders})()""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'valid_template':"",
            ""            return 'source code'"",
            ""        raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        yield 'source_object', MockLoader()"",
            """",
            ""environment = None"",
            ""template = 'valid_template'"",
            ""self = MockSelf()""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'existent_template':"",
            ""            return 'source_code', 'filename', lambda: True"",
            ""        else:"",
            ""            raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        yield None, MockLoader()"",
            """",
            ""self = type('Mock', (object,), {'_iter_loaders': MockSelf._iter_loaders})()"",
            ""environment = Environment()"",
            ""template = 'existent_template'""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'existent_template':"",
            ""            return 'source_code'"",
            ""        else:"",
            ""            raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        yield 'mock_source_object', MockLoader()"",
            """",
            ""environment = Environment()"",
            ""template = 'existent_template'"",
            ""self = MockSelf()""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'template_does_not_exist':"",
            ""            raise TemplateNotFound(template)"",
            ""        return 'source_code'"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        yield 'source_object', MockLoader()"",
            """",
            ""environment = 'mock_environment'"",
            ""template = 'template_does_not_exist'"",
            ""self = MockSelf()""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'existing_template':"",
            ""            return 'template source code'"",
            ""        else:"",
            ""            raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        yield None, MockLoader()"",
            """",
            ""environment = Environment()"",
            ""template = 'existing_template'"",
            ""self = MockSelf()""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'existing_template':"",
            ""            return 'source_code'"",
            ""        else:"",
            ""            raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        yield 'source_object', MockLoader()"",
            """",
            ""environment = 'mock_environment'"",
            ""template = 'existing_template'"",
            ""self = MockSelf()""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'existing_template':"",
            ""            return 'template source code', 'filename', 'uptodatefunc'"",
            ""        else:"",
            ""            raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        yield None, MockLoader()"",
            """",
            ""self = type('Mock', (object,), {'_iter_loaders': MockSelf._iter_loaders})()"",
            ""environment = Environment()"",
            ""template = 'existing_template'""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'existing_template':"",
            ""            return 'source_code'"",
            ""        else:"",
            ""            raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        yield None, MockLoader()"",
            """",
            ""environment = 'mock_environment'"",
            ""template = 'existing_template'"",
            ""self = MockSelf()""
        ]
    }
]","[
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'existing_template': # pragma: no cover"",
            ""            return 'template source code' # pragma: no cover"",
            ""        else: # pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        yield None, MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""template = 'existing_template' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'existent_template': # pragma: no cover"",
            ""            return 'source code' # pragma: no cover"",
            ""        raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        yield 'source_object', MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""template = 'existent_template' # pragma: no cover"",
            ""environment = 'mock_environment' # pragma: no cover"",
            ""self = type('Mock', (object,), {'_iter_loaders': MockSelf._iter_loaders})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'valid_template': # pragma: no cover"",
            ""            return 'source code' # pragma: no cover"",
            ""        raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        yield 'source_object', MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""environment = None # pragma: no cover"",
            ""template = 'valid_template' # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'existent_template': # pragma: no cover"",
            ""            return 'source_code', 'filename', lambda: True # pragma: no cover"",
            ""        else: # pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        yield None, MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""self = type('Mock', (object,), {'_iter_loaders': MockSelf._iter_loaders})() # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""template = 'existent_template' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'existent_template': # pragma: no cover"",
            ""            return 'source_code' # pragma: no cover"",
            ""        else: # pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        yield 'mock_source_object', MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""template = 'existent_template' # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'template_does_not_exist': # pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            ""        return 'source_code' # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        yield 'source_object', MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""environment = 'mock_environment' # pragma: no cover"",
            ""template = 'template_does_not_exist' # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'existing_template': # pragma: no cover"",
            ""            return 'template source code' # pragma: no cover"",
            ""        else: # pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        yield None, MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""template = 'existing_template' # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'existing_template': # pragma: no cover"",
            ""            return 'source_code' # pragma: no cover"",
            ""        else: # pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        yield 'source_object', MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""environment = 'mock_environment' # pragma: no cover"",
            ""template = 'existing_template' # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'existing_template': # pragma: no cover"",
            ""            return 'template source code', 'filename', 'uptodatefunc' # pragma: no cover"",
            ""        else: # pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        yield None, MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""self = type('Mock', (object,), {'_iter_loaders': MockSelf._iter_loaders})() # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""template = 'existing_template' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'existing_template': # pragma: no cover"",
            ""            return 'source_code' # pragma: no cover"",
            ""        else: # pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        yield None, MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""environment = 'mock_environment' # pragma: no cover"",
            ""template = 'existing_template' # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover""
        ]
    }
]",3,10694,0.005347,1498,0.002247,0.007594
"When trying to execute the code snippet with the provided imports and initialization, the lines with # uncovered are not executed.

# begin code snippet
for _srcobj, loader in self._iter_loaders(template):
    try:
        aux = loader.get_source(environment, template)
        exit(aux) # uncovered
    except TemplateNotFound:
        continue # uncovered
raise TemplateNotFound(template) # uncovered

# end code snippet

Please, provide self-contained and concrete Python modified values of the imports and initialization to execute one of the uncovered paths in the code snippet.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'template_exists':"",
            ""            return 'source code'"",
            ""        else:"",
            ""            raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        yield None, MockLoader()"",
            """",
            ""environment = None"",
            ""template = 'template_exists'"",
            ""self = MockSelf()""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'missing_template':"",
            ""            raise TemplateNotFound(template)"",
            ""        return 'source code', None, None"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        return [(None, MockLoader())]"",
            """",
            ""environment = Environment()"",
            ""template = 'missing_template'"",
            ""self = MockSelf()""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'valid_template':"",
            ""            return 'source_code'"",
            ""        else:"",
            ""            raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        yield None, MockLoader()"",
            """",
            ""environment = 'mock_environment'"",
            ""template = 'valid_template'"",
            ""self = MockSelf()""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'valid_template':"",
            ""            return 'source_code'"",
            ""        else:"",
            ""            raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        yield 'mock_source_object', MockLoader()"",
            """",
            ""self = MockSelf()"",
            ""environment = Environment()"",
            ""template = 'valid_template'""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'existing_template':"",
            ""            return 'source code'"",
            ""        else:"",
            ""            raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        yield None, MockLoader()"",
            """",
            ""self = MockSelf()"",
            ""environment = Environment()"",
            ""template = 'existing_template'""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'exists':"",
            ""            return 'source_code'"",
            ""        else:"",
            ""            raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        yield None, MockLoader()"",
            """",
            ""environment = Environment()"",
            ""template = 'exists'"",
            ""self = MockSelf()""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'existing_template':"",
            ""            return 'template source code'"",
            ""        else:"",
            ""            raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        yield None, MockLoader()"",
            """",
            ""self = MockSelf()"",
            ""environment = Environment()"",
            ""template = 'existing_template'""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'existing_template':"",
            ""            return 'template source code'"",
            ""        else:"",
            ""            raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        yield None, MockLoader()"",
            """",
            ""self = MockSelf()"",
            ""environment = type('Mock', (object,), {})()"",
            ""template = 'existing_template'""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'existing_template':"",
            ""            return 'source code'"",
            ""        else:"",
            ""            raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        yield 'mock_source_object', MockLoader()"",
            """",
            ""self = MockSelf()"",
            ""environment = Environment()"",
            ""template = 'existing_template'""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound""
        ],
        ""initialization"": [
            ""class MockLoader:"",
            ""    def get_source(self, environment, template):"",
            ""        if template == 'mock_template':"",
            ""            return 'source_code'"",
            ""        else:"",
            ""            raise TemplateNotFound(template)"",
            """",
            ""class MockSelf:"",
            ""    def _iter_loaders(self, template):"",
            ""        yield 'source_object', MockLoader()"",
            """",
            ""environment = 'mock_environment'"",
            ""template = 'mock_template'"",
            ""self = MockSelf()""
        ]
    }
]","[
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'template_exists': # pragma: no cover"",
            ""            return 'source code' # pragma: no cover"",
            ""        else: # pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        yield None, MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""environment = None # pragma: no cover"",
            ""template = 'template_exists' # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'missing_template': # pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            ""        return 'source code', None, None # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        return [(None, MockLoader())] # pragma: no cover"",
            "" # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""template = 'missing_template' # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'valid_template': # pragma: no cover"",
            ""            return 'source_code' # pragma: no cover"",
            ""        else: # pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        yield None, MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""environment = 'mock_environment' # pragma: no cover"",
            ""template = 'valid_template' # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'valid_template': # pragma: no cover"",
            ""            return 'source_code' # pragma: no cover"",
            ""        else: # pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        yield 'mock_source_object', MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""template = 'valid_template' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'existing_template': # pragma: no cover"",
            ""            return 'source code' # pragma: no cover"",
            ""        else: # pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        yield None, MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""template = 'existing_template' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'exists': # pragma: no cover"",
            ""            return 'source_code' # pragma: no cover"",
            ""        else: # pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        yield None, MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""template = 'exists' # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'existing_template': # pragma: no cover"",
            ""            return 'template source code' # pragma: no cover"",
            ""        else: # pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        yield None, MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""template = 'existing_template' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'existing_template': # pragma: no cover"",
            ""            return 'template source code' # pragma: no cover"",
            ""        else: # pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        yield None, MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover"",
            ""environment = type('Mock', (object,), {})() # pragma: no cover"",
            ""template = 'existing_template' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import Environment, TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'existing_template': # pragma: no cover"",
            ""            return 'source code' # pragma: no cover"",
            ""        else: # pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        yield 'mock_source_object', MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover"",
            ""environment = Environment() # pragma: no cover"",
            ""template = 'existing_template' # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from jinja2 import TemplateNotFound # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLoader: # pragma: no cover"",
            ""    def get_source(self, environment, template): # pragma: no cover"",
            ""        if template == 'mock_template': # pragma: no cover"",
            ""            return 'source_code' # pragma: no cover"",
            ""        else: # pragma: no cover"",
            ""            raise TemplateNotFound(template) # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockSelf: # pragma: no cover"",
            ""    def _iter_loaders(self, template): # pragma: no cover"",
            ""        yield 'source_object', MockLoader() # pragma: no cover"",
            "" # pragma: no cover"",
            ""environment = 'mock_environment' # pragma: no cover"",
            ""template = 'mock_template' # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover""
        ]
    }
]",3,10754,0.005377,1438,0.002157,0.007534
