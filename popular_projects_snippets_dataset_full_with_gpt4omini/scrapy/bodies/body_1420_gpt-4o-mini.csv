prompt,raw_predictions,predictions,prompt_type,input_size,input_price,output_size,output_price,total_price
"Provide self-contained and concrete Python values to initialize the undefined variables in the code snippet.

# begin code snippet
""""""Returns the next object to be returned by :meth:`pop`,
        but without removing it from the queue.

        Raises :exc:`NotImplementedError` if the underlying queue class does
        not implement a ``peek`` method, which is optional for queues.
        """"""
stats = self._downloader_interface.stats(self.pqueues)
if not stats:
    exit(None)
slot = min(stats)[1]
queue = self.pqueues[slot]
exit(queue.peek())

# end code snippet

# begin undefined variables
self
# end undefined variables

# begin undefined attributes and methods
self._downloader_interface
self.pqueues
# end undefined attributes and methods

Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""from collections import deque""
        ],
        ""initialization"": [
            ""class MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue), idx) for idx, queue in enumerate(pqueues) if queue]"",
            ""self._downloader_interface = MockDownloaderInterface()"",
            ""self.pqueues = [deque([1, 2, 3]), deque([]), deque([4, 5, 6])]"",
            ""class MockQueue:\n    def __init__(self, elements):\n        self.elements = elements\n    def peek(self):\n        return self.elements[0] if self.elements else None"",
            ""self.pqueues = [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])]""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Optional, Dict, Any""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def peek(self):\n        return 'next_item'\n\nclass MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue), i) for i, queue in enumerate(pqueues)]\n\nself._downloader_interface = MockDownloaderInterface()"",
            ""self.pqueues = [MockQueue(), MockQueue(), MockQueue()]""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Dict, Any, Optional""
        ],
        ""initialization"": [
            ""class MockDownloaderInterface:\n    def stats(self, pqueues: List[Any]) -> Optional[List[Tuple[int, int]]]:\n        return [(0, 10), (1, 20)]"",
            ""self = type('Mock', (object,), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue(), MockQueue()]})()"",
            ""class MockQueue:\n    def peek(self):\n        return 'next_item'\n\n    def __len__(self):\n        return 1""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Dict""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def peek(self):\n        return 'next_item'\n\nclass MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue), index) for index, queue in enumerate(pqueues)]\n\nself._downloader_interface = MockDownloaderInterface()\nself.pqueues = [MockQueue(), MockQueue(), MockQueue()]""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Optional, Any""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def peek(self):\n        return 'next_item'  # Replace with proper implementation if necessary"",
            ""class MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(1, 0), (2, 1)]  # Returns a list of tuples with stats, replace values as needed"",
            ""self._downloader_interface = MockDownloaderInterface()"",
            ""self.pqueues = [MockQueue(), MockQueue()]  # Create a list of mock queues""
        ]
    },
    {
        ""imports"": [
            ""from queue import Queue""
        ],
        ""initialization"": [
            ""class MockDownloaderInterface: def stats(self, pqueues): return [ (len(queue), i) for i, queue in enumerate(pqueues) ]"",
            ""self = type('Object', (), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [Queue(), Queue()]})()"",
            ""self.pqueues[0].put('first_item')"",
            ""self.pqueues[1].put('second_item')""
        ]
    },
    {
        ""imports"": [
            ""import random"",
            ""from collections import deque""
        ],
        ""initialization"": [
            ""class MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [len(queue) for queue in pqueues], \n               [i for i in range(len(pqueues))]"",
            ""self = type('Mock', (), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [deque([1, 2, 3]), deque([]), deque([4, 5])]})()""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Dict, Any, Optional""
        ],
        ""initialization"": [
            ""class MockDownloaderInterface: def stats(self, pqueues): return [([1], 0)]"",
            ""self = type('Mock', (object,), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [type('MockQueue', (object,), {'peek': lambda self: 'next_item'})()]} })()""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque"",
            ""from typing import List, Dict, Any""
        ],
        ""initialization"": [
            ""class MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue), index) for index, queue in enumerate(pqueues)]\n\nclass MockQueue:\n    def __init__(self, items):\n        self.items = deque(items)\n    \n    def peek(self):\n        return self.items[0] if self.items else None"",
            ""self = type('Mock', (), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([4, 5]), MockQueue([])]})()""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Dict""
        ],
        ""initialization"": [
            ""class MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue), index) for index, queue in enumerate(pqueues)]\n\nclass MockQueue:\n    def __init__(self, items):\n        self.items = items\n    def peek(self):\n        return self.items[0] if self.items else None\n\nself._downloader_interface = MockDownloaderInterface()\nself.pqueues = [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5])]""
        ]
    }
]","[
    {
        ""imports"": [
            ""from collections import deque # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue), idx) for idx, queue in enumerate(pqueues) if queue] # pragma: no cover"",
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, elements):# pragma: no cover"",
            ""        self.elements = elements# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.elements[0] if self.elements else None # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Optional, Dict, Any # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return 'next_item'# pragma: no cover"",
            ""# pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue), i) for i, queue in enumerate(pqueues)]# pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Dict, Any, Optional # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    pass"",
            ""class MockQueue:# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return 'next_item'# pragma: no cover"",
            ""# pragma: no cover"",
            ""    def __len__(self):# pragma: no cover"",
            ""        return 1 # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Dict # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return 'next_item'# pragma: no cover"",
            ""# pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue), index) for index, queue in enumerate(pqueues)]# pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Optional, Any # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return 'next_item'  # Replace with proper implementation if necessary # pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(1, 0), (2, 1)]  # Returns a list of tuples with stats, replace values as needed # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from queue import Queue # pragma: no cover""
        ],
        ""initialization"": [
            """"
        ]
    },
    {
        ""imports"": [
            ""import random # pragma: no cover"",
            ""from collections import deque # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [len(queue) for queue in pqueues], # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Dict, Any, Optional # pragma: no cover""
        ],
        ""initialization"": [
            """"
        ]
    },
    {
        ""imports"": [
            ""from collections import deque # pragma: no cover"",
            ""from typing import List, Dict, Any # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue), index) for index, queue in enumerate(pqueues)]# pragma: no cover"",
            ""# pragma: no cover"",
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, items):# pragma: no cover"",
            ""        self.items = deque(items)# pragma: no cover"",
            ""    # pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.items[0] if self.items else None # pragma: no cover"",
            ""self = type('Mock', (), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([4, 5]), MockQueue([])]})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Dict # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue), index) for index, queue in enumerate(pqueues)]# pragma: no cover"",
            ""# pragma: no cover"",
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, items):# pragma: no cover"",
            ""        self.items = items# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.items[0] if self.items else None# pragma: no cover""
        ]
    }
]",1,392,0.000196,1401,0.0021015,0.0022975
"When trying to execute the code snippet with the provided imports and initialization, the following error happens:
# begin error message
Execution error at line 19:
    stats = self._downloader_interface.stats(self.pqueues)
NameError: name 'self' is not defined
# end error message

Please, provide self-contained and concrete Python fixed values of the imports and initialization to solve the error and make the code snippet executable.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""from collections import deque""
        ],
        ""initialization"": [
            ""class MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue.elements), idx) for idx, queue in enumerate(pqueues) if queue.elements]"",
            ""class MockQueue:\n    def __init__(self, elements):\n        self.elements = elements\n    def peek(self):\n        return self.elements[0] if self.elements else None"",
            ""self = type('MockSelf', (), {})()"",
            ""self._downloader_interface = MockDownloaderInterface()"",
            ""self.pqueues = [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])]""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque""
        ],
        ""initialization"": [
            ""class MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue.elements), idx) for idx, queue in enumerate(pqueues) if queue.elements]"",
            ""class MockQueue:\n    def __init__(self, elements):\n        self.elements = elements\n    def peek(self):\n        return self.elements[0] if self.elements else None"",
            ""self = type('MockSelf', (object,), {})()"",
            ""self._downloader_interface = MockDownloaderInterface()"",
            ""self.pqueues = [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])]""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque""
        ],
        ""initialization"": [
            ""class MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue.elements), idx) for idx, queue in enumerate(pqueues) if queue.elements]"",
            ""class MockQueue:\n    def __init__(self, elements):\n        self.elements = elements\n    def peek(self):\n        return self.elements[0] if self.elements else None"",
            ""self = type('MockSelf', (), {})()"",
            ""self._downloader_interface = MockDownloaderInterface()"",
            ""self.pqueues = [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])]""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque""
        ],
        ""initialization"": [
            ""class MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue.elements), idx) for idx, queue in enumerate(pqueues) if queue.elements]"",
            ""class MyClass:\n    def __init__(self):\n        self._downloader_interface = MockDownloaderInterface()\n        self.pqueues = [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])]\n\n    def get_next_object(self):\n        stats = self._downloader_interface.stats(self.pqueues)\n        if not stats:\n            exit(None)\n        slot = min(stats)[1]\n        queue = self.pqueues[slot]\n        exit(queue.peek())"",
            ""class MockQueue:\n    def __init__(self, elements):\n        self.elements = elements\n    def peek(self):\n        return self.elements[0] if self.elements else None"",
            ""instance = MyClass()""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque""
        ],
        ""initialization"": [
            ""class MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue.elements), idx) for idx, queue in enumerate(pqueues) if len(queue.elements) > 0]"",
            ""class MockQueue:\n    def __init__(self, elements):\n        self.elements = elements\n    def peek(self):\n        return self.elements[0] if self.elements else None"",
            ""self = type('MockSelf', (), {})()"",
            ""self._downloader_interface = MockDownloaderInterface()"",
            ""self.pqueues = [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])]""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque""
        ],
        ""initialization"": [
            ""class MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue.elements), idx) for idx, queue in enumerate(pqueues) if queue.elements]"",
            ""class MockQueue:\n    def __init__(self, elements):\n        self.elements = elements\n    def peek(self):\n        return self.elements[0] if self.elements else None"",
            ""self = type('MockObject', (), {})()"",
            ""self._downloader_interface = MockDownloaderInterface()"",
            ""self.pqueues = [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])]""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque""
        ],
        ""initialization"": [
            ""class MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue.elements), idx) for idx, queue in enumerate(pqueues) if queue.elements]"",
            ""class MockQueue:\n    def __init__(self, elements):\n        self.elements = elements\n    def peek(self):\n        return self.elements[0] if self.elements else None"",
            ""self = type('MockSelf', (), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])]})()""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque""
        ],
        ""initialization"": [
            ""class MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue.elements), idx) for idx, queue in enumerate(pqueues) if queue.elements]"",
            ""class MockQueue:\n    def __init__(self, elements):\n        self.elements = elements\n    def peek(self):\n        return self.elements[0] if self.elements else None"",
            ""self = type('MockSelf', (), {})()"",
            ""self._downloader_interface = MockDownloaderInterface()"",
            ""self.pqueues = [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])]""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque""
        ],
        ""initialization"": [
            ""class MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue.elements), idx) for idx, queue in enumerate(pqueues) if queue.elements]"",
            ""class MockQueue:\n    def __init__(self, elements):\n        self.elements = elements\n    def peek(self):\n        return self.elements[0] if self.elements else None"",
            ""self = type('MockSelf', (), {})()"",
            ""self._downloader_interface = MockDownloaderInterface()"",
            ""self.pqueues = [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])]""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque""
        ],
        ""initialization"": [
            ""class MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue.elements), idx) for idx, queue in enumerate(pqueues) if queue.elements]"",
            ""class MockQueue:\n    def __init__(self, elements):\n        self.elements = elements\n    def peek(self):\n        return self.elements[0] if self.elements else None"",
            ""self = type('MockSelf', (), {})()"",
            ""self._downloader_interface = MockDownloaderInterface()"",
            ""self.pqueues = [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])]""
        ]
    }
]","[
    {
        ""imports"": [
            ""from collections import deque # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue.elements), idx) for idx, queue in enumerate(pqueues) if queue.elements] # pragma: no cover"",
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, elements):# pragma: no cover"",
            ""        self.elements = elements# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.elements[0] if self.elements else None # pragma: no cover"",
            ""self = type('MockSelf', (), {})() # pragma: no cover"",
            ""self._downloader_interface = MockDownloaderInterface() # pragma: no cover"",
            ""self.pqueues = [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue.elements), idx) for idx, queue in enumerate(pqueues) if queue.elements] # pragma: no cover"",
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, elements):# pragma: no cover"",
            ""        self.elements = elements# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.elements[0] if self.elements else None # pragma: no cover"",
            ""self = type('MockSelf', (object,), {})() # pragma: no cover"",
            ""self._downloader_interface = MockDownloaderInterface() # pragma: no cover"",
            ""self.pqueues = [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue.elements), idx) for idx, queue in enumerate(pqueues) if queue.elements] # pragma: no cover"",
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, elements):# pragma: no cover"",
            ""        self.elements = elements# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.elements[0] if self.elements else None # pragma: no cover"",
            ""self = type('MockSelf', (), {})() # pragma: no cover"",
            ""self._downloader_interface = MockDownloaderInterface() # pragma: no cover"",
            ""self.pqueues = [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue.elements), idx) for idx, queue in enumerate(pqueues) if queue.elements] # pragma: no cover"",
            ""class MyClass:# pragma: no cover"",
            ""    def __init__(self):# pragma: no cover"",
            ""        self._downloader_interface = MockDownloaderInterface()# pragma: no cover"",
            ""        self.pqueues = [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])]# pragma: no cover"",
            ""# pragma: no cover"",
            ""    def get_next_object(self):# pragma: no cover"",
            ""        stats = self._downloader_interface.stats(self.pqueues)# pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue.elements), idx) for idx, queue in enumerate(pqueues) if len(queue.elements) > 0] # pragma: no cover"",
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, elements):# pragma: no cover"",
            ""        self.elements = elements# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.elements[0] if self.elements else None # pragma: no cover"",
            ""self = type('MockSelf', (), {})() # pragma: no cover"",
            ""self._downloader_interface = MockDownloaderInterface() # pragma: no cover"",
            ""self.pqueues = [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue.elements), idx) for idx, queue in enumerate(pqueues) if queue.elements] # pragma: no cover"",
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, elements):# pragma: no cover"",
            ""        self.elements = elements# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.elements[0] if self.elements else None # pragma: no cover"",
            ""self = type('MockObject', (), {})() # pragma: no cover"",
            ""self._downloader_interface = MockDownloaderInterface() # pragma: no cover"",
            ""self.pqueues = [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue.elements), idx) for idx, queue in enumerate(pqueues) if queue.elements] # pragma: no cover"",
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, elements):# pragma: no cover"",
            ""        self.elements = elements# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.elements[0] if self.elements else None # pragma: no cover"",
            ""self = type('MockSelf', (), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])]})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue.elements), idx) for idx, queue in enumerate(pqueues) if queue.elements] # pragma: no cover"",
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, elements):# pragma: no cover"",
            ""        self.elements = elements# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.elements[0] if self.elements else None # pragma: no cover"",
            ""self = type('MockSelf', (), {})() # pragma: no cover"",
            ""self._downloader_interface = MockDownloaderInterface() # pragma: no cover"",
            ""self.pqueues = [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue.elements), idx) for idx, queue in enumerate(pqueues) if queue.elements] # pragma: no cover"",
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, elements):# pragma: no cover"",
            ""        self.elements = elements# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.elements[0] if self.elements else None # pragma: no cover"",
            ""self = type('MockSelf', (), {})() # pragma: no cover"",
            ""self._downloader_interface = MockDownloaderInterface() # pragma: no cover"",
            ""self.pqueues = [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue.elements), idx) for idx, queue in enumerate(pqueues) if queue.elements] # pragma: no cover"",
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, elements):# pragma: no cover"",
            ""        self.elements = elements# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.elements[0] if self.elements else None # pragma: no cover"",
            ""self = type('MockSelf', (), {})() # pragma: no cover"",
            ""self._downloader_interface = MockDownloaderInterface() # pragma: no cover"",
            ""self.pqueues = [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])] # pragma: no cover""
        ]
    }
]",2,878,0.000439,1800,0.0027,0.003139
"When trying to execute the code snippet with the provided imports and initialization, the following error happens:
# begin error message
Execution error at line 18:
    stats = self._downloader_interface.stats(self.pqueues)
NameError: name 'self' is not defined
# end error message

Please, provide self-contained and concrete Python fixed values of the imports and initialization to solve the error and make the code snippet executable.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""from typing import List, Optional, Tuple""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def peek(self):\n        return 'next_item'\n\nclass MockDownloaderInterface:\n    def stats(self, pqueues: List[MockQueue]) -> List[Tuple[int, int]]:\n        return [(len(queue), i) for i, queue in enumerate(pqueues) if len(queue) > 0] or [(0, 0)]\n\nclass TestClass:\n    def __init__(self):\n        self._downloader_interface = MockDownloaderInterface()\n        self.pqueues = [MockQueue(), MockQueue(), MockQueue()]"",
            ""test_instance = TestClass()""
        ]
    },
    {
        ""imports"": [
            ""from typing import List"",
            ""from collections import deque""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def __init__(self, elements):\n        self.elements = elements\n    def peek(self):\n        return self.elements[0] if self.elements else None"",
            ""class MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue.elements), idx) for idx, queue in enumerate(pqueues) if queue.elements]"",
            ""self = type('MockSelf', (), {})()"",
            ""self._downloader_interface = MockDownloaderInterface()"",
            ""self.pqueues = [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])]""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Optional""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def __init__(self, items):\n        self.items = items\n    def peek(self):\n        return self.items[0] if self.items else None"",
            ""class MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue.items), idx) for idx, queue in enumerate(pqueues) if queue.items]"",
            ""class MockObject:\n    def __init__(self):\n        self._downloader_interface = MockDownloaderInterface()\n        self.pqueues = [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])]"",
            ""self = MockObject()""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def __init__(self, elements):\n        self.elements = elements\n    def peek(self):\n        return self.elements[0] if self.elements else None"",
            ""class MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue.elements), idx) for idx, queue in enumerate(pqueues) if queue.elements]"",
            ""self = type('MockSelf', (), {})()"",
            ""self._downloader_interface = MockDownloaderInterface()"",
            ""self.pqueues = [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])]""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def __init__(self, elements):\n        self.elements = elements\n    def peek(self):\n        return self.elements[0] if self.elements else None"",
            ""class MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue.elements), idx) for idx, queue in enumerate(pqueues) if queue.elements]"",
            ""self = type('MockSelf', (), {})()"",
            ""self._downloader_interface = MockDownloaderInterface()"",
            ""self.pqueues = [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])]""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def __init__(self, items):\n        self.items = items\n    def peek(self):\n        return self.items[0] if self.items else None\n\nclass MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue.items), idx) for idx, queue in enumerate(pqueues) if queue.items]"",
            ""self._downloader_interface = MockDownloaderInterface()"",
            ""self.pqueues = [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])]""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def __init__(self, elements):\n        self.elements = elements\n    def peek(self):\n        return self.elements[0] if self.elements else None"",
            ""class MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue.elements), i) for i, queue in enumerate(pqueues) if queue.elements]"",
            ""self = type('MockSelf', (), {})()"",
            ""self._downloader_interface = MockDownloaderInterface()"",
            ""self.pqueues = [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])]""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def __init__(self, elements):\n        self.elements = elements\n    def peek(self):\n        return self.elements[0] if self.elements else None"",
            ""class MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue.elements), i) for i, queue in enumerate(pqueues) if queue.elements]"",
            ""self = type('MockSelf', (), {})()"",
            ""self._downloader_interface = MockDownloaderInterface()"",
            ""self.pqueues = [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])]""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def __init__(self, elements):\n        self.elements = elements\n    def peek(self):\n        return self.elements[0] if self.elements else None"",
            ""class MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue.elements), idx) for idx, queue in enumerate(pqueues) if queue.elements]"",
            ""self = type('MockSelf', (), {})()"",
            ""self._downloader_interface = MockDownloaderInterface()"",
            ""self.pqueues = [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])]""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Optional, Dict, Any""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def __init__(self, elements):\n        self.elements = elements\n    def peek(self):\n        return self.elements[0] if self.elements else None"",
            ""class MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue.elements), i) for i, queue in enumerate(pqueues) if len(queue.elements) > 0]"",
            ""self = type('MockSelf', (object,), { '_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])] })()""
        ]
    }
]","[
    {
        ""imports"": [
            ""from typing import List, Optional, Tuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return 'next_item'# pragma: no cover"",
            ""# pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues: List[MockQueue]) -> List[Tuple[int, int]]:# pragma: no cover"",
            ""        return [(len(queue), i) for i, queue in enumerate(pqueues) if len(queue) > 0] or [(0, 0)]# pragma: no cover"",
            ""# pragma: no cover"",
            ""class TestClass:# pragma: no cover"",
            ""    def __init__(self):# pragma: no cover"",
            ""        self._downloader_interface = MockDownloaderInterface()# pragma: no cover"",
            ""        self.pqueues = [MockQueue(), MockQueue(), MockQueue()] # pragma: no cover"",
            ""test_instance = TestClass() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from typing import List # pragma: no cover"",
            ""from collections import deque # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, elements):# pragma: no cover"",
            ""        self.elements = elements# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.elements[0] if self.elements else None # pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue.elements), idx) for idx, queue in enumerate(pqueues) if queue.elements] # pragma: no cover"",
            ""self = type('MockSelf', (), {})() # pragma: no cover"",
            ""self._downloader_interface = MockDownloaderInterface() # pragma: no cover"",
            ""self.pqueues = [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Optional # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, items):# pragma: no cover"",
            ""        self.items = items# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.items[0] if self.items else None # pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue.items), idx) for idx, queue in enumerate(pqueues) if queue.items] # pragma: no cover"",
            ""class MockObject:# pragma: no cover"",
            ""    def __init__(self):# pragma: no cover"",
            ""        self._downloader_interface = MockDownloaderInterface()# pragma: no cover"",
            ""        self.pqueues = [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])] # pragma: no cover"",
            ""self = MockObject() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, elements):# pragma: no cover"",
            ""        self.elements = elements# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.elements[0] if self.elements else None # pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue.elements), idx) for idx, queue in enumerate(pqueues) if queue.elements] # pragma: no cover"",
            ""self = type('MockSelf', (), {})() # pragma: no cover"",
            ""self._downloader_interface = MockDownloaderInterface() # pragma: no cover"",
            ""self.pqueues = [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, elements):# pragma: no cover"",
            ""        self.elements = elements# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.elements[0] if self.elements else None # pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue.elements), idx) for idx, queue in enumerate(pqueues) if queue.elements] # pragma: no cover"",
            ""self = type('MockSelf', (), {})() # pragma: no cover"",
            ""self._downloader_interface = MockDownloaderInterface() # pragma: no cover"",
            ""self.pqueues = [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, items):# pragma: no cover"",
            ""        self.items = items# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.items[0] if self.items else None# pragma: no cover"",
            ""# pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue.items), idx) for idx, queue in enumerate(pqueues) if queue.items] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, elements):# pragma: no cover"",
            ""        self.elements = elements# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.elements[0] if self.elements else None # pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue.elements), i) for i, queue in enumerate(pqueues) if queue.elements] # pragma: no cover"",
            ""self = type('MockSelf', (), {})() # pragma: no cover"",
            ""self._downloader_interface = MockDownloaderInterface() # pragma: no cover"",
            ""self.pqueues = [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, elements):# pragma: no cover"",
            ""        self.elements = elements# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.elements[0] if self.elements else None # pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue.elements), i) for i, queue in enumerate(pqueues) if queue.elements] # pragma: no cover"",
            ""self = type('MockSelf', (), {})() # pragma: no cover"",
            ""self._downloader_interface = MockDownloaderInterface() # pragma: no cover"",
            ""self.pqueues = [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, elements):# pragma: no cover"",
            ""        self.elements = elements# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.elements[0] if self.elements else None # pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue.elements), idx) for idx, queue in enumerate(pqueues) if queue.elements] # pragma: no cover"",
            ""self = type('MockSelf', (), {})() # pragma: no cover"",
            ""self._downloader_interface = MockDownloaderInterface() # pragma: no cover"",
            ""self.pqueues = [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Optional, Dict, Any # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, elements):# pragma: no cover"",
            ""        self.elements = elements# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.elements[0] if self.elements else None # pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue.elements), i) for i, queue in enumerate(pqueues) if len(queue.elements) > 0] # pragma: no cover"",
            ""self = type('MockSelf', (object,), { '_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])] })() # pragma: no cover""
        ]
    }
]",2,1296,0.000648,1738,0.002607,0.003255
"When trying to execute the code snippet with the provided imports and initialization, the following error happens:
# begin error message
Execution error at line 19:
    stats = self._downloader_interface.stats(self.pqueues)
NameError: name 'self' is not defined
# end error message

Please, provide self-contained and concrete Python fixed values of the imports and initialization to solve the error and make the code snippet executable.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""from typing import List, Tuple""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def __init__(self, items):\n        self.items = items\n    def peek(self):\n        return self.items[0] if self.items else None\n    def __len__(self):\n        return len(self.items)"",
            ""class MockDownloaderInterface:\n    def stats(self, pqueues: List[MockQueue]) -> List[Tuple[int, int]]:\n        return [(len(queue), idx) for idx, queue in enumerate(pqueues) if queue]"",
            ""self = type('MockSelf', (object,), {})()"",
            ""self._downloader_interface = MockDownloaderInterface()"",
            ""self.pqueues = [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])]""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def __init__(self, items):\n        self.items = items\n    def peek(self):\n        return self.items[0] if self.items else None"",
            ""class MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue.items), idx) for idx, queue in enumerate(pqueues) if queue.items]"",
            ""self = type('Mock', (object,), {})()"",
            ""self._downloader_interface = MockDownloaderInterface()"",
            ""self.pqueues = [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])]""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def __init__(self, elements):\n        self.elements = elements\n    def peek(self):\n        return self.elements[0] if self.elements else None\n    def __len__(self):\n        return len(self.elements)"",
            ""class MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue), idx) for idx, queue in enumerate(pqueues) if queue]"",
            ""self = type('MockSelf', (object,), {})()"",
            ""self._downloader_interface = MockDownloaderInterface()"",
            ""self.pqueues = [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])]""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def __init__(self, items):\n        self.items = items\n    def peek(self):\n        return self.items[0] if self.items else None\n    def __len__(self):\n        return len(self.items)"",
            ""class MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(pq), idx) for idx, pq in enumerate(pqueues) if len(pq) > 0]"",
            ""self = type('Mock', (object,), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])]})()""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque"",
            ""from typing import List, Tuple""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def __init__(self, elements):\n        self.elements = elements\n    def peek(self):\n        return self.elements[0] if self.elements else None\n\n    def __len__(self):\n        return len(self.elements)"",
            ""class MockDownloaderInterface:\n    def stats(self, pqueues: List[MockQueue]) -> List[Tuple[int, int]]:\n        return [(len(queue), idx) for idx, queue in enumerate(pqueues) if len(queue) > 0]\n\nself._downloader_interface = MockDownloaderInterface()"",
            ""self.pqueues = [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])]""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def __init__(self, elements):\n        self.elements = elements\n    def peek(self):\n        return self.elements[0] if self.elements else None\n    def __len__(self):\n        return len(self.elements)"",
            ""class MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue), idx) for idx, queue in enumerate(pqueues) if len(queue) > 0]"",
            ""self = type('MockSelf', (object,), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])]})()""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def __init__(self, elements):\n        self.elements = elements\n    def peek(self):\n        return self.elements[0] if self.elements else None\n\n    def __len__(self):\n        return len(self.elements)"",
            ""class MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue), idx) for idx, queue in enumerate(pqueues) if queue]"",
            ""self = type('Mock', (object,), {})()"",
            ""self._downloader_interface = MockDownloaderInterface()"",
            ""self.pqueues = [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])]""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def __init__(self, elements):\n        self.elements = elements\n    def peek(self):\n        return self.elements[0] if self.elements else None"",
            ""class MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue.elements), idx) for idx, queue in enumerate(pqueues) if queue.elements]"",
            ""self = type('MockSelf', (object,), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])]})()""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def __init__(self, elements):\n        self.elements = elements\n    def peek(self):\n        return self.elements[0] if self.elements else None\n\nclass MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue.elements), idx) for idx, queue in enumerate(pqueues) if queue.elements]"",
            ""self = type('Mock', (object,), {})()"",
            ""self._downloader_interface = MockDownloaderInterface()"",
            ""self.pqueues = [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])]""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Any, Tuple""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def __init__(self, items: List[Any]):\n        self.items = items\n    def peek(self):\n        return self.items[0] if self.items else None\n    def __len__(self):\n        return len(self.items)"",
            ""class MockDownloaderInterface:\n    def stats(self, pqueues: List[MockQueue]) -> List[Tuple[int, int]]:\n        return [(len(queue), idx) for idx, queue in enumerate(pqueues) if queue]"",
            ""self = type('MockSelf', (object,), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])]} )()""
        ]
    }
]","[
    {
        ""imports"": [
            ""from typing import List, Tuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, items):# pragma: no cover"",
            ""        self.items = items# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.items[0] if self.items else None# pragma: no cover"",
            ""    def __len__(self):# pragma: no cover"",
            ""        return len(self.items) # pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues: List[MockQueue]) -> List[Tuple[int, int]]:# pragma: no cover"",
            ""        return [(len(queue), idx) for idx, queue in enumerate(pqueues) if queue] # pragma: no cover"",
            ""self = type('MockSelf', (object,), {})() # pragma: no cover"",
            ""self._downloader_interface = MockDownloaderInterface() # pragma: no cover"",
            ""self.pqueues = [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, items):# pragma: no cover"",
            ""        self.items = items# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.items[0] if self.items else None # pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue.items), idx) for idx, queue in enumerate(pqueues) if queue.items] # pragma: no cover"",
            ""self = type('Mock', (object,), {})() # pragma: no cover"",
            ""self._downloader_interface = MockDownloaderInterface() # pragma: no cover"",
            ""self.pqueues = [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, elements):# pragma: no cover"",
            ""        self.elements = elements# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.elements[0] if self.elements else None# pragma: no cover"",
            ""    def __len__(self):# pragma: no cover"",
            ""        return len(self.elements) # pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue), idx) for idx, queue in enumerate(pqueues) if queue] # pragma: no cover"",
            ""self = type('MockSelf', (object,), {})() # pragma: no cover"",
            ""self._downloader_interface = MockDownloaderInterface() # pragma: no cover"",
            ""self.pqueues = [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, items):# pragma: no cover"",
            ""        self.items = items# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.items[0] if self.items else None# pragma: no cover"",
            ""    def __len__(self):# pragma: no cover"",
            ""        return len(self.items) # pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(pq), idx) for idx, pq in enumerate(pqueues) if len(pq) > 0] # pragma: no cover"",
            ""self = type('Mock', (object,), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])]})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque # pragma: no cover"",
            ""from typing import List, Tuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, elements):# pragma: no cover"",
            ""        self.elements = elements# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.elements[0] if self.elements else None# pragma: no cover"",
            ""# pragma: no cover"",
            ""    def __len__(self):# pragma: no cover"",
            ""        return len(self.elements) # pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues: List[MockQueue]) -> List[Tuple[int, int]]:# pragma: no cover"",
            ""        return [(len(queue), idx) for idx, queue in enumerate(pqueues) if len(queue) > 0]# pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, elements):# pragma: no cover"",
            ""        self.elements = elements# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.elements[0] if self.elements else None# pragma: no cover"",
            ""    def __len__(self):# pragma: no cover"",
            ""        return len(self.elements) # pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue), idx) for idx, queue in enumerate(pqueues) if len(queue) > 0] # pragma: no cover"",
            ""self = type('MockSelf', (object,), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])]})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, elements):# pragma: no cover"",
            ""        self.elements = elements# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.elements[0] if self.elements else None# pragma: no cover"",
            ""# pragma: no cover"",
            ""    def __len__(self):# pragma: no cover"",
            ""        return len(self.elements) # pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue), idx) for idx, queue in enumerate(pqueues) if queue] # pragma: no cover"",
            ""self = type('Mock', (object,), {})() # pragma: no cover"",
            ""self._downloader_interface = MockDownloaderInterface() # pragma: no cover"",
            ""self.pqueues = [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, elements):# pragma: no cover"",
            ""        self.elements = elements# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.elements[0] if self.elements else None # pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue.elements), idx) for idx, queue in enumerate(pqueues) if queue.elements] # pragma: no cover"",
            ""self = type('MockSelf', (object,), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])]})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, elements):# pragma: no cover"",
            ""        self.elements = elements# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.elements[0] if self.elements else None# pragma: no cover"",
            ""# pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue.elements), idx) for idx, queue in enumerate(pqueues) if queue.elements] # pragma: no cover"",
            ""self = type('Mock', (object,), {})() # pragma: no cover"",
            ""self._downloader_interface = MockDownloaderInterface() # pragma: no cover"",
            ""self.pqueues = [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Any, Tuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, items: List[Any]):# pragma: no cover"",
            ""        self.items = items# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.items[0] if self.items else None# pragma: no cover"",
            ""    def __len__(self):# pragma: no cover"",
            ""        return len(self.items) # pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues: List[MockQueue]) -> List[Tuple[int, int]]:# pragma: no cover"",
            ""        return [(len(queue), idx) for idx, queue in enumerate(pqueues) if queue] # pragma: no cover"",
            ""self = type('MockSelf', (object,), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])]} )() # pragma: no cover""
        ]
    }
]",2,1745,0.0008725,1874,0.002811,0.0036835
"When trying to execute the code snippet with the provided imports and initialization, the following error happens:
# begin error message
Execution error at line 18:
    stats = self._downloader_interface.stats(self.pqueues)
NameError: name 'self' is not defined
# end error message

Please, provide self-contained and concrete Python fixed values of the imports and initialization to solve the error and make the code snippet executable.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""from typing import List, Tuple""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def peek(self):\n        return 'next_item'\n\nclass MockDownloaderInterface:\n    def stats(self, pqueues: List[MockQueue]) -> List[Tuple[int, int]]:\n        return [(len(queue), index) for index, queue in enumerate(pqueues) if len(queue) > 0]\n\nself = type('Mock', (object,), {})()\nself._downloader_interface = MockDownloaderInterface()\nself.pqueues = [MockQueue(), MockQueue(), MockQueue()]""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def __init__(self, elements):\n        self.elements = elements\n    def peek(self):\n        return self.elements[0] if self.elements else None\n\nclass MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue.elements), idx) for idx, queue in enumerate(pqueues) if queue.elements]\n\nself._downloader_interface = MockDownloaderInterface()"",
            ""self.pqueues = [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])]""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Tuple""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def __init__(self, items):\n        self.items = items\n    def peek(self):\n        return self.items[0] if self.items else None\n\n    def __len__(self):\n        return len(self.items)"",
            ""class MockDownloaderInterface:\n    def stats(self, pqueues: List[MockQueue]) -> List[Tuple[int, int]]:\n        return [(len(queue), idx) for idx, queue in enumerate(pqueues) if len(queue) > 0]"",
            ""mock_downloader_interface = MockDownloaderInterface()"",
            ""pqueues = [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])]""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Tuple""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def peek(self):\n        return 'next_item'\n\nclass MockDownloaderInterface:\n    def stats(self, pqueues: List[MockQueue]) -> List[Tuple[int, int]]:\n        return [(len(pq.peek()), idx) for idx, pq in enumerate(pqueues)]"",
            ""self = type('MockSelf', (object,), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue(), MockQueue(), MockQueue()]})()""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def __init__(self, items):\n        self.items = items\n    def peek(self):\n        return self.items[0] if self.items else None"",
            ""class MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue.items), idx) for idx, queue in enumerate(pqueues)]"",
            ""self = type('Mock', (object,), {})()"",
            ""self._downloader_interface = MockDownloaderInterface()"",
            ""self.pqueues = [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])]""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def __init__(self, items):\n        self.items = items\n    def peek(self):\n        return self.items[0] if self.items else None"",
            ""class MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue.items), idx) for idx, queue in enumerate(pqueues)]"",
            ""self = type('MockSelf', (object,), {})()"",
            ""self._downloader_interface = MockDownloaderInterface()"",
            ""self.pqueues = [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])]""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Tuple""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def peek(self):\n        return 'next_item'\n\n    def __len__(self):\n        return 1"",
            ""class MockDownloaderInterface:\n    def stats(self, pqueues: List[MockQueue]) -> List[Tuple[int, int]]:\n        return [(len(queue), idx) for idx, queue in enumerate(pqueues)]"",
            ""downloader = MockDownloaderInterface()"",
            ""self = type('MockSelf', (object,), {'_downloader_interface': downloader, 'pqueues': [MockQueue(), MockQueue(), MockQueue()]})()""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Tuple""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def __init__(self):\n        self.items = ['next_item']\n    def peek(self):\n        return self.items[0] if self.items else None\n\nclass MockDownloaderInterface:\n    def stats(self, pqueues: List[MockQueue]) -> List[Tuple[int, int]]:\n        return [(len(queue.items), idx) for idx, queue in enumerate(pqueues) if len(queue.items) > 0]\n\nself = type('Mock', (object,), {})()\nself._downloader_interface = MockDownloaderInterface()\nself.pqueues = [MockQueue(), MockQueue(), MockQueue()]""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def __init__(self, elements):\n        self.elements = elements\n    def peek(self):\n        return self.elements[0] if self.elements else None\n"",
            ""class MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue.elements), idx) for idx, queue in enumerate(pqueues)]\n"",
            ""self = type('MockSelf', (object,), {})()"",
            ""self._downloader_interface = MockDownloaderInterface()"",
            ""self.pqueues = [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])]""
        ]
    },
    {
        ""imports"": [
            ""from typing import List""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def peek(self):\n        return 'next_item'\n\n    def __len__(self):\n        return 1"",
            ""class MockDownloaderInterface:\n    def stats(self, pqueues: List[MockQueue]):\n        return [(len(queue), idx) for idx, queue in enumerate(pqueues)]"",
            ""self = type('MockSelf', (object,), {})()\nself._downloader_interface = MockDownloaderInterface()\nself.pqueues = [MockQueue(), MockQueue(), MockQueue()]""
        ]
    }
]","[
    {
        ""imports"": [
            ""from typing import List, Tuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return 'next_item'# pragma: no cover"",
            ""# pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues: List[MockQueue]) -> List[Tuple[int, int]]:# pragma: no cover"",
            ""        return [(len(queue), index) for index, queue in enumerate(pqueues) if len(queue) > 0]# pragma: no cover"",
            ""# pragma: no cover"",
            ""self = type('Mock', (object,), {})()# pragma: no cover"",
            ""self._downloader_interface = MockDownloaderInterface()# pragma: no cover"",
            ""self.pqueues = [MockQueue(), MockQueue(), MockQueue()] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, elements):# pragma: no cover"",
            ""        self.elements = elements# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.elements[0] if self.elements else None# pragma: no cover"",
            ""# pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue.elements), idx) for idx, queue in enumerate(pqueues) if queue.elements]# pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Tuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, items):# pragma: no cover"",
            ""        self.items = items# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.items[0] if self.items else None# pragma: no cover"",
            ""# pragma: no cover"",
            ""    def __len__(self):# pragma: no cover"",
            ""        return len(self.items) # pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues: List[MockQueue]) -> List[Tuple[int, int]]:# pragma: no cover"",
            ""        return [(len(queue), idx) for idx, queue in enumerate(pqueues) if len(queue) > 0] # pragma: no cover"",
            ""mock_downloader_interface = MockDownloaderInterface() # pragma: no cover"",
            ""pqueues = [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Tuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return 'next_item'# pragma: no cover"",
            ""# pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues: List[MockQueue]) -> List[Tuple[int, int]]:# pragma: no cover"",
            ""        return [(len(pq.peek()), idx) for idx, pq in enumerate(pqueues)] # pragma: no cover"",
            ""self = type('MockSelf', (object,), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue(), MockQueue(), MockQueue()]})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, items):# pragma: no cover"",
            ""        self.items = items# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.items[0] if self.items else None # pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue.items), idx) for idx, queue in enumerate(pqueues)] # pragma: no cover"",
            ""self = type('Mock', (object,), {})() # pragma: no cover"",
            ""self._downloader_interface = MockDownloaderInterface() # pragma: no cover"",
            ""self.pqueues = [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, items):# pragma: no cover"",
            ""        self.items = items# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.items[0] if self.items else None # pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue.items), idx) for idx, queue in enumerate(pqueues)] # pragma: no cover"",
            ""self = type('MockSelf', (object,), {})() # pragma: no cover"",
            ""self._downloader_interface = MockDownloaderInterface() # pragma: no cover"",
            ""self.pqueues = [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Tuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return 'next_item'# pragma: no cover"",
            ""# pragma: no cover"",
            ""    def __len__(self):# pragma: no cover"",
            ""        return 1 # pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues: List[MockQueue]) -> List[Tuple[int, int]]:# pragma: no cover"",
            ""        return [(len(queue), idx) for idx, queue in enumerate(pqueues)] # pragma: no cover"",
            ""downloader = MockDownloaderInterface() # pragma: no cover"",
            ""self = type('MockSelf', (object,), {'_downloader_interface': downloader, 'pqueues': [MockQueue(), MockQueue(), MockQueue()]})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Tuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self):# pragma: no cover"",
            ""        self.items = ['next_item']# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.items[0] if self.items else None# pragma: no cover"",
            ""# pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues: List[MockQueue]) -> List[Tuple[int, int]]:# pragma: no cover"",
            ""        return [(len(queue.items), idx) for idx, queue in enumerate(pqueues) if len(queue.items) > 0]# pragma: no cover"",
            ""# pragma: no cover"",
            ""self = type('Mock', (object,), {})()# pragma: no cover"",
            ""self._downloader_interface = MockDownloaderInterface()# pragma: no cover"",
            ""self.pqueues = [MockQueue(), MockQueue(), MockQueue()] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, elements):# pragma: no cover"",
            ""        self.elements = elements# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.elements[0] if self.elements else None# pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue.elements), idx) for idx, queue in enumerate(pqueues)]# pragma: no cover"",
            "" # pragma: no cover"",
            ""self = type('MockSelf', (object,), {})() # pragma: no cover"",
            ""self._downloader_interface = MockDownloaderInterface() # pragma: no cover"",
            ""self.pqueues = [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from typing import List # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return 'next_item'# pragma: no cover"",
            ""# pragma: no cover"",
            ""    def __len__(self):# pragma: no cover"",
            ""        return 1 # pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues: List[MockQueue]):# pragma: no cover"",
            ""        return [(len(queue), idx) for idx, queue in enumerate(pqueues)] # pragma: no cover"",
            ""self = type('MockSelf', (object,), {})()# pragma: no cover"",
            ""self._downloader_interface = MockDownloaderInterface()# pragma: no cover"",
            ""self.pqueues = [MockQueue(), MockQueue(), MockQueue()] # pragma: no cover""
        ]
    }
]",2,2157,0.0010785,1641,0.0024615,0.00354
"When trying to execute the code snippet with the provided imports and initialization, the following error happens:
# begin error message
Execution error at line 17:
    stats = self._downloader_interface.stats(self.pqueues)
NameError: name 'self' is not defined
# end error message

Please, provide self-contained and concrete Python fixed values of the imports and initialization to solve the error and make the code snippet executable.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""from typing import List, Tuple""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def __init__(self, items):\n        self.items = items\n    def peek(self):\n        return self.items[0] if self.items else None\n    def __len__(self):\n        return len(self.items)"",
            ""class MockDownloaderInterface:\n    def stats(self, pqueues: List[MockQueue]) -> List[Tuple[int, int]]:\n        return [(len(queue), index) for index, queue in enumerate(pqueues)]"",
            ""self = type('MockSelf', (object,), {})()\nself._downloader_interface = MockDownloaderInterface()\nself.pqueues = [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])]""
        ]
    },
    {
        ""imports"": [
            ""from typing import List""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def peek(self):\n        return 'next_item'  # Simulated return value for peek method\n\n    def __len__(self):\n        return 1"",
            ""class MockDownloaderInterface:\n    def stats(self, pqueues: List[MockQueue]) -> List[tuple]:\n        return [(len(queue), index) for index, queue in enumerate(pqueues) if len(queue) > 0] or [(0, -1)]"",
            ""downloader_interface = MockDownloaderInterface()"",
            ""self = type('MockSelf', (object,), {'_downloader_interface': downloader_interface, 'pqueues': [MockQueue(), MockQueue()]})()""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Tuple""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def peek(self):\n        return 'next_item'\n\n    def __len__(self):\n        return 1"",
            ""class MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue), index) for index, queue in enumerate(pqueues) if len(queue) > 0]"",
            ""self = type('MockSelf', (object,), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue(), MockQueue()]})()""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Any""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def peek(self):\n        return 'next_item'"",
            ""class MockDownloaderInterface:\n    def stats(self, pqueues: List[Any]):\n        return [(len(pqueue), index) for index, pqueue in enumerate(pqueues) if len(pqueue) > 0]"",
            ""mock_instance = type('Mock', (object,), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue(), MockQueue(), MockQueue()]})()"",
            ""self = mock_instance""
        ]
    },
    {
        ""imports"": [
            ""from typing import List""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def peek(self):\n        return 'next_item'\n\n    def __len__(self):\n        return 1"",
            ""class MockDownloaderInterface:\n    def stats(self, pqueues: List[MockQueue]) -> List[tuple]:\n        return [(len(queue), index) for index, queue in enumerate(pqueues) if len(queue) > 0]"",
            ""self = type('MockSelf', (object,), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue(), MockQueue(), MockQueue()]})()""
        ]
    },
    {
        ""imports"": [
            ""from typing import List""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def peek(self):\n        return 'next_item'  # Simulates returning the next item without removing it"",
            ""class MockDownloaderInterface:\n    def stats(self, pqueues: List[MockQueue]):\n        return [(len(queue), index) for index, queue in enumerate(pqueues)]  # Returns length of queues for stats"",
            ""class MockSelf:\n    def __init__(self):\n        self._downloader_interface = MockDownloaderInterface()\n        self.pqueues = [MockQueue(), MockQueue()]  # Creates mock queues"",
            ""self = MockSelf()""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Tuple""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def peek(self):\n        return 'next_item'  # Simulates returning the next item without removing it"",
            ""class MockDownloaderInterface:\n    def stats(self, pqueues: List[MockQueue]) -> List[Tuple[int, int]]:\n        return [(len(pqueue), index) for index, pqueue in enumerate(pqueues) if len(pqueue) > 0]"",
            ""downloader_interface = MockDownloaderInterface()"",
            ""self = type('MockSelf', (object,), {'_downloader_interface': downloader_interface, 'pqueues': [MockQueue(), MockQueue()]})()""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Tuple""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def peek(self):\n        return 'next_item'\n    def __len__(self):\n        return 3  # Mock a non-empty queue"",
            ""class MockDownloaderInterface:\n    def stats(self, pqueues: List[MockQueue]) -> List[Tuple[int, int]]:\n        return [(len(queue), index) for index, queue in enumerate(pqueues) if len(queue) > 0]"",
            ""mock_self = type('MockSelf', (), {})()"",
            ""mock_self._downloader_interface = MockDownloaderInterface()"",
            ""mock_self.pqueues = [MockQueue(), MockQueue(), MockQueue()]"",
            ""self = mock_self""
        ]
    },
    {
        ""imports"": [
            ""from typing import List""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def __init__(self):\n        self.items = [1, 2, 3]\n    def peek(self):\n        return self.items[0] if self.items else None\n"",
            ""class MockDownloaderInterface:\n    def stats(self, pqueues: List[MockQueue]):\n        return [(len(queue.items), index) for index, queue in enumerate(pqueues) if len(queue.items) > 0]\n"",
            ""downloader_interface = MockDownloaderInterface()"",
            ""pqueues = [MockQueue(), MockQueue(), MockQueue()]  # Assuming we want to have 3 queues""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Tuple""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def __init__(self, items):\n        self.items = items\n    def peek(self):\n        return self.items[0] if self.items else None\n"",
            ""class MockDownloaderInterface:\n    def stats(self, pqueues: List[MockQueue]) -> List[Tuple[int, int]]:\n        return [(len(queue.items), index) for index, queue in enumerate(pqueues) if len(queue.items) > 0]\n"",
            ""downloader_interface = MockDownloaderInterface()"",
            ""self = type('Mock', (object,), {'_downloader_interface': downloader_interface, 'pqueues': [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])]})())""
        ]
    }
]","[
    {
        ""imports"": [
            ""from typing import List, Tuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, items):# pragma: no cover"",
            ""        self.items = items# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.items[0] if self.items else None# pragma: no cover"",
            ""    def __len__(self):# pragma: no cover"",
            ""        return len(self.items) # pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues: List[MockQueue]) -> List[Tuple[int, int]]:# pragma: no cover"",
            ""        return [(len(queue), index) for index, queue in enumerate(pqueues)] # pragma: no cover"",
            ""self = type('MockSelf', (object,), {})()# pragma: no cover"",
            ""self._downloader_interface = MockDownloaderInterface()# pragma: no cover"",
            ""self.pqueues = [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from typing import List # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return 'next_item'  # Simulated return value for peek method# pragma: no cover"",
            ""# pragma: no cover"",
            ""    def __len__(self):# pragma: no cover"",
            ""        return 1 # pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues: List[MockQueue]) -> List[tuple]:# pragma: no cover"",
            ""        return [(len(queue), index) for index, queue in enumerate(pqueues) if len(queue) > 0] or [(0, -1)] # pragma: no cover"",
            ""downloader_interface = MockDownloaderInterface() # pragma: no cover"",
            ""self = type('MockSelf', (object,), {'_downloader_interface': downloader_interface, 'pqueues': [MockQueue(), MockQueue()]})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Tuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return 'next_item'# pragma: no cover"",
            ""# pragma: no cover"",
            ""    def __len__(self):# pragma: no cover"",
            ""        return 1 # pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue), index) for index, queue in enumerate(pqueues) if len(queue) > 0] # pragma: no cover"",
            ""self = type('MockSelf', (object,), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue(), MockQueue()]})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Any # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return 'next_item' # pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues: List[Any]):# pragma: no cover"",
            ""        return [(len(pqueue), index) for index, pqueue in enumerate(pqueues) if len(pqueue) > 0] # pragma: no cover"",
            ""mock_instance = type('Mock', (object,), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue(), MockQueue(), MockQueue()]})() # pragma: no cover"",
            ""self = mock_instance # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from typing import List # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return 'next_item'# pragma: no cover"",
            ""# pragma: no cover"",
            ""    def __len__(self):# pragma: no cover"",
            ""        return 1 # pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues: List[MockQueue]) -> List[tuple]:# pragma: no cover"",
            ""        return [(len(queue), index) for index, queue in enumerate(pqueues) if len(queue) > 0] # pragma: no cover"",
            ""self = type('MockSelf', (object,), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue(), MockQueue(), MockQueue()]})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from typing import List # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return 'next_item'  # Simulates returning the next item without removing it # pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues: List[MockQueue]):# pragma: no cover"",
            ""        return [(len(queue), index) for index, queue in enumerate(pqueues)]  # Returns length of queues for stats # pragma: no cover"",
            ""class MockSelf:# pragma: no cover"",
            ""    def __init__(self):# pragma: no cover"",
            ""        self._downloader_interface = MockDownloaderInterface()# pragma: no cover"",
            ""        self.pqueues = [MockQueue(), MockQueue()]  # Creates mock queues # pragma: no cover"",
            ""self = MockSelf() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Tuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return 'next_item'  # Simulates returning the next item without removing it # pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues: List[MockQueue]) -> List[Tuple[int, int]]:# pragma: no cover"",
            ""        return [(len(pqueue), index) for index, pqueue in enumerate(pqueues) if len(pqueue) > 0] # pragma: no cover"",
            ""downloader_interface = MockDownloaderInterface() # pragma: no cover"",
            ""self = type('MockSelf', (object,), {'_downloader_interface': downloader_interface, 'pqueues': [MockQueue(), MockQueue()]})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Tuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return 'next_item'# pragma: no cover"",
            ""    def __len__(self):# pragma: no cover"",
            ""        return 3  # Mock a non-empty queue # pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues: List[MockQueue]) -> List[Tuple[int, int]]:# pragma: no cover"",
            ""        return [(len(queue), index) for index, queue in enumerate(pqueues) if len(queue) > 0] # pragma: no cover"",
            ""mock_self = type('MockSelf', (), {})() # pragma: no cover"",
            ""mock_self._downloader_interface = MockDownloaderInterface() # pragma: no cover"",
            ""mock_self.pqueues = [MockQueue(), MockQueue(), MockQueue()] # pragma: no cover"",
            ""self = mock_self # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from typing import List # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self):# pragma: no cover"",
            ""        self.items = [1, 2, 3]# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.items[0] if self.items else None# pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues: List[MockQueue]):# pragma: no cover"",
            ""        return [(len(queue.items), index) for index, queue in enumerate(pqueues) if len(queue.items) > 0]# pragma: no cover"",
            "" # pragma: no cover"",
            ""downloader_interface = MockDownloaderInterface() # pragma: no cover"",
            ""pqueues = [MockQueue(), MockQueue(), MockQueue()]  # Assuming we want to have 3 queues # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Tuple # pragma: no cover""
        ],
        ""initialization"": [
            """"
        ]
    }
]",2,2598,0.001299,1712,0.002568,0.0038669999999999
"When trying to execute the code snippet with the provided imports and initialization, the following error happens:
# begin error message
Execution error at line 10:
    stats = self._downloader_interface.stats(self.pqueues)
NameError: name 'self' is not defined
# end error message

Please, provide self-contained and concrete Python fixed values of the imports and initialization to solve the error and make the code snippet executable.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""from collections import deque""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def __init__(self, items):\n        self.items = items\n    def peek(self):\n        return self.items[0] if self.items else None\n    def __len__(self):\n        return len(self.items)"",
            ""class MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue), idx) for idx, queue in enumerate(pqueues)]"",
            ""self = type('MockSelf', (object,), {})()"",
            ""self._downloader_interface = MockDownloaderInterface()"",
            ""self.pqueues = [MockQueue(['item1', 'item2']), MockQueue([]), MockQueue(['item3'])]""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def __init__(self, items):\n        self.items = deque(items)\n    def peek(self):\n        return self.items[0] if self.items else None\n    def __len__(self):\n        return len(self.items)\n"",
            ""class MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue), idx) for idx, queue in enumerate(pqueues)]\n"",
            ""self = type('MockObject', (), {})()"",
            ""self._downloader_interface = MockDownloaderInterface()"",
            ""self.pqueues = [MockQueue(['item1', 'item2', 'item3']), MockQueue([]), MockQueue(['item4'])]""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def __init__(self, elements):\n        self.elements = elements\n    def peek(self):\n        return self.elements[0] if self.elements else None\n    def __len__(self):\n        return len(self.elements)"",
            ""class MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue), index) for index, queue in enumerate(pqueues) if len(queue) > 0]"",
            ""self = type('MockSelf', (object,), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue(['first_item', 'second_item']), MockQueue([]), MockQueue(['third_item'])]})()""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def __init__(self):\n        self.items = deque()\n    def peek(self):\n        return self.items[0] if self.items else None\n    def __len__(self):\n        return len(self.items)"",
            ""class MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue), index) for index, queue in enumerate(pqueues)]"",
            ""self = type('MockObject', (), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue(), MockQueue()]})()"",
            ""self.pqueues[0].items.append('item_1')"",
            ""self.pqueues[1].items.append('item_2')""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def __init__(self, items):\n        self.items = items\n    def peek(self):\n        return self.items[0] if self.items else None\n    def __len__(self):\n        return len(self.items)"",
            ""class MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue), index) for index, queue in enumerate(pqueues)]"",
            ""self = type('MockObject', (object,), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': []})()"",
            ""self.pqueues = [MockQueue(['item1', 'item2']), MockQueue([]), MockQueue(['item3'])]""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def __init__(self):\n        self.items = deque(['item1'])  # mocked queue with one item\n    def peek(self):\n        return self.items[0] if self.items else None\n    def __len__(self):\n        return len(self.items)"",
            ""class MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue), index) for index, queue in enumerate(pqueues)]"",
            ""self = type('MockSelf', (object,), {})()\nself._downloader_interface = MockDownloaderInterface()"",
            ""self.pqueues = [MockQueue(), MockQueue()]""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def __init__(self, items=None):\n        self.items = items or []\n    def peek(self):\n        return self.items[0] if self.items else None\n    def __len__(self):\n        return len(self.items)"",
            ""class MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue.items), i) for i, queue in enumerate(pqueues)]"",
            ""self = type('MockObject', (), {})()"",
            ""self._downloader_interface = MockDownloaderInterface()"",
            ""self.pqueues = [MockQueue(['item1', 'item2']), MockQueue([]), MockQueue(['item3'])]""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Tuple""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def __init__(self, items):\n        self.items = items\n    def peek(self):\n        return self.items[0] if self.items else None"",
            ""class MockDownloaderInterface:\n    def stats(self, pqueues: List[MockQueue]) -> List[Tuple[int, int]]:\n        return [(len(queue.items), index) for index, queue in enumerate(pqueues)]"",
            ""self = type('MockSelf', (object,), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])]})()""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def __init__(self, items):\n        self.items = items\n    def peek(self):\n        return self.items[0] if self.items else None\n"",
            ""class MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue.items), idx) for idx, queue in enumerate(pqueues)]\n"",
            ""self = type('MockSelf', (object,), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6]) ]})()""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def __init__(self):\n        self.items = deque(['next_item'])\n    def peek(self):\n        return self.items[0]\n\nclass MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue.items), idx) for idx, queue in enumerate(pqueues) if queue.items]\n\nself = type('MockSelf', (), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue(), MockQueue(), MockQueue()]})()""
        ]
    }
]","[
    {
        ""imports"": [
            ""from collections import deque # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, items):# pragma: no cover"",
            ""        self.items = items# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.items[0] if self.items else None# pragma: no cover"",
            ""    def __len__(self):# pragma: no cover"",
            ""        return len(self.items) # pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue), idx) for idx, queue in enumerate(pqueues)] # pragma: no cover"",
            ""self = type('MockSelf', (object,), {})() # pragma: no cover"",
            ""self._downloader_interface = MockDownloaderInterface() # pragma: no cover"",
            ""self.pqueues = [MockQueue(['item1', 'item2']), MockQueue([]), MockQueue(['item3'])] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, items):# pragma: no cover"",
            ""        self.items = deque(items)# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.items[0] if self.items else None# pragma: no cover"",
            ""    def __len__(self):# pragma: no cover"",
            ""        return len(self.items)# pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue), idx) for idx, queue in enumerate(pqueues)]# pragma: no cover"",
            "" # pragma: no cover"",
            ""self = type('MockObject', (), {})() # pragma: no cover"",
            ""self._downloader_interface = MockDownloaderInterface() # pragma: no cover"",
            ""self.pqueues = [MockQueue(['item1', 'item2', 'item3']), MockQueue([]), MockQueue(['item4'])] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, elements):# pragma: no cover"",
            ""        self.elements = elements# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.elements[0] if self.elements else None# pragma: no cover"",
            ""    def __len__(self):# pragma: no cover"",
            ""        return len(self.elements) # pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue), index) for index, queue in enumerate(pqueues) if len(queue) > 0] # pragma: no cover"",
            ""self = type('MockSelf', (object,), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue(['first_item', 'second_item']), MockQueue([]), MockQueue(['third_item'])]})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self):# pragma: no cover"",
            ""        self.items = deque()# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.items[0] if self.items else None# pragma: no cover"",
            ""    def __len__(self):# pragma: no cover"",
            ""        return len(self.items) # pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue), index) for index, queue in enumerate(pqueues)] # pragma: no cover"",
            ""self = type('MockObject', (), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue(), MockQueue()]})() # pragma: no cover"",
            ""self.pqueues[0].items.append('item_1') # pragma: no cover"",
            ""self.pqueues[1].items.append('item_2') # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, items):# pragma: no cover"",
            ""        self.items = items# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.items[0] if self.items else None# pragma: no cover"",
            ""    def __len__(self):# pragma: no cover"",
            ""        return len(self.items) # pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue), index) for index, queue in enumerate(pqueues)] # pragma: no cover"",
            ""self = type('MockObject', (object,), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': []})() # pragma: no cover"",
            ""self.pqueues = [MockQueue(['item1', 'item2']), MockQueue([]), MockQueue(['item3'])] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self):# pragma: no cover"",
            ""        self.items = deque(['item1'])  # mocked queue with one item# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.items[0] if self.items else None# pragma: no cover"",
            ""    def __len__(self):# pragma: no cover"",
            ""        return len(self.items) # pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue), index) for index, queue in enumerate(pqueues)] # pragma: no cover"",
            ""self = type('MockSelf', (object,), {})()# pragma: no cover"",
            ""self._downloader_interface = MockDownloaderInterface() # pragma: no cover"",
            ""self.pqueues = [MockQueue(), MockQueue()] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, items=None):# pragma: no cover"",
            ""        self.items = items or []# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.items[0] if self.items else None# pragma: no cover"",
            ""    def __len__(self):# pragma: no cover"",
            ""        return len(self.items) # pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue.items), i) for i, queue in enumerate(pqueues)] # pragma: no cover"",
            ""self = type('MockObject', (), {})() # pragma: no cover"",
            ""self._downloader_interface = MockDownloaderInterface() # pragma: no cover"",
            ""self.pqueues = [MockQueue(['item1', 'item2']), MockQueue([]), MockQueue(['item3'])] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Tuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, items):# pragma: no cover"",
            ""        self.items = items# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.items[0] if self.items else None # pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues: List[MockQueue]) -> List[Tuple[int, int]]:# pragma: no cover"",
            ""        return [(len(queue.items), index) for index, queue in enumerate(pqueues)] # pragma: no cover"",
            ""self = type('MockSelf', (object,), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])]})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, items):# pragma: no cover"",
            ""        self.items = items# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.items[0] if self.items else None# pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue.items), idx) for idx, queue in enumerate(pqueues)]# pragma: no cover"",
            "" # pragma: no cover"",
            ""self = type('MockSelf', (object,), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6]) ]})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self):# pragma: no cover"",
            ""        self.items = deque(['next_item'])# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.items[0]# pragma: no cover"",
            ""# pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue.items), idx) for idx, queue in enumerate(pqueues) if queue.items]# pragma: no cover"",
            ""# pragma: no cover"",
            ""self = type('MockSelf', (), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue(), MockQueue(), MockQueue()]})() # pragma: no cover""
        ]
    }
]",2,3016,0.001508,1775,0.0026625,0.0041705
"When trying to execute the code snippet with the provided imports and initialization, the following error happens:
# begin error message
Execution error at line 15:
    stats = self._downloader_interface.stats(self.pqueues)
NameError: name 'self' is not defined
# end error message

Please, provide self-contained and concrete Python fixed values of the imports and initialization to solve the error and make the code snippet executable.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""from collections import deque""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def __init__(self, items):\n        self.items = items\n    def peek(self):\n        return self.items[0] if self.items else None"",
            ""class MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue.items), i) for i, queue in enumerate(pqueues) if len(queue.items) > 0]"",
            ""mock_queue_1 = MockQueue([1, 2, 3])\nmock_queue_2 = MockQueue([])\nmock_queue_3 = MockQueue([4, 5])"",
            ""self = type('Mock', (), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [mock_queue_1, mock_queue_2, mock_queue_3]})()""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def __init__(self, items):\n        self.items = items\n    def peek(self):\n        return self.items[0] if self.items else None"",
            ""class MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue.items), i) for i, queue in enumerate(pqueues) if len(queue.items) > 0]"",
            ""self = type('Mock', (), {})()"",
            ""self._downloader_interface = MockDownloaderInterface()"",
            ""self.pqueues = [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])]""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def __init__(self, items):\n        self.items = items\n    def peek(self):\n        return self.items[0] if self.items else None\n\n    def __len__(self):\n        return len(self.items)"",
            ""class MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue), index) for index, queue in enumerate(pqueues)] if pqueues else None"",
            ""self = type('MockSelf', (), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])]})()""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def __init__(self, items):\n        self.items = items\n    def peek(self):\n        return self.items[0] if self.items else None"",
            ""class MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue.items), idx) for idx, queue in enumerate(pqueues) if queue.items]"",
            ""self = type('MockSelf', (object,), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])]})()""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def __init__(self, items):\n        self.items = items\n    def peek(self):\n        return self.items[0] if self.items else None\n\n    def __len__(self):\n        return len(self.items)"",
            ""class MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [[len(queue) for queue in pqueues], [i for i in range(len(pqueues))]]\n\nself = type('Mock', (), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])]})()""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def __init__(self, items):\n        self.items = items\n    def peek(self):\n        return self.items[0] if self.items else None\n\n    def __len__(self):\n        return len(self.items)\n\nclass MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue.items), index) for index, queue in enumerate(pqueues) if queue.items]"",
            ""self = type('Mock', (object,), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])]})()""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def __init__(self, items):\n        self.items = items\n    def peek(self):\n        return self.items[0] if self.items else None\n    def __len__(self):\n        return len(self.items)\n"",
            ""class MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue), index) for index, queue in enumerate(pqueues) if queue]"",
            ""self = type('Mock', (object,), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])]})()""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def __init__(self, items):\n        self.items = items\n    def peek(self):\n        return self.items[0] if self.items else None"",
            ""class MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue.items), index) for index, queue in enumerate(pqueues) if queue.items]"",
            ""self = type('Mock', (), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5])]} )()""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def peek(self):\n        return 'next_item'\n\n    def __len__(self):\n        return 1"",
            ""class MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue), idx) for idx, queue in enumerate(pqueues) if len(queue) > 0]"",
            ""self = type('Mock', (object,), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue(), MockQueue(), MockQueue()]})()""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def __init__(self, items):\n        self._items = items\n    def peek(self):\n        return self._items[0] if self._items else None\n"",
            ""class MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue._items), index) for index, queue in enumerate(pqueues)]\n"",
            ""self = type('Mock', (object,), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5])]})()""
        ]
    }
]","[
    {
        ""imports"": [
            ""from collections import deque # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, items):# pragma: no cover"",
            ""        self.items = items# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.items[0] if self.items else None # pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue.items), i) for i, queue in enumerate(pqueues) if len(queue.items) > 0] # pragma: no cover"",
            ""mock_queue_1 = MockQueue([1, 2, 3])# pragma: no cover"",
            ""mock_queue_2 = MockQueue([])# pragma: no cover"",
            ""mock_queue_3 = MockQueue([4, 5]) # pragma: no cover"",
            ""self = type('Mock', (), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [mock_queue_1, mock_queue_2, mock_queue_3]})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, items):# pragma: no cover"",
            ""        self.items = items# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.items[0] if self.items else None # pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue.items), i) for i, queue in enumerate(pqueues) if len(queue.items) > 0] # pragma: no cover"",
            ""self = type('Mock', (), {})() # pragma: no cover"",
            ""self._downloader_interface = MockDownloaderInterface() # pragma: no cover"",
            ""self.pqueues = [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, items):# pragma: no cover"",
            ""        self.items = items# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.items[0] if self.items else None# pragma: no cover"",
            ""# pragma: no cover"",
            ""    def __len__(self):# pragma: no cover"",
            ""        return len(self.items) # pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue), index) for index, queue in enumerate(pqueues)] if pqueues else None # pragma: no cover"",
            ""self = type('MockSelf', (), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])]})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, items):# pragma: no cover"",
            ""        self.items = items# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.items[0] if self.items else None # pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue.items), idx) for idx, queue in enumerate(pqueues) if queue.items] # pragma: no cover"",
            ""self = type('MockSelf', (object,), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])]})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, items):# pragma: no cover"",
            ""        self.items = items# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.items[0] if self.items else None# pragma: no cover"",
            ""# pragma: no cover"",
            ""    def __len__(self):# pragma: no cover"",
            ""        return len(self.items) # pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [[len(queue) for queue in pqueues], [i for i in range(len(pqueues))]]# pragma: no cover"",
            ""# pragma: no cover"",
            ""self = type('Mock', (), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])]})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, items):# pragma: no cover"",
            ""        self.items = items# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.items[0] if self.items else None# pragma: no cover"",
            ""# pragma: no cover"",
            ""    def __len__(self):# pragma: no cover"",
            ""        return len(self.items)# pragma: no cover"",
            ""# pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue.items), index) for index, queue in enumerate(pqueues) if queue.items] # pragma: no cover"",
            ""self = type('Mock', (object,), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])]})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, items):# pragma: no cover"",
            ""        self.items = items# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.items[0] if self.items else None# pragma: no cover"",
            ""    def __len__(self):# pragma: no cover"",
            ""        return len(self.items)# pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue), index) for index, queue in enumerate(pqueues) if queue] # pragma: no cover"",
            ""self = type('Mock', (object,), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])]})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, items):# pragma: no cover"",
            ""        self.items = items# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.items[0] if self.items else None # pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue.items), index) for index, queue in enumerate(pqueues) if queue.items] # pragma: no cover"",
            ""self = type('Mock', (), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5])]} )() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return 'next_item'# pragma: no cover"",
            ""# pragma: no cover"",
            ""    def __len__(self):# pragma: no cover"",
            ""        return 1 # pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue), idx) for idx, queue in enumerate(pqueues) if len(queue) > 0] # pragma: no cover"",
            ""self = type('Mock', (object,), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue(), MockQueue(), MockQueue()]})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, items):# pragma: no cover"",
            ""        self._items = items# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self._items[0] if self._items else None# pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue._items), index) for index, queue in enumerate(pqueues)]# pragma: no cover"",
            "" # pragma: no cover"",
            ""self = type('Mock', (object,), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5])]})() # pragma: no cover""
        ]
    }
]",2,3438,0.001719,1764,0.002646,0.004365
"When trying to execute the code snippet with the provided imports and initialization, the following error happens:
# begin error message
Execution error at line 10:
    stats = self._downloader_interface.stats(self.pqueues)
NameError: name 'self' is not defined
# end error message

Please, provide self-contained and concrete Python fixed values of the imports and initialization to solve the error and make the code snippet executable.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""from collections import deque""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def __init__(self, items):\n        self.items = items\n    def peek(self):\n        return self.items[0] if self.items else None\n\nclass MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue.items), i) for i, queue in enumerate(pqueues) if queue.items]"",
            ""self = type('Mock', (object,), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])]})()""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Dict, Any, Tuple""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def __init__(self, items: List[str]):\n        self.items = items\n    def peek(self) -> Any:\n        return self.items[0] if self.items else None"",
            ""class MockDownloaderInterface:\n    def stats(self, pqueues: List[MockQueue]) -> List[Tuple[int, int]]:\n        return [(len(queue.items), idx) for idx, queue in enumerate(pqueues) if queue.items]"",
            ""self = type('Mock', (), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue(['item1', 'item2', 'item3']), MockQueue([]), MockQueue(['item4', 'item5'])]})()""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Tuple, Any""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def __init__(self, items):\n        self.items = items\n    def peek(self):\n        return self.items[0] if self.items else None"",
            ""class MockDownloaderInterface:\n    def stats(self, pqueues: List[MockQueue]) -> List[Tuple[int, int]]:\n        return [(len(queue.items), idx) for idx, queue in enumerate(pqueues) if queue.items]"",
            ""self._downloader_interface = MockDownloaderInterface()"",
            ""self.pqueues = [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])]""
        ]
    },
    {
        ""imports"": [
            ""from typing import List"",
            ""from collections import deque""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def peek(self):\n        return 'next_item'"",
            ""class MockDownloaderInterface:\n    def stats(self, pqueues: List[MockQueue]):\n        return [(len(queue), index) for index, queue in enumerate(pqueues)]"",
            ""self = type('Mock', (object,), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue(), MockQueue()]})()""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def __init__(self, items):\n        self.items = items\n    def peek(self):\n        return self.items[0] if self.items else None"",
            ""class MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue.items), idx) for idx, queue in enumerate(pqueues)]"",
            ""self = type('Mock', (object,), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4])]})()""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Tuple""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def __init__(self, items):\n        self.items = items\n    def peek(self):\n        return self.items[0] if self.items else None"",
            ""class MockDownloaderInterface:\n    def stats(self, pqueues: List[MockQueue]) -> List[Tuple[int, int]]:\n        return [(len(queue.items), idx) for idx, queue in enumerate(pqueues)]"",
            ""self = type('MockSelf', (), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5])]})()""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def __init__(self, items):\n        self.items = items\n    def peek(self):\n        return self.items[0] if self.items else None"",
            ""class MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue.items), index) for index, queue in enumerate(pqueues) if queue.items]"",
            ""self = type('Object', (), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])]})()""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def __init__(self):\n        self.items = deque(['first_item'])\n    def peek(self):\n        return self.items[0] if self.items else None"",
            ""class MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue.items), idx) for idx, queue in enumerate(pqueues)]"",
            ""self = type('Mock', (object,), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue(), MockQueue()]})()""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Tuple""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def peek(self):\n        return 'next_item'"",
            ""class MockDownloaderInterface:\n    def stats(self, pqueues: List[MockQueue]) -> List[Tuple[int, int]]:\n        return [(len(queue.peek() if hasattr(queue, 'peek') else []), i) for i, queue in enumerate(pqueues)]"",
            ""self = type('Mock', (object,), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue(), MockQueue()]})()""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def peek(self):\n        return 'next_item'\n    def __len__(self):\n        return 1"",
            ""class MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue), index) for index, queue in enumerate(pqueues)]"",
            ""self = type('Mock', (), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue(), MockQueue(), MockQueue()]})()""
        ]
    }
]","[
    {
        ""imports"": [
            ""from collections import deque # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, items):# pragma: no cover"",
            ""        self.items = items# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.items[0] if self.items else None# pragma: no cover"",
            ""# pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue.items), i) for i, queue in enumerate(pqueues) if queue.items] # pragma: no cover"",
            ""self = type('Mock', (object,), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])]})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Dict, Any, Tuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, items: List[str]):# pragma: no cover"",
            ""        self.items = items# pragma: no cover"",
            ""    def peek(self) -> Any:# pragma: no cover"",
            ""        return self.items[0] if self.items else None # pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues: List[MockQueue]) -> List[Tuple[int, int]]:# pragma: no cover"",
            ""        return [(len(queue.items), idx) for idx, queue in enumerate(pqueues) if queue.items] # pragma: no cover"",
            ""self = type('Mock', (), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue(['item1', 'item2', 'item3']), MockQueue([]), MockQueue(['item4', 'item5'])]})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Tuple, Any # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, items):# pragma: no cover"",
            ""        self.items = items# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.items[0] if self.items else None # pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues: List[MockQueue]) -> List[Tuple[int, int]]:# pragma: no cover"",
            ""        return [(len(queue.items), idx) for idx, queue in enumerate(pqueues) if queue.items] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from typing import List # pragma: no cover"",
            ""from collections import deque # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return 'next_item' # pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues: List[MockQueue]):# pragma: no cover"",
            ""        return [(len(queue), index) for index, queue in enumerate(pqueues)] # pragma: no cover"",
            ""self = type('Mock', (object,), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue(), MockQueue()]})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, items):# pragma: no cover"",
            ""        self.items = items# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.items[0] if self.items else None # pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue.items), idx) for idx, queue in enumerate(pqueues)] # pragma: no cover"",
            ""self = type('Mock', (object,), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4])]})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Tuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, items):# pragma: no cover"",
            ""        self.items = items# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.items[0] if self.items else None # pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues: List[MockQueue]) -> List[Tuple[int, int]]:# pragma: no cover"",
            ""        return [(len(queue.items), idx) for idx, queue in enumerate(pqueues)] # pragma: no cover"",
            ""self = type('MockSelf', (), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5])]})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, items):# pragma: no cover"",
            ""        self.items = items# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.items[0] if self.items else None # pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue.items), index) for index, queue in enumerate(pqueues) if queue.items] # pragma: no cover"",
            ""self = type('Object', (), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5, 6])]})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self):# pragma: no cover"",
            ""        self.items = deque(['first_item'])# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.items[0] if self.items else None # pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue.items), idx) for idx, queue in enumerate(pqueues)] # pragma: no cover"",
            ""self = type('Mock', (object,), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue(), MockQueue()]})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Tuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return 'next_item' # pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues: List[MockQueue]) -> List[Tuple[int, int]]:# pragma: no cover"",
            ""        return [(len(queue.peek() if hasattr(queue, 'peek') else []), i) for i, queue in enumerate(pqueues)] # pragma: no cover"",
            ""self = type('Mock', (object,), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue(), MockQueue()]})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return 'next_item'# pragma: no cover"",
            ""    def __len__(self):# pragma: no cover"",
            ""        return 1 # pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue), index) for index, queue in enumerate(pqueues)] # pragma: no cover"",
            ""self = type('Mock', (), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue(), MockQueue(), MockQueue()]})() # pragma: no cover""
        ]
    }
]",2,3842,0.001921,1600,0.0024,0.004321
"When trying to execute the code snippet with the provided imports and initialization, the following error happens:
# begin error message
Execution error at line 6:
    return [(len(queue), index) for index, queue in enumerate(pqueues)]# pragma: no cover
TypeError: object of type 'MockQueue' has no len()
# end error message

Please, provide self-contained and concrete Python fixed values of the imports and initialization to solve the error and make the code snippet executable.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""from collections import deque"",
            ""from typing import List, Dict, Any""
        ],
        ""initialization"": [
            ""class MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue.items), index) for index, queue in enumerate(pqueues)]\n"",
            ""class MockQueue:\n    def __init__(self, items):\n        self.items = deque(items)\n    \n    def peek(self):\n        return self.items[0] if self.items else None"",
            ""self = type('Mock', (), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([4, 5]), MockQueue([])]})()""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque"",
            ""from typing import List, Dict, Any""
        ],
        ""initialization"": [
            ""class MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue.items), index) for index, queue in enumerate(pqueues)]\n\nclass MockQueue:\n    def __init__(self, items):\n        self.items = deque(items)\n    \n    def peek(self):\n        return self.items[0] if self.items else None"",
            ""self = type('Mock', (), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([4, 5]), MockQueue([])]})()""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque"",
            ""from typing import List, Dict, Any""
        ],
        ""initialization"": [
            ""class MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue.items), index) for index, queue in enumerate(pqueues)]"",
            ""class MockQueue:\n    def __init__(self, items):\n        self.items = deque(items)\n    \n    def peek(self):\n        return self.items[0] if self.items else None"",
            ""self = type('Mock', (), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([4, 5]), MockQueue([])]})()""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque"",
            ""from typing import List""
        ],
        ""initialization"": [
            ""class MockDownloaderInterface:\n    def stats(self, pqueues: List['MockQueue']):\n        return [(len(queue.items), index) for index, queue in enumerate(pqueues)]"",
            ""class MockQueue:\n    def __init__(self, items):\n        self.items = deque(items)\n    \n    def peek(self):\n        return self.items[0] if self.items else None"",
            ""self = type('Mock', (), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([4, 5]), MockQueue([])]})()""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque"",
            ""from typing import List, Dict""
        ],
        ""initialization"": [
            ""class MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue.items), index) for index, queue in enumerate(pqueues)]\n\nclass MockQueue:\n    def __init__(self, items):\n        self.items = deque(items)\n    \n    def peek(self):\n        return self.items[0] if self.items else None"",
            ""self = type('Mock', (), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([4, 5]), MockQueue([])]})()""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque"",
            ""from typing import List, Dict, Any""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def __init__(self, items):\n        self.items = deque(items)\n\n    def peek(self):\n        return self.items[0] if self.items else None\n\n    def __len__(self):\n        return len(self.items)"",
            ""class MockDownloaderInterface:\n    def stats(self, pqueues: List[MockQueue]) -> List[tuple]:\n        return [(len(queue), index) for index, queue in enumerate(pqueues)]"",
            ""self = type('Mock', (), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([4, 5]), MockQueue([])]})()""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque""
        ],
        ""initialization"": [
            ""class MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue.items), index) for index, queue in enumerate(pqueues)]\n\nclass MockQueue:\n    def __init__(self, items):\n        self.items = deque(items)\n    \n    def peek(self):\n        return self.items[0] if self.items else None"",
            ""self = type('Mock', (), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([4, 5]), MockQueue([])]})()""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque"",
            ""from typing import List, Dict""
        ],
        ""initialization"": [
            ""class MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue.items), index) for index, queue in enumerate(pqueues)]"",
            ""class MockQueue:\n    def __init__(self, items):\n        self.items = deque(items)\n    \n    def peek(self):\n        return self.items[0] if self.items else None"",
            ""self = type('Mock', (), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([4, 5]), MockQueue([])]})()""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque""
        ],
        ""initialization"": [
            ""class MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue.items), index) for index, queue in enumerate(pqueues)]"",
            ""class MockQueue:\n    def __init__(self, items):\n        self.items = deque(items)\n    \n    def peek(self):\n        return self.items[0] if self.items else None"",
            ""self = type('Mock', (), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([4, 5]), MockQueue([])]})()""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque"",
            ""from typing import List, Dict, Any""
        ],
        ""initialization"": [
            ""class MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue.items), index) for index, queue in enumerate(pqueues)]"",
            ""class MockQueue:\n    def __init__(self, items):\n        self.items = deque(items)\n    \n    def peek(self):\n        return self.items[0] if self.items else None"",
            ""self = type('Mock', (), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([4, 5]), MockQueue([])]})()""
        ]
    }
]","[
    {
        ""imports"": [
            ""from collections import deque # pragma: no cover"",
            ""from typing import List, Dict, Any # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue.items), index) for index, queue in enumerate(pqueues)]# pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, items):# pragma: no cover"",
            ""        self.items = deque(items)# pragma: no cover"",
            ""    # pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.items[0] if self.items else None # pragma: no cover"",
            ""self = type('Mock', (), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([4, 5]), MockQueue([])]})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque # pragma: no cover"",
            ""from typing import List, Dict, Any # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue.items), index) for index, queue in enumerate(pqueues)]# pragma: no cover"",
            ""# pragma: no cover"",
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, items):# pragma: no cover"",
            ""        self.items = deque(items)# pragma: no cover"",
            ""    # pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.items[0] if self.items else None # pragma: no cover"",
            ""self = type('Mock', (), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([4, 5]), MockQueue([])]})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque # pragma: no cover"",
            ""from typing import List, Dict, Any # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue.items), index) for index, queue in enumerate(pqueues)] # pragma: no cover"",
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, items):# pragma: no cover"",
            ""        self.items = deque(items)# pragma: no cover"",
            ""    # pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.items[0] if self.items else None # pragma: no cover"",
            ""self = type('Mock', (), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([4, 5]), MockQueue([])]})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque # pragma: no cover"",
            ""from typing import List # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues: List['MockQueue']):# pragma: no cover"",
            ""        return [(len(queue.items), index) for index, queue in enumerate(pqueues)] # pragma: no cover"",
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, items):# pragma: no cover"",
            ""        self.items = deque(items)# pragma: no cover"",
            ""    # pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.items[0] if self.items else None # pragma: no cover"",
            ""self = type('Mock', (), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([4, 5]), MockQueue([])]})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque # pragma: no cover"",
            ""from typing import List, Dict # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue.items), index) for index, queue in enumerate(pqueues)]# pragma: no cover"",
            ""# pragma: no cover"",
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, items):# pragma: no cover"",
            ""        self.items = deque(items)# pragma: no cover"",
            ""    # pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.items[0] if self.items else None # pragma: no cover"",
            ""self = type('Mock', (), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([4, 5]), MockQueue([])]})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque # pragma: no cover"",
            ""from typing import List, Dict, Any # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, items):# pragma: no cover"",
            ""        self.items = deque(items)# pragma: no cover"",
            ""# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.items[0] if self.items else None# pragma: no cover"",
            ""# pragma: no cover"",
            ""    def __len__(self):# pragma: no cover"",
            ""        return len(self.items) # pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues: List[MockQueue]) -> List[tuple]:# pragma: no cover"",
            ""        return [(len(queue), index) for index, queue in enumerate(pqueues)] # pragma: no cover"",
            ""self = type('Mock', (), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([4, 5]), MockQueue([])]})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue.items), index) for index, queue in enumerate(pqueues)]# pragma: no cover"",
            ""# pragma: no cover"",
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, items):# pragma: no cover"",
            ""        self.items = deque(items)# pragma: no cover"",
            ""    # pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.items[0] if self.items else None # pragma: no cover"",
            ""self = type('Mock', (), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([4, 5]), MockQueue([])]})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque # pragma: no cover"",
            ""from typing import List, Dict # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue.items), index) for index, queue in enumerate(pqueues)] # pragma: no cover"",
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, items):# pragma: no cover"",
            ""        self.items = deque(items)# pragma: no cover"",
            ""    # pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.items[0] if self.items else None # pragma: no cover"",
            ""self = type('Mock', (), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([4, 5]), MockQueue([])]})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue.items), index) for index, queue in enumerate(pqueues)] # pragma: no cover"",
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, items):# pragma: no cover"",
            ""        self.items = deque(items)# pragma: no cover"",
            ""    # pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.items[0] if self.items else None # pragma: no cover"",
            ""self = type('Mock', (), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([4, 5]), MockQueue([])]})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque # pragma: no cover"",
            ""from typing import List, Dict, Any # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue.items), index) for index, queue in enumerate(pqueues)] # pragma: no cover"",
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, items):# pragma: no cover"",
            ""        self.items = deque(items)# pragma: no cover"",
            ""    # pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.items[0] if self.items else None # pragma: no cover"",
            ""self = type('Mock', (), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([4, 5]), MockQueue([])]})() # pragma: no cover""
        ]
    }
]",2,4327,0.0021635,1762,0.002643,0.0048065
"When trying to execute the code snippet with the provided imports and initialization, the following error happens:
# begin error message
Execution error at line 20:
    stats = self._downloader_interface.stats(self.pqueues)
NameError: name 'self' is not defined
# end error message

Please, provide self-contained and concrete Python fixed values of the imports and initialization to solve the error and make the code snippet executable.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""from typing import List, Any""
        ],
        ""initialization"": [
            ""class MockDownloaderInterface:\n    def stats(self, pqueues: List[Any]) -> List[tuple]:\n        return [(len(queue.items), index) for index, queue in enumerate(pqueues)]"",
            ""class MockQueue:\n    def __init__(self, items):\n        self.items = items\n    def peek(self):\n        return self.items[0] if self.items else None"",
            ""self = type('Mock', (object,), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5])]}))()""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Dict""
        ],
        ""initialization"": [
            ""class MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue.items), index) for index, queue in enumerate(pqueues)]"",
            ""class MockQueue:\n    def __init__(self, items):\n        self.items = items\n    def peek(self):\n        return self.items[0] if self.items else None"",
            ""mock_downloader_interface = MockDownloaderInterface()"",
            ""mock_queues = [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5])]"",
            ""self = type('Mock', (), {'_downloader_interface': mock_downloader_interface, 'pqueues': mock_queues})()""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque""
        ],
        ""initialization"": [
            ""class MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue.items), index) for index, queue in enumerate(pqueues)]"",
            ""class MockQueue:\n    def __init__(self, items):\n        self.items = deque(items)\n    def peek(self):\n        return self.items[0] if self.items else None"",
            ""self = type('Mock', (object,), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5])]})()""
        ]
    },
    {
        ""imports"": [
            ""from typing import List""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def __init__(self, items):\n        self.items = items\n\n    def peek(self):\n        return self.items[0] if self.items else None\n\nclass MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue.items), index) for index, queue in enumerate(pqueues)]"",
            ""self = type('Mock', (object,), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5])]} )()""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def __init__(self, items):\n        self.items = deque(items)\n    \n    def peek(self):\n        return self.items[0] if self.items else None\n\nclass MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue.items), index) for index, queue in enumerate(pqueues)]"",
            ""self = type('Mock', (object,), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5])]} )()""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def __init__(self, items):\n        self.items = deque(items)\n    \n    def peek(self):\n        return self.items[0] if self.items else None\n\nclass MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue.items), index) for index, queue in enumerate(pqueues)]"",
            ""self = type('Mock', (), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5])]} )()""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Any""
        ],
        ""initialization"": [
            ""class MockQueue:\n    def __init__(self, items):\n        self.items = items\n    def peek(self):\n        return self.items[0] if self.items else None\n\nclass MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue.items), i) for i, queue in enumerate(pqueues)]"",
            ""self = type('Mock', (object,), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5])]} )()""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque""
        ],
        ""initialization"": [
            ""class MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue.items), index) for index, queue in enumerate(pqueues)]"",
            ""class MockQueue:\n    def __init__(self, items):\n        self.items = deque(items)\n    def peek(self):\n        return self.items[0] if self.items else None"",
            ""self = type('Mock', (), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5])]} )()""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque""
        ],
        ""initialization"": [
            ""class MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue.items), index) for index, queue in enumerate(pqueues)]"",
            ""class MockQueue:\n    def __init__(self, items):\n        self.items = deque(items)\n    def peek(self):\n        return self.items[0] if self.items else None"",
            ""self = type('Mock', (), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5])]} )()""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque""
        ],
        ""initialization"": [
            ""class MockDownloaderInterface:\n    def stats(self, pqueues):\n        return [(len(queue.items), index) for index, queue in enumerate(pqueues)]"",
            ""class MockQueue:\n    def __init__(self, items):\n        self.items = deque(items)\n    def peek(self):\n        return self.items[0] if self.items else None"",
            ""self = type('Mock', (), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5])]})()""
        ]
    }
]","[
    {
        ""imports"": [
            ""from typing import List, Any # pragma: no cover""
        ],
        ""initialization"": [
            """"
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Dict # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue.items), index) for index, queue in enumerate(pqueues)] # pragma: no cover"",
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, items):# pragma: no cover"",
            ""        self.items = items# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.items[0] if self.items else None # pragma: no cover"",
            ""mock_downloader_interface = MockDownloaderInterface() # pragma: no cover"",
            ""mock_queues = [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5])] # pragma: no cover"",
            ""self = type('Mock', (), {'_downloader_interface': mock_downloader_interface, 'pqueues': mock_queues})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue.items), index) for index, queue in enumerate(pqueues)] # pragma: no cover"",
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, items):# pragma: no cover"",
            ""        self.items = deque(items)# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.items[0] if self.items else None # pragma: no cover"",
            ""self = type('Mock', (object,), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5])]})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from typing import List # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, items):# pragma: no cover"",
            ""        self.items = items# pragma: no cover"",
            ""# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.items[0] if self.items else None# pragma: no cover"",
            ""# pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue.items), index) for index, queue in enumerate(pqueues)] # pragma: no cover"",
            ""self = type('Mock', (object,), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5])]} )() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, items):# pragma: no cover"",
            ""        self.items = deque(items)# pragma: no cover"",
            ""    # pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.items[0] if self.items else None# pragma: no cover"",
            ""# pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue.items), index) for index, queue in enumerate(pqueues)] # pragma: no cover"",
            ""self = type('Mock', (object,), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5])]} )() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, items):# pragma: no cover"",
            ""        self.items = deque(items)# pragma: no cover"",
            ""    # pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.items[0] if self.items else None# pragma: no cover"",
            ""# pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue.items), index) for index, queue in enumerate(pqueues)] # pragma: no cover"",
            ""self = type('Mock', (), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5])]} )() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Any # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, items):# pragma: no cover"",
            ""        self.items = items# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.items[0] if self.items else None# pragma: no cover"",
            ""# pragma: no cover"",
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue.items), i) for i, queue in enumerate(pqueues)] # pragma: no cover"",
            ""self = type('Mock', (object,), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5])]} )() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue.items), index) for index, queue in enumerate(pqueues)] # pragma: no cover"",
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, items):# pragma: no cover"",
            ""        self.items = deque(items)# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.items[0] if self.items else None # pragma: no cover"",
            ""self = type('Mock', (), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5])]} )() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue.items), index) for index, queue in enumerate(pqueues)] # pragma: no cover"",
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, items):# pragma: no cover"",
            ""        self.items = deque(items)# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.items[0] if self.items else None # pragma: no cover"",
            ""self = type('Mock', (), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5])]} )() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import deque # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockDownloaderInterface:# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue.items), index) for index, queue in enumerate(pqueues)] # pragma: no cover"",
            ""class MockQueue:# pragma: no cover"",
            ""    def __init__(self, items):# pragma: no cover"",
            ""        self.items = deque(items)# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        return self.items[0] if self.items else None # pragma: no cover"",
            ""self = type('Mock', (), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5])]})() # pragma: no cover""
        ]
    }
]",2,4776,0.002388,1669,0.0025035,0.0048915
"When trying to execute the code snippet with the provided imports and initialization, the lines with # uncovered are not executed.

# begin code snippet
""""""Returns the next object to be returned by :meth:`pop`,
        but without removing it from the queue.
        Raises :exc:`NotImplementedError` if the underlying queue class does
        not implement a ``peek`` method, which is optional for queues.
        """"""
stats = self._downloader_interface.stats(self.pqueues)
if not stats: # uncovered
    aux = None # uncovered
    exit(aux) # uncovered
slot = min(stats)[1]
queue = self.pqueues[slot]
aux = queue.peek()
exit(aux) # uncovered

# end code snippet

Please, provide self-contained and concrete Python modified values of the imports and initialization to execute one of the uncovered paths in the code snippet.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""from typing import List, Dict, Any"",
            ""class MockQueue:"",
            ""    def peek(self):"",
            ""        return 'mocked_value'"",
            ""class MockDownloaderInterface:"",
            ""    def stats(self, pqueues):"",
            ""        return [(1, 0)]"",
            ""    # Simulating a case where stats return one entry to avoid the empty check.""
        ],
        ""initialization"": [
            ""self = type('Mock', (), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': {0: MockQueue()}})()""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Optional"",
            ""class MockDownloaderInterface:"",
            ""    def stats(self, pqueues):"",
            ""        return []"",
            ""class MockQueue:"",
            ""    def peek(self) -> Optional[int]:"",
            ""        return 42""
        ],
        ""initialization"": [
            ""self = type('MockObject', (), {})()"",
            ""self._downloader_interface = MockDownloaderInterface()"",
            ""self.pqueues = [MockQueue(), MockQueue()]""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Dict, Any"",
            ""import random""
        ],
        ""initialization"": [
            ""class MockQueue:"",
            ""    def __init__(self, items):"",
            ""        self.items = items"",
            ""    def peek(self):"",
            ""        return self.items[0] if self.items else None"",
            ""class MockDownloaderInterface:"",
            ""    def stats(self, pqueues):"",
            ""        return [(len(queue.items), i) for i, queue in enumerate(pqueues)]"",
            ""self._downloader_interface = MockDownloaderInterface()"",
            ""self.pqueues = [MockQueue([1, 2, 3]), MockQueue([]), MockQueue([4, 5])]""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Optional"",
            ""import random""
        ],
        ""initialization"": [
            ""class MockDownloaderInterface: def stats(self, pqueues): return []"",
            ""self = type('Mock', (), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': []})()""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Tuple"",
            ""import random""
        ],
        ""initialization"": [
            ""class MockDownloaderInterface:  # Mocking the downloader interface\n    def stats(self, pqueues):\n        # Returns a list of stats with one queue having zero items\n        return [(0, {'items': 0})]"",
            ""class MockQueue:  # Mocking a queue with a peek method\n    def __init__(self):\n        self.items = []  # No items in the queue\n    def peek(self):\n        if not self.items:\n            return None\n        return self.items[0]"",
            ""self = type('Mock', (object,), {})()  # Mocking self\nself._downloader_interface = MockDownloaderInterface()  # Assigning the mock downloader interface\nself.pqueues = [MockQueue()]  # Creating a list of mock queues""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Dict, Any"",
            ""class MockQueue:"",
            ""    def __init__(self):"",
            ""        self.data = []"",
            ""    def peek(self):"",
            ""        return self.data[0] if self.data else None"",
            ""class MockDownloaderInterface:"",
            ""    def stats(self, pqueues):"",
            ""        return [(len(queue.data), index) for index, queue in enumerate(pqueues) if queue.data]""
        ],
        ""initialization"": [
            ""self = type('Mock', (), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue(), MockQueue()]})()"",
            ""self.pqueues[0].data = [1, 2, 3]"",
            ""self.pqueues[1].data = []""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Optional"",
            ""class MockQueue:"",
            ""    def peek(self):"",
            ""        return 'next_item'"",
            ""class MockDownloaderInterface:"",
            ""    def stats(self, pqueues):"",
            ""        return [(1, 0)]"",
            ""class Mock:"",
            ""    pqueues: List[MockQueue]"",
            ""    _downloader_interface: MockDownloaderInterface""
        ],
        ""initialization"": [
            ""self = Mock()"",
            ""self._downloader_interface = MockDownloaderInterface()"",
            ""self.pqueues = [MockQueue(), MockQueue()]""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Optional"",
            ""import random""
        ],
        ""initialization"": [
            ""class MockQueue:  # Mock class for the queue\n    def __init__(self):\n        self.items = []\n    def peek(self) -> Optional[int]:\n        return self.items[0] if self.items else None\n    def add(self, item: int):\n        self.items.append(item)\n\nclass MockDownloaderInterface:  # Mock class for downloader interface\n    def stats(self, pqueues):\n        return [(len(queue.items), index) for index, queue in enumerate(pqueues) if len(queue.items) > 0]\n\n# Initialize pqueues with two MockQueue instances, one empty and one with items\nqueue_1 = MockQueue()\nqueue_2 = MockQueue()\nqueue_2.add(42)  # Add item to the second queue\n\nself = type('MockObject', (object,), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [queue_1, queue_2]})()""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Tuple"",
            ""class MockDownloaderInterface:"",
            ""    def stats(self, pqueues):"",
            ""        return []"",
            ""class MockQueue:"",
            ""    def peek(self):"",
            ""        return 'item'"",
            ""class MockClass:"",
            ""    def __init__(self):"",
            ""        self._downloader_interface = MockDownloaderInterface()"",
            ""        self.pqueues = [MockQueue()]""
        ],
        ""initialization"": [
            ""self = MockClass()""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Tuple, Any"",
            ""class MockDownloaderInterface: pass"",
            ""class MockQueue: pass""
        ],
        ""initialization"": [
            ""self = type('Mock', (object,), {})()"",
            ""self._downloader_interface = MockDownloaderInterface()"",
            ""self.pqueues = [MockQueue(), MockQueue()]"",
            ""setattr(self._downloader_interface, 'stats', lambda pqueues: [])"",
            ""setattr(MockQueue, 'peek', lambda self: None)""
        ]
    }
]","[
    {
        ""imports"": [
            ""from typing import List, Dict, Any # pragma: no cover"",
            ""class MockQueue: # pragma: no cover"",
            ""    def peek(self): # pragma: no cover"",
            ""        return 'mocked_value' # pragma: no cover"",
            ""class MockDownloaderInterface: # pragma: no cover"",
            ""    def stats(self, pqueues): # pragma: no cover"",
            ""        return [(1, 0)] # pragma: no cover"",
            ""    # Simulating a case where stats return one entry to avoid the empty check. # pragma: no cover""
        ],
        ""initialization"": [
            ""self = type('Mock', (), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': {0: MockQueue()}})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Optional # pragma: no cover"",
            ""class MockDownloaderInterface: # pragma: no cover"",
            ""    def stats(self, pqueues): # pragma: no cover"",
            ""        return [] # pragma: no cover"",
            ""class MockQueue: # pragma: no cover"",
            ""    def peek(self) -> Optional[int]: # pragma: no cover"",
            ""        return 42 # pragma: no cover""
        ],
        ""initialization"": [
            ""self = type('MockObject', (), {})() # pragma: no cover"",
            ""self._downloader_interface = MockDownloaderInterface() # pragma: no cover"",
            ""self.pqueues = [MockQueue(), MockQueue()] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Dict, Any # pragma: no cover"",
            ""import random # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue: # pragma: no cover"",
            ""    def __init__(self, items): # pragma: no cover"",
            ""        self.items = items # pragma: no cover"",
            ""    def peek(self): # pragma: no cover"",
            ""        return self.items[0] if self.items else None # pragma: no cover"",
            ""class MockDownloaderInterface: # pragma: no cover"",
            ""    def stats(self, pqueues): # pragma: no cover"",
            ""        return [(len(queue.items), i) for i, queue in enumerate(pqueues)] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Optional # pragma: no cover"",
            ""import random # pragma: no cover""
        ],
        ""initialization"": [
            """"
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Tuple # pragma: no cover"",
            ""import random # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockDownloaderInterface:  # Mocking the downloader interface# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        # Returns a list of stats with one queue having zero items# pragma: no cover"",
            ""        return [(0, {'items': 0})] # pragma: no cover"",
            ""class MockQueue:  # Mocking a queue with a peek method# pragma: no cover"",
            ""    def __init__(self):# pragma: no cover"",
            ""        self.items = []  # No items in the queue# pragma: no cover"",
            ""    def peek(self):# pragma: no cover"",
            ""        if not self.items:# pragma: no cover"",
            ""            return None# pragma: no cover"",
            ""        return self.items[0] # pragma: no cover"",
            ""self = type('Mock', (object,), {})()  # Mocking self# pragma: no cover"",
            ""self._downloader_interface = MockDownloaderInterface()  # Assigning the mock downloader interface# pragma: no cover"",
            ""self.pqueues = [MockQueue()]  # Creating a list of mock queues # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Dict, Any # pragma: no cover"",
            ""class MockQueue: # pragma: no cover"",
            ""    def __init__(self): # pragma: no cover"",
            ""        self.data = [] # pragma: no cover"",
            ""    def peek(self): # pragma: no cover"",
            ""        return self.data[0] if self.data else None # pragma: no cover"",
            ""class MockDownloaderInterface: # pragma: no cover"",
            ""    def stats(self, pqueues): # pragma: no cover"",
            ""        return [(len(queue.data), index) for index, queue in enumerate(pqueues) if queue.data] # pragma: no cover""
        ],
        ""initialization"": [
            ""self = type('Mock', (), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [MockQueue(), MockQueue()]})() # pragma: no cover"",
            ""self.pqueues[0].data = [1, 2, 3] # pragma: no cover"",
            ""self.pqueues[1].data = [] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Optional # pragma: no cover"",
            ""class MockQueue: # pragma: no cover"",
            ""    def peek(self): # pragma: no cover"",
            ""        return 'next_item' # pragma: no cover"",
            ""class MockDownloaderInterface: # pragma: no cover"",
            ""    def stats(self, pqueues): # pragma: no cover"",
            ""        return [(1, 0)] # pragma: no cover"",
            ""class Mock: # pragma: no cover"",
            ""    pqueues: List[MockQueue] # pragma: no cover"",
            ""    _downloader_interface: MockDownloaderInterface # pragma: no cover""
        ],
        ""initialization"": [
            ""self = Mock() # pragma: no cover"",
            ""self._downloader_interface = MockDownloaderInterface() # pragma: no cover"",
            ""self.pqueues = [MockQueue(), MockQueue()] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Optional # pragma: no cover"",
            ""import random # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockQueue:  # Mock class for the queue# pragma: no cover"",
            ""    def __init__(self):# pragma: no cover"",
            ""        self.items = []# pragma: no cover"",
            ""    def peek(self) -> Optional[int]:# pragma: no cover"",
            ""        return self.items[0] if self.items else None# pragma: no cover"",
            ""    def add(self, item: int):# pragma: no cover"",
            ""        self.items.append(item)# pragma: no cover"",
            ""# pragma: no cover"",
            ""class MockDownloaderInterface:  # Mock class for downloader interface# pragma: no cover"",
            ""    def stats(self, pqueues):# pragma: no cover"",
            ""        return [(len(queue.items), index) for index, queue in enumerate(pqueues) if len(queue.items) > 0]# pragma: no cover"",
            ""# pragma: no cover"",
            ""# Initialize pqueues with two MockQueue instances, one empty and one with items# pragma: no cover"",
            ""queue_1 = MockQueue()# pragma: no cover"",
            ""queue_2 = MockQueue()# pragma: no cover"",
            ""queue_2.add(42)  # Add item to the second queue# pragma: no cover"",
            ""# pragma: no cover"",
            ""self = type('MockObject', (object,), {'_downloader_interface': MockDownloaderInterface(), 'pqueues': [queue_1, queue_2]})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Tuple # pragma: no cover"",
            ""class MockDownloaderInterface: # pragma: no cover"",
            ""    def stats(self, pqueues): # pragma: no cover"",
            ""        return [] # pragma: no cover"",
            ""class MockQueue: # pragma: no cover"",
            ""    def peek(self): # pragma: no cover"",
            ""        return 'item' # pragma: no cover"",
            ""class MockClass: # pragma: no cover"",
            ""    def __init__(self): # pragma: no cover"",
            ""        self._downloader_interface = MockDownloaderInterface() # pragma: no cover"",
            ""        self.pqueues = [MockQueue()] # pragma: no cover""
        ],
        ""initialization"": [
            ""self = MockClass() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Tuple, Any # pragma: no cover"",
            ""class MockDownloaderInterface: pass # pragma: no cover"",
            ""class MockQueue: pass # pragma: no cover""
        ],
        ""initialization"": [
            ""self = type('Mock', (object,), {})() # pragma: no cover"",
            ""self._downloader_interface = MockDownloaderInterface() # pragma: no cover"",
            ""self.pqueues = [MockQueue(), MockQueue()] # pragma: no cover"",
            ""setattr(self._downloader_interface, 'stats', lambda pqueues: []) # pragma: no cover"",
            ""setattr(MockQueue, 'peek', lambda self: None) # pragma: no cover""
        ]
    }
]",3,409,0.0002045,1543,0.0023145,0.002519
