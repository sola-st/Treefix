prompt,raw_predictions,predictions,prompt_type,input_size,input_price,output_size,output_price,total_price
"Provide self-contained and concrete Python values to initialize the undefined variables in the code snippet.

# begin code snippet
""""""Find cell magic, extract header and body.""""""
if (
    isinstance(node.value, ast.Call)
    and _is_ipython_magic(node.value.func)
    and node.value.func.attr == ""run_cell_magic""
):
    args = _get_str_args(node.value.args)
    self.cell_magic = CellMagic(name=args[0], params=args[1], body=args[2])
self.generic_visit(node)

# end code snippet

# begin undefined variables
node
ast
_is_ipython_magic
_get_str_args
self
CellMagic
# end undefined variables

# begin undefined attributes and methods
node.value
ast.Call
self.cell_magic
self.generic_visit
# end undefined attributes and methods

Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""import ast"",
            ""from unittest.mock import MagicMock""
        ],
        ""initialization"": [
            ""node = MagicMock(value=MagicMock(func=MagicMock(attr='run_cell_magic'), args=[['magic_name', 'param1', 'param2']]))"",
            ""ast = __import__('ast')"",
            ""_is_ipython_magic = MagicMock(return_value=True)"",
            ""_get_str_args = MagicMock(return_value=['magic_name', 'param1', 'param2'])"",
            ""self = MagicMock()"",
            ""CellMagic = MagicMock()""
        ]
    },
    {
        ""imports"": [
            ""import ast"",
            ""from unittest.mock import MagicMock""
        ],
        ""initialization"": [
            ""node = MagicMock(value=MagicMock(func=MagicMock(attr='run_cell_magic')), spec=ast.AST)"",
            ""_is_ipython_magic = MagicMock(return_value=True)"",
            ""_get_str_args = MagicMock(return_value=['my_magic', 'param1', 'body_code'])"",
            ""self = MagicMock()"",
            ""CellMagic = MagicMock()""
        ]
    },
    {
        ""imports"": [
            ""import ast"",
            ""from unittest.mock import MagicMock""
        ],
        ""initialization"": [
            ""node = MagicMock(value=MagicMock(spec=ast.Call, func=MagicMock(attr='run_cell_magic')))"",
            ""_is_ipython_magic = MagicMock(side_effect=lambda func: func is not None)"",
            ""_get_str_args = MagicMock(side_effect=lambda args: [args[0], args[1], args[2]])"",
            ""self = MagicMock()"",
            ""CellMagic = MagicMock()""
        ]
    },
    {
        ""imports"": [
            ""ast"",
            ""unittest.mock""
        ],
        ""initialization"": [
            ""node = ast.Call(func=ast.Name(id='magic_name', ctx=ast.Load()), args=[ast.Constant(value='cell_magic_name'), ast.Constant(value='params'), ast.Constant(value='body')], keywords=[])"",
            ""_is_ipython_magic = lambda func: func.id in ['magic_name']"",
            ""_get_str_args = lambda args: [arg.value for arg in args]"",
            ""self = type('Mock', (object,), {'cell_magic': None, 'generic_visit': lambda self, node: None})()"",
            ""CellMagic = type('CellMagic', (object,), {'__init__': lambda self, name, params, body: None})""
        ]
    },
    {
        ""imports"": [
            ""import ast"",
            ""from unittest.mock import Mock""
        ],
        ""initialization"": [
            ""node = Mock(value=Mock(func=Mock(attr='run_cell_magic')))"",
            ""_is_ipython_magic = Mock(return_value=True)"",
            ""_get_str_args = Mock(return_value=['magic_name', 'param1', 'body_code'])"",
            ""self = Mock(cell_magic=None, generic_visit=Mock())"",
            ""CellMagic = Mock(return_value=None)""
        ]
    },
    {
        ""imports"": [
            ""import ast"",
            ""from unittest.mock import MagicMock""
        ],
        ""initialization"": [
            ""node = MagicMock(value=MagicMock(func=MagicMock(attr='run_cell_magic')))"",
            ""ast.Call = ast.Call"",
            ""_is_ipython_magic = MagicMock(return_value=True)"",
            ""_get_str_args = MagicMock(return_value=['magic_name', 'param1', 'body_content'])"",
            ""self = MagicMock()"",
            ""class CellMagic:\n    def __init__(self, name, params, body):\n        self.name = name\n        self.params = params\n        self.body = body""
        ]
    },
    {
        ""imports"": [
            ""import ast"",
            ""from unittest.mock import Mock""
        ],
        ""initialization"": [
            ""node = Mock(value=Mock(func=Mock(attr='run_cell_magic'))) "",
            ""_is_ipython_magic = Mock(return_value=True)"",
            ""_get_str_args = Mock(return_value=['magic_name', 'param1', 'body'])"",
            ""self = Mock(cell_magic=None, generic_visit=Mock())"",
            ""CellMagic = Mock()""
        ]
    },
    {
        ""imports"": [
            ""import ast"",
            ""from unittest.mock import MagicMock""
        ],
        ""initialization"": [
            ""node = MagicMock(value=MagicMock(func=MagicMock(attr='run_cell_magic'), args=['magic_name', 'param1', 'body']))"",
            ""ast = __import__('ast')"",
            ""_is_ipython_magic = MagicMock(return_value=True)"",
            ""_get_str_args = MagicMock(return_value=['magic_name', 'param1', 'body'])"",
            ""self = MagicMock()"",
            ""CellMagic = MagicMock()""
        ]
    },
    {
        ""imports"": [
            ""import ast"",
            ""from unittest.mock import MagicMock""
        ],
        ""initialization"": [
            ""node = MagicMock(value=MagicMock(func=MagicMock(attr='run_cell_magic')), spec=ast.AST)"",
            ""_is_ipython_magic = MagicMock(return_value=True)"",
            ""_get_str_args = MagicMock(return_value=['magic_name', 'param1', 'body_of_the_magic'])"",
            ""self = MagicMock()"",
            ""CellMagic = MagicMock()"",
            ""self.cell_magic = None"",
            ""self.generic_visit = MagicMock()""
        ]
    },
    {
        ""imports"": [
            ""import ast"",
            ""from unittest.mock import MagicMock""
        ],
        ""initialization"": [
            ""node = MagicMock(spec=ast.Call)"",
            ""ast.Call = ast.expr"",
            ""_is_ipython_magic = MagicMock(return_value=True)"",
            ""_get_str_args = MagicMock(return_value=['magic_name', 'param1', 'body'])"",
            ""self = MagicMock()"",
            ""CellMagic = MagicMock()""
        ]
    }
]","[
    {
        ""imports"": [
            ""import ast # pragma: no cover"",
            ""from unittest.mock import MagicMock # pragma: no cover""
        ],
        ""initialization"": [
            ""node = MagicMock(value=MagicMock(func=MagicMock(attr='run_cell_magic'), args=[['magic_name', 'param1', 'param2']])) # pragma: no cover"",
            ""_is_ipython_magic = MagicMock(return_value=True) # pragma: no cover"",
            ""_get_str_args = MagicMock(return_value=['magic_name', 'param1', 'param2']) # pragma: no cover"",
            ""self = MagicMock() # pragma: no cover"",
            ""CellMagic = MagicMock() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import ast # pragma: no cover"",
            ""from unittest.mock import MagicMock # pragma: no cover""
        ],
        ""initialization"": [
            ""node = MagicMock(value=MagicMock(func=MagicMock(attr='run_cell_magic')), spec=ast.AST) # pragma: no cover"",
            ""_is_ipython_magic = MagicMock(return_value=True) # pragma: no cover"",
            ""_get_str_args = MagicMock(return_value=['my_magic', 'param1', 'body_code']) # pragma: no cover"",
            ""self = MagicMock() # pragma: no cover"",
            ""CellMagic = MagicMock() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import ast # pragma: no cover"",
            ""from unittest.mock import MagicMock # pragma: no cover""
        ],
        ""initialization"": [
            ""node = MagicMock(value=MagicMock(spec=ast.Call, func=MagicMock(attr='run_cell_magic'))) # pragma: no cover"",
            ""_is_ipython_magic = MagicMock(side_effect=lambda func: func is not None) # pragma: no cover"",
            ""_get_str_args = MagicMock(side_effect=lambda args: [args[0], args[1], args[2]]) # pragma: no cover"",
            ""self = MagicMock() # pragma: no cover"",
            ""CellMagic = MagicMock() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            """"
        ],
        ""initialization"": [
            ""_is_ipython_magic = lambda func: func.id in ['magic_name'] # pragma: no cover"",
            ""_get_str_args = lambda args: [arg.value for arg in args] # pragma: no cover"",
            ""self = type('Mock', (object,), {'cell_magic': None, 'generic_visit': lambda self, node: None})() # pragma: no cover"",
            ""CellMagic = type('CellMagic', (object,), {'__init__': lambda self, name, params, body: None}) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import ast # pragma: no cover"",
            ""from unittest.mock import Mock # pragma: no cover""
        ],
        ""initialization"": [
            ""node = Mock(value=Mock(func=Mock(attr='run_cell_magic'))) # pragma: no cover"",
            ""_is_ipython_magic = Mock(return_value=True) # pragma: no cover"",
            ""_get_str_args = Mock(return_value=['magic_name', 'param1', 'body_code']) # pragma: no cover"",
            ""self = Mock(cell_magic=None, generic_visit=Mock()) # pragma: no cover"",
            ""CellMagic = Mock(return_value=None) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import ast # pragma: no cover"",
            ""from unittest.mock import MagicMock # pragma: no cover""
        ],
        ""initialization"": [
            ""node = MagicMock(value=MagicMock(func=MagicMock(attr='run_cell_magic'))) # pragma: no cover"",
            ""ast.Call = ast.Call # pragma: no cover"",
            ""_is_ipython_magic = MagicMock(return_value=True) # pragma: no cover"",
            ""_get_str_args = MagicMock(return_value=['magic_name', 'param1', 'body_content']) # pragma: no cover"",
            ""self = MagicMock() # pragma: no cover"",
            ""class CellMagic:# pragma: no cover"",
            ""    def __init__(self, name, params, body):# pragma: no cover"",
            ""        self.name = name# pragma: no cover"",
            ""        self.params = params# pragma: no cover"",
            ""        self.body = body # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import ast # pragma: no cover"",
            ""from unittest.mock import Mock # pragma: no cover""
        ],
        ""initialization"": [
            ""node = Mock(value=Mock(func=Mock(attr='run_cell_magic')))  # pragma: no cover"",
            ""_is_ipython_magic = Mock(return_value=True) # pragma: no cover"",
            ""_get_str_args = Mock(return_value=['magic_name', 'param1', 'body']) # pragma: no cover"",
            ""self = Mock(cell_magic=None, generic_visit=Mock()) # pragma: no cover"",
            ""CellMagic = Mock() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import ast # pragma: no cover"",
            ""from unittest.mock import MagicMock # pragma: no cover""
        ],
        ""initialization"": [
            ""node = MagicMock(value=MagicMock(func=MagicMock(attr='run_cell_magic'), args=['magic_name', 'param1', 'body'])) # pragma: no cover"",
            ""_is_ipython_magic = MagicMock(return_value=True) # pragma: no cover"",
            ""_get_str_args = MagicMock(return_value=['magic_name', 'param1', 'body']) # pragma: no cover"",
            ""self = MagicMock() # pragma: no cover"",
            ""CellMagic = MagicMock() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import ast # pragma: no cover"",
            ""from unittest.mock import MagicMock # pragma: no cover""
        ],
        ""initialization"": [
            ""node = MagicMock(value=MagicMock(func=MagicMock(attr='run_cell_magic')), spec=ast.AST) # pragma: no cover"",
            ""_is_ipython_magic = MagicMock(return_value=True) # pragma: no cover"",
            ""_get_str_args = MagicMock(return_value=['magic_name', 'param1', 'body_of_the_magic']) # pragma: no cover"",
            ""self = MagicMock() # pragma: no cover"",
            ""CellMagic = MagicMock() # pragma: no cover"",
            ""self.cell_magic = None # pragma: no cover"",
            ""self.generic_visit = MagicMock() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import ast # pragma: no cover"",
            ""from unittest.mock import MagicMock # pragma: no cover""
        ],
        ""initialization"": [
            ""node = MagicMock(spec=ast.Call) # pragma: no cover"",
            ""ast.Call = ast.expr # pragma: no cover"",
            ""_is_ipython_magic = MagicMock(return_value=True) # pragma: no cover"",
            ""_get_str_args = MagicMock(return_value=['magic_name', 'param1', 'body']) # pragma: no cover"",
            ""self = MagicMock() # pragma: no cover"",
            ""CellMagic = MagicMock() # pragma: no cover""
        ]
    }
]",1,399,0.0001995,1292,0.001938,0.0021375
"When trying to execute the code snippet with the provided imports and initialization, the following error happens:
# begin error message
Execution error at line 17:
    raise AttributeError(""Mock object has no attribute %r"" % name)
AttributeError: Mock object has no attribute 'args'
# end error message

Please, provide self-contained and concrete Python fixed values of the imports and initialization to solve the error and make the code snippet executable.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""import ast"",
            ""from unittest.mock import MagicMock""
        ],
        ""initialization"": [
            ""node = MagicMock(value=MagicMock(spec=ast.Call, func=MagicMock(attr='run_cell_magic'), args=[MagicMock(), MagicMock(), MagicMock()]))"",
            ""_is_ipython_magic = MagicMock(side_effect=lambda func: True)"",
            ""_get_str_args = MagicMock(return_value=['magic_name', 'param1', 'body_code'])"",
            ""self = MagicMock()"",
            ""CellMagic = MagicMock()""
        ]
    },
    {
        ""imports"": [
            ""import ast"",
            ""from unittest.mock import MagicMock""
        ],
        ""initialization"": [
            ""node = MagicMock()"",
            ""node.value = MagicMock(spec=ast.Call, args=[MagicMock(), MagicMock(), MagicMock()])"",
            ""node.value.func = MagicMock(attr='run_cell_magic')"",
            ""_is_ipython_magic = MagicMock(side_effect=lambda func: func.attr == 'run_cell_magic')"",
            ""_get_str_args = MagicMock(side_effect=lambda args: [args[0], args[1], args[2]])"",
            ""self = MagicMock()"",
            ""self.cell_magic = None"",
            ""self.generic_visit = MagicMock()"",
            ""CellMagic = MagicMock()""
        ]
    },
    {
        ""imports"": [
            ""import ast"",
            ""from unittest.mock import MagicMock""
        ],
        ""initialization"": [
            ""node = MagicMock(value=MagicMock(spec=ast.Call, func=MagicMock(attr='run_cell_magic', return_value=None), args=[MagicMock(), MagicMock(), MagicMock()]))"",
            ""_is_ipython_magic = MagicMock(side_effect=lambda func: func is not None)"",
            ""_get_str_args = MagicMock(side_effect=lambda args: ['magic_name', 'param1', 'body_code'])"",
            ""self = MagicMock()"",
            ""CellMagic = MagicMock()""
        ]
    },
    {
        ""imports"": [
            ""import ast"",
            ""from unittest.mock import MagicMock""
        ],
        ""initialization"": [
            ""node = MagicMock(value=MagicMock(spec=ast.Call, args=[MagicMock(), MagicMock(), MagicMock()], func=MagicMock(attr='run_cell_magic')))"",
            ""_is_ipython_magic = MagicMock(side_effect=lambda func: func is not None)"",
            ""_get_str_args = MagicMock(return_value=['magic_name', 'param1', 'body_content'])"",
            ""self = MagicMock()"",
            ""self.cell_magic = None"",
            ""self.generic_visit = MagicMock()"",
            ""CellMagic = MagicMock()""
        ]
    },
    {
        ""imports"": [
            ""import ast"",
            ""from unittest.mock import MagicMock""
        ],
        ""initialization"": [
            ""node = MagicMock()"",
            ""node.value = MagicMock(spec=ast.Call, args=[MagicMock(), MagicMock(), MagicMock()])"",
            ""node.value.func = MagicMock(attr='run_cell_magic')"",
            ""_is_ipython_magic = MagicMock(side_effect=lambda func: func is not None)"",
            ""_get_str_args = MagicMock(side_effect=lambda args: ['magic_name', 'param1', 'body'])"",
            ""self = MagicMock()"",
            ""self.cell_magic = None"",
            ""self.generic_visit = MagicMock()"",
            ""CellMagic = MagicMock()""
        ]
    },
    {
        ""imports"": [
            ""import ast"",
            ""from unittest.mock import MagicMock""
        ],
        ""initialization"": [
            ""node = MagicMock(value=MagicMock(spec=ast.Call, func=MagicMock(attr='run_cell_magic'))) "",
            ""node.value.args = [\""magic_name\"", \""magic_params\"", \""magic_body\""]"",
            ""_is_ipython_magic = MagicMock(side_effect=lambda func: func is not None)"",
            ""_get_str_args = MagicMock(side_effect=lambda args: args)"",
            ""self = MagicMock()"",
            ""self.cell_magic = None"",
            ""CellMagic = MagicMock()"",
            ""self.generic_visit = MagicMock()""
        ]
    },
    {
        ""imports"": [
            ""import ast"",
            ""from unittest.mock import MagicMock""
        ],
        ""initialization"": [
            ""node = MagicMock()"",
            ""node.value = MagicMock(spec=ast.Call)"",
            ""node.value.func = MagicMock(attr='run_cell_magic')"",
            ""node.value.args = [\""magic_name\"", {}, \""cell body\""]"",
            ""_is_ipython_magic = MagicMock(side_effect=lambda func: func.attr == 'run_cell_magic')"",
            ""_get_str_args = MagicMock(return_value=[node.value.args[0], node.value.args[1], node.value.args[2]])"",
            ""self = MagicMock()"",
            ""self.cell_magic = None"",
            ""self.generic_visit = MagicMock()"",
            ""CellMagic = MagicMock()""
        ]
    },
    {
        ""imports"": [
            ""import ast"",
            ""from unittest.mock import MagicMock""
        ],
        ""initialization"": [
            ""node = MagicMock(value=MagicMock(spec=ast.Call, func=MagicMock(attr='run_cell_magic'), args=[MagicMock(), MagicMock(), MagicMock()]))"",
            ""_is_ipython_magic = MagicMock(side_effect=lambda func: func is not None)"",
            ""_get_str_args = MagicMock(side_effect=lambda args: [args[0], args[1], args[2]])"",
            ""self = MagicMock()"",
            ""CellMagic = MagicMock()""
        ]
    },
    {
        ""imports"": [
            ""import ast"",
            ""from unittest.mock import MagicMock""
        ],
        ""initialization"": [
            ""node = MagicMock(value=MagicMock(spec=ast.Call, func=MagicMock(attr='run_cell_magic', __module__='__main__'), args=[MagicMock(), MagicMock(), MagicMock()]))"",
            ""_is_ipython_magic = MagicMock(side_effect=lambda func: func is not None)"",
            ""_get_str_args = MagicMock(side_effect=lambda args: [args[0], args[1], args[2]])"",
            ""self = MagicMock()"",
            ""CellMagic = MagicMock()""
        ]
    },
    {
        ""imports"": [
            ""import ast"",
            ""from unittest.mock import MagicMock""
        ],
        ""initialization"": [
            ""node = MagicMock()"",
            ""node.value = MagicMock(spec=ast.Call, args=['magic_name', 'param1', 'body_contents'], func=MagicMock(attr='run_cell_magic'))"",
            ""_is_ipython_magic = MagicMock(side_effect=lambda func: func == 'magic_name')"",
            ""_get_str_args = MagicMock(side_effect=lambda args: list(args))"",
            ""self = MagicMock()"",
            ""self.cell_magic = None"",
            ""self.generic_visit = MagicMock()"",
            ""CellMagic = MagicMock()""
        ]
    }
]","[
    {
        ""imports"": [
            ""import ast # pragma: no cover"",
            ""from unittest.mock import MagicMock # pragma: no cover""
        ],
        ""initialization"": [
            ""node = MagicMock(value=MagicMock(spec=ast.Call, func=MagicMock(attr='run_cell_magic'), args=[MagicMock(), MagicMock(), MagicMock()])) # pragma: no cover"",
            ""_is_ipython_magic = MagicMock(side_effect=lambda func: True) # pragma: no cover"",
            ""_get_str_args = MagicMock(return_value=['magic_name', 'param1', 'body_code']) # pragma: no cover"",
            ""self = MagicMock() # pragma: no cover"",
            ""CellMagic = MagicMock() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import ast # pragma: no cover"",
            ""from unittest.mock import MagicMock # pragma: no cover""
        ],
        ""initialization"": [
            ""node = MagicMock() # pragma: no cover"",
            ""node.value = MagicMock(spec=ast.Call, args=[MagicMock(), MagicMock(), MagicMock()]) # pragma: no cover"",
            ""node.value.func = MagicMock(attr='run_cell_magic') # pragma: no cover"",
            ""_is_ipython_magic = MagicMock(side_effect=lambda func: func.attr == 'run_cell_magic') # pragma: no cover"",
            ""_get_str_args = MagicMock(side_effect=lambda args: [args[0], args[1], args[2]]) # pragma: no cover"",
            ""self = MagicMock() # pragma: no cover"",
            ""self.cell_magic = None # pragma: no cover"",
            ""self.generic_visit = MagicMock() # pragma: no cover"",
            ""CellMagic = MagicMock() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import ast # pragma: no cover"",
            ""from unittest.mock import MagicMock # pragma: no cover""
        ],
        ""initialization"": [
            ""node = MagicMock(value=MagicMock(spec=ast.Call, func=MagicMock(attr='run_cell_magic', return_value=None), args=[MagicMock(), MagicMock(), MagicMock()])) # pragma: no cover"",
            ""_is_ipython_magic = MagicMock(side_effect=lambda func: func is not None) # pragma: no cover"",
            ""_get_str_args = MagicMock(side_effect=lambda args: ['magic_name', 'param1', 'body_code']) # pragma: no cover"",
            ""self = MagicMock() # pragma: no cover"",
            ""CellMagic = MagicMock() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import ast # pragma: no cover"",
            ""from unittest.mock import MagicMock # pragma: no cover""
        ],
        ""initialization"": [
            ""node = MagicMock(value=MagicMock(spec=ast.Call, args=[MagicMock(), MagicMock(), MagicMock()], func=MagicMock(attr='run_cell_magic'))) # pragma: no cover"",
            ""_is_ipython_magic = MagicMock(side_effect=lambda func: func is not None) # pragma: no cover"",
            ""_get_str_args = MagicMock(return_value=['magic_name', 'param1', 'body_content']) # pragma: no cover"",
            ""self = MagicMock() # pragma: no cover"",
            ""self.cell_magic = None # pragma: no cover"",
            ""self.generic_visit = MagicMock() # pragma: no cover"",
            ""CellMagic = MagicMock() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import ast # pragma: no cover"",
            ""from unittest.mock import MagicMock # pragma: no cover""
        ],
        ""initialization"": [
            ""node = MagicMock() # pragma: no cover"",
            ""node.value = MagicMock(spec=ast.Call, args=[MagicMock(), MagicMock(), MagicMock()]) # pragma: no cover"",
            ""node.value.func = MagicMock(attr='run_cell_magic') # pragma: no cover"",
            ""_is_ipython_magic = MagicMock(side_effect=lambda func: func is not None) # pragma: no cover"",
            ""_get_str_args = MagicMock(side_effect=lambda args: ['magic_name', 'param1', 'body']) # pragma: no cover"",
            ""self = MagicMock() # pragma: no cover"",
            ""self.cell_magic = None # pragma: no cover"",
            ""self.generic_visit = MagicMock() # pragma: no cover"",
            ""CellMagic = MagicMock() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import ast # pragma: no cover"",
            ""from unittest.mock import MagicMock # pragma: no cover""
        ],
        ""initialization"": [
            ""node = MagicMock(value=MagicMock(spec=ast.Call, func=MagicMock(attr='run_cell_magic')))  # pragma: no cover"",
            ""node.value.args = [\""magic_name\"", \""magic_params\"", \""magic_body\""] # pragma: no cover"",
            ""_is_ipython_magic = MagicMock(side_effect=lambda func: func is not None) # pragma: no cover"",
            ""_get_str_args = MagicMock(side_effect=lambda args: args) # pragma: no cover"",
            ""self = MagicMock() # pragma: no cover"",
            ""self.cell_magic = None # pragma: no cover"",
            ""CellMagic = MagicMock() # pragma: no cover"",
            ""self.generic_visit = MagicMock() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import ast # pragma: no cover"",
            ""from unittest.mock import MagicMock # pragma: no cover""
        ],
        ""initialization"": [
            ""node = MagicMock() # pragma: no cover"",
            ""node.value = MagicMock(spec=ast.Call) # pragma: no cover"",
            ""node.value.func = MagicMock(attr='run_cell_magic') # pragma: no cover"",
            ""node.value.args = [\""magic_name\"", {}, \""cell body\""] # pragma: no cover"",
            ""_is_ipython_magic = MagicMock(side_effect=lambda func: func.attr == 'run_cell_magic') # pragma: no cover"",
            ""_get_str_args = MagicMock(return_value=[node.value.args[0], node.value.args[1], node.value.args[2]]) # pragma: no cover"",
            ""self = MagicMock() # pragma: no cover"",
            ""self.cell_magic = None # pragma: no cover"",
            ""self.generic_visit = MagicMock() # pragma: no cover"",
            ""CellMagic = MagicMock() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import ast # pragma: no cover"",
            ""from unittest.mock import MagicMock # pragma: no cover""
        ],
        ""initialization"": [
            ""node = MagicMock(value=MagicMock(spec=ast.Call, func=MagicMock(attr='run_cell_magic'), args=[MagicMock(), MagicMock(), MagicMock()])) # pragma: no cover"",
            ""_is_ipython_magic = MagicMock(side_effect=lambda func: func is not None) # pragma: no cover"",
            ""_get_str_args = MagicMock(side_effect=lambda args: [args[0], args[1], args[2]]) # pragma: no cover"",
            ""self = MagicMock() # pragma: no cover"",
            ""CellMagic = MagicMock() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import ast # pragma: no cover"",
            ""from unittest.mock import MagicMock # pragma: no cover""
        ],
        ""initialization"": [
            ""node = MagicMock(value=MagicMock(spec=ast.Call, func=MagicMock(attr='run_cell_magic', __module__='__main__'), args=[MagicMock(), MagicMock(), MagicMock()])) # pragma: no cover"",
            ""_is_ipython_magic = MagicMock(side_effect=lambda func: func is not None) # pragma: no cover"",
            ""_get_str_args = MagicMock(side_effect=lambda args: [args[0], args[1], args[2]]) # pragma: no cover"",
            ""self = MagicMock() # pragma: no cover"",
            ""CellMagic = MagicMock() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import ast # pragma: no cover"",
            ""from unittest.mock import MagicMock # pragma: no cover""
        ],
        ""initialization"": [
            ""node = MagicMock() # pragma: no cover"",
            ""node.value = MagicMock(spec=ast.Call, args=['magic_name', 'param1', 'body_contents'], func=MagicMock(attr='run_cell_magic')) # pragma: no cover"",
            ""_is_ipython_magic = MagicMock(side_effect=lambda func: func == 'magic_name') # pragma: no cover"",
            ""_get_str_args = MagicMock(side_effect=lambda args: list(args)) # pragma: no cover"",
            ""self = MagicMock() # pragma: no cover"",
            ""self.cell_magic = None # pragma: no cover"",
            ""self.generic_visit = MagicMock() # pragma: no cover"",
            ""CellMagic = MagicMock() # pragma: no cover""
        ]
    }
]",2,824,0.000412,1520,0.00228,0.002692
