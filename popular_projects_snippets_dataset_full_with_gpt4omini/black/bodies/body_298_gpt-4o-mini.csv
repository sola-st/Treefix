prompt,raw_predictions,predictions,prompt_type,input_size,input_price,output_size,output_price,total_price
"Provide self-contained and concrete Python values to initialize the undefined variables in the code snippet.

# begin code snippet
""""""Return True if `leaf` is a star or double star in a vararg or kwarg.

    If `within` includes VARARGS_PARENTS, this applies to function signatures.
    If `within` includes UNPACKING_PARENTS, it applies to right hand-side
    extended iterable unpacking (PEP 3132) and additional unpacking
    generalizations (PEP 448).
    """"""
if leaf.type not in VARARGS_SPECIALS or not leaf.parent:
    exit(False)

p = leaf.parent
if p.type == syms.star_expr:
    # Star expressions are also used as assignment targets in extended
    # iterable unpacking (PEP 3132).  See what its parent is instead.
    if not p.parent:
        exit(False)

    p = p.parent

exit(p.type in within)

# end code snippet

# begin undefined variables
leaf
VARARGS_SPECIALS
syms
within
# end undefined variables

# begin undefined attributes and methods
leaf.type
leaf.parent
syms.star_expr
# end undefined attributes and methods

Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""from typing import Optional, List""
        ],
        ""initialization"": [
            ""class Mock:\n    def __init__(self, type, parent=None):\n        self.type = type\n        self.parent = parent"",
            ""leaf = Mock(type='example_type', parent=None)"",
            ""VARARGS_SPECIALS = ['example_type', 'star_expr']"",
            ""syms = type('MockSyms', (object,), {'star_expr': 'star_expr'})"",
            ""within = ['VARARGS_PARENTS']""
        ]
    },
    {
        ""imports"": [
            ""from typing import Optional""
        ],
        ""initialization"": [
            ""class MockLeaf:\n    def __init__(self, type_, parent):\n        self.type = type_\n        self.parent = parent\n\nleaf = MockLeaf(type='star', parent=None)"",
            ""VARARGS_SPECIALS = {'star', 'double_star'}"",
            ""class MockSymbols:\n    star_expr = 'star_expr'\n\nsyms = MockSymbols()"",
            ""within = {'VARARGS_PARENTS'}""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""Leaf = namedtuple('Leaf', ['type', 'parent'])"",
            ""leaf = Leaf(type='star_expr', parent=None)"",
            ""VARARGS_SPECIALS = {'star_expr', 'double_star_expr'}"",
            ""syms = type('MockSymbols', (object,), {'star_expr': 'star_expr'})()"",
            ""within = {'VARARGS_PARENTS'}""
        ]
    },
    {
        ""imports"": [
            ""from dataclasses import dataclass, field""
        ],
        ""initialization"": [
            ""class Mock:\n  def __init__(self, type, parent):\n    self.type = type\n    self.parent = parent"",
            ""leaf = Mock(type='star_expr', parent=None)"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""class Syms:\n  star_expr = 'star_expr'\nsyms = Syms()"",
            ""within = ['VARARGS_PARENTS']""
        ]
    },
    {
        ""imports"": [
            ""sys"",
            ""dataclasses""
        ],
        ""initialization"": [
            ""class Leaf:\n    def __init__(self, type, parent):\n        self.type = type\n        self.parent = parent\n\nleaf = Leaf(type='some_type', parent=None)"",
            ""VARARGS_SPECIALS = ['some_type', 'another_type']"",
            ""class Symbols:\n    star_expr = 'star_expr_value'\n\nsyms = Symbols()"",
            ""within = ['VARARGS_PARENTS', 'UNPACKING_PARENTS']""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Optional""
        ],
        ""initialization"": [
            ""class MockLeaf:\n    def __init__(self, type, parent):\n        self.type = type\n        self.parent = parent\n\nleaf = MockLeaf(type='star_expr', parent=None)"",
            ""VARARGS_SPECIALS = ['vararg', 'star_expr']"",
            ""class MockSymbols:\n    def __init__(self):\n        self.star_expr = 'star_expr'\n\nsyms = MockSymbols()"",
            ""within = ['VARARGS_PARENTS']""
        ]
    },
    {
        ""imports"": [
            ""from typing import Optional, List""
        ],
        ""initialization"": [
            ""class MockLeaf:\n    def __init__(self, leaf_type, parent=None):\n        self.type = leaf_type\n        self.parent = parent\n\nleaf = MockLeaf('example_leaf', None)"",
            ""VARARGS_SPECIALS = ['example_leaf', 'another_example']"",
            ""class MockSyms:\n    star_expr = 'star_expr'\n\nsyms = MockSyms()"",
            ""within = ['VARARGS_PARENTS', 'UNPACKING_PARENTS']""
        ]
    },
    {
        ""imports"": [
            ""from typing import Optional, Union""
        ],
        ""initialization"": [
            ""class MockLeaf:\n    def __init__(self, type_value, parent_value):\n        self.type = type_value\n        self.parent = parent_value\n\nleaf = MockLeaf('node', None)"",
            ""VARARGS_SPECIALS = {'node', 'star_expr'}"",
            ""class MockSyms:\n    star_expr = 'star_expr'\nsyms = MockSyms()"",
            ""within = {'VARARGS_PARENTS'}""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""MockLeaf = namedtuple('MockLeaf', ['type', 'parent'])"",
            ""leaf = MockLeaf(type='star_expr', parent=None)"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""class Syms: star_expr = 'star_expr' "",
            ""syms = Syms()"",
            ""within = ['VARARGS_PARENTS', 'UNPACKING_PARENTS']""
        ]
    },
    {
        ""imports"": [
            ""from typing import Any, Optional""
        ],
        ""initialization"": [
            ""class Mock: pass"",
            ""leaf = Mock(); leaf.type = 'star_expr'; leaf.parent = None"",
            ""VARARGS_SPECIALS = ('star_expr', 'double_star_expr')"",
            ""class syms: star_expr = 'star_expr'"",
            ""within = ['VARARGS_PARENTS', 'UNPACKING_PARENTS']""
        ]
    }
]","[
    {
        ""imports"": [
            ""from typing import Optional, List # pragma: no cover""
        ],
        ""initialization"": [
            ""class Mock:# pragma: no cover"",
            ""    def __init__(self, type, parent=None):# pragma: no cover"",
            ""        self.type = type# pragma: no cover"",
            ""        self.parent = parent # pragma: no cover"",
            ""leaf = Mock(type='example_type', parent=None) # pragma: no cover"",
            ""VARARGS_SPECIALS = ['example_type', 'star_expr'] # pragma: no cover"",
            ""syms = type('MockSyms', (object,), {'star_expr': 'star_expr'}) # pragma: no cover"",
            ""within = ['VARARGS_PARENTS'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from typing import Optional # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLeaf:# pragma: no cover"",
            ""    def __init__(self, type_, parent):# pragma: no cover"",
            ""        self.type = type_# pragma: no cover"",
            ""        self.parent = parent# pragma: no cover"",
            ""VARARGS_SPECIALS = {'star', 'double_star'} # pragma: no cover"",
            ""class MockSymbols:# pragma: no cover"",
            ""    star_expr = 'star_expr'# pragma: no cover"",
            ""# pragma: no cover"",
            ""syms = MockSymbols() # pragma: no cover"",
            ""within = {'VARARGS_PARENTS'} # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""Leaf = namedtuple('Leaf', ['type', 'parent']) # pragma: no cover"",
            ""leaf = Leaf(type='star_expr', parent=None) # pragma: no cover"",
            ""VARARGS_SPECIALS = {'star_expr', 'double_star_expr'} # pragma: no cover"",
            ""syms = type('MockSymbols', (object,), {'star_expr': 'star_expr'})() # pragma: no cover"",
            ""within = {'VARARGS_PARENTS'} # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from dataclasses import dataclass, field # pragma: no cover""
        ],
        ""initialization"": [
            ""class Mock:# pragma: no cover"",
            ""  def __init__(self, type, parent):# pragma: no cover"",
            ""    self.type = type# pragma: no cover"",
            ""    self.parent = parent # pragma: no cover"",
            ""leaf = Mock(type='star_expr', parent=None) # pragma: no cover"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""class Syms:# pragma: no cover"",
            ""  star_expr = 'star_expr'# pragma: no cover"",
            ""syms = Syms() # pragma: no cover"",
            ""within = ['VARARGS_PARENTS'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            """"
        ],
        ""initialization"": [
            ""class Leaf:# pragma: no cover"",
            ""    def __init__(self, type, parent):# pragma: no cover"",
            ""        self.type = type# pragma: no cover"",
            ""        self.parent = parent# pragma: no cover"",
            ""# pragma: no cover"",
            ""leaf = Leaf(type='some_type', parent=None) # pragma: no cover"",
            ""VARARGS_SPECIALS = ['some_type', 'another_type'] # pragma: no cover"",
            ""class Symbols:# pragma: no cover"",
            ""    star_expr = 'star_expr_value'# pragma: no cover"",
            ""# pragma: no cover"",
            ""syms = Symbols() # pragma: no cover"",
            ""within = ['VARARGS_PARENTS', 'UNPACKING_PARENTS'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Optional # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLeaf:# pragma: no cover"",
            ""    def __init__(self, type, parent):# pragma: no cover"",
            ""        self.type = type# pragma: no cover"",
            ""        self.parent = parent# pragma: no cover"",
            ""# pragma: no cover"",
            ""leaf = MockLeaf(type='star_expr', parent=None) # pragma: no cover"",
            ""VARARGS_SPECIALS = ['vararg', 'star_expr'] # pragma: no cover"",
            ""class MockSymbols:# pragma: no cover"",
            ""    def __init__(self):# pragma: no cover"",
            ""        self.star_expr = 'star_expr'# pragma: no cover"",
            ""# pragma: no cover"",
            ""syms = MockSymbols() # pragma: no cover"",
            ""within = ['VARARGS_PARENTS'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from typing import Optional, List # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLeaf:# pragma: no cover"",
            ""    def __init__(self, leaf_type, parent=None):# pragma: no cover"",
            ""        self.type = leaf_type# pragma: no cover"",
            ""        self.parent = parent# pragma: no cover"",
            ""# pragma: no cover"",
            ""leaf = MockLeaf('example_leaf', None) # pragma: no cover"",
            ""VARARGS_SPECIALS = ['example_leaf', 'another_example'] # pragma: no cover"",
            ""class MockSyms:# pragma: no cover"",
            ""    star_expr = 'star_expr'# pragma: no cover"",
            ""# pragma: no cover"",
            ""syms = MockSyms() # pragma: no cover"",
            ""within = ['VARARGS_PARENTS', 'UNPACKING_PARENTS'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from typing import Optional, Union # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLeaf:# pragma: no cover"",
            ""    def __init__(self, type_value, parent_value):# pragma: no cover"",
            ""        self.type = type_value# pragma: no cover"",
            ""        self.parent = parent_value# pragma: no cover"",
            ""# pragma: no cover"",
            ""leaf = MockLeaf('node', None) # pragma: no cover"",
            ""VARARGS_SPECIALS = {'node', 'star_expr'} # pragma: no cover"",
            ""class MockSyms:# pragma: no cover"",
            ""    star_expr = 'star_expr'# pragma: no cover"",
            ""syms = MockSyms() # pragma: no cover"",
            ""within = {'VARARGS_PARENTS'} # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""MockLeaf = namedtuple('MockLeaf', ['type', 'parent']) # pragma: no cover"",
            ""leaf = MockLeaf(type='star_expr', parent=None) # pragma: no cover"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""class Syms: star_expr = 'star_expr'  # pragma: no cover"",
            ""syms = Syms() # pragma: no cover"",
            ""within = ['VARARGS_PARENTS', 'UNPACKING_PARENTS'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from typing import Any, Optional # pragma: no cover""
        ],
        ""initialization"": [
            ""class Mock: pass # pragma: no cover"",
            ""leaf = Mock(); leaf.type = 'star_expr'; leaf.parent = None # pragma: no cover"",
            ""VARARGS_SPECIALS = ('star_expr', 'double_star_expr') # pragma: no cover"",
            ""class syms: star_expr = 'star_expr' # pragma: no cover"",
            ""within = ['VARARGS_PARENTS', 'UNPACKING_PARENTS'] # pragma: no cover""
        ]
    }
]",1,482,0.000241,1260,0.00189,0.002131
"When trying to execute the code snippet with the provided imports and initialization, the following error happens:
# begin error message
Execution error at line 22:
    if leaf.type not in VARARGS_SPECIALS or not leaf.parent:
NameError: name 'leaf' is not defined
# end error message

Please, provide self-contained and concrete Python fixed values of the imports and initialization to solve the error and make the code snippet executable.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""from typing import Optional""
        ],
        ""initialization"": [
            ""class MockLeaf:\n    def __init__(self, type_, parent):\n        self.type = type_\n        self.parent = parent\n\nleaf = MockLeaf(type='star', parent=None)"",
            ""VARARGS_SPECIALS = {'star', 'double_star'}"",
            ""class MockSymbols:\n    star_expr = 'star_expr'\n\nsyms = MockSymbols()"",
            ""within = {'VARARGS_PARENTS'}""
        ]
    },
    {
        ""imports"": [],
        ""initialization"": [
            ""class MockLeaf:\n    def __init__(self, type_, parent):\n        self.type = type_\n        self.parent = parent\n\nleaf = MockLeaf(type='star', parent=None)"",
            ""VARARGS_SPECIALS = {'star', 'double_star'}"",
            ""class MockSymbols:\n    star_expr = 'star_expr'\n\nsyms = MockSymbols()"",
            ""within = {'VARARGS_PARENTS', 'UNPACKING_PARENTS'}""
        ]
    },
    {
        ""imports"": [],
        ""initialization"": [
            ""class MockLeaf:\n    def __init__(self, type_, parent):\n        self.type = type_\n        self.parent = parent\n\nleaf = MockLeaf(type='star', parent=None)"",
            ""VARARGS_SPECIALS = {'star', 'double_star'}"",
            ""class MockSymbols:\n    star_expr = 'star_expr'\n\nsyms = MockSymbols()"",
            ""within = {'VARARGS_PARENTS', 'UNPACKING_PARENTS'}""
        ]
    },
    {
        ""imports"": [
            ""from typing import Optional""
        ],
        ""initialization"": [
            ""class MockLeaf:\n    def __init__(self, type_, parent):\n        self.type = type_\n        self.parent = parent\n\nleaf = MockLeaf(type='star', parent=None)"",
            ""VARARGS_SPECIALS = {'star', 'double_star'}"",
            ""class MockSymbols:\n    star_expr = 'star_expr'\n\nsyms = MockSymbols()"",
            ""within = {'VARARGS_PARENTS', 'UNPACKING_PARENTS'}""
        ]
    },
    {
        ""imports"": [
            ""from typing import Optional""
        ],
        ""initialization"": [
            ""class MockLeaf:\n    def __init__(self, type_, parent):\n        self.type = type_\n        self.parent = parent\n\nleaf = MockLeaf(type='star', parent=None)"",
            ""VARARGS_SPECIALS = {'star', 'double_star'}"",
            ""class MockSymbols:\n    star_expr = 'star_expr'\n\nsyms = MockSymbols()"",
            ""within = {'VARARGS_PARENTS', 'UNPACKING_PARENTS'}""
        ]
    },
    {
        ""imports"": [],
        ""initialization"": [
            ""class MockLeaf:\n    def __init__(self, type_, parent):\n        self.type = type_\n        self.parent = parent\n\nleaf = MockLeaf(type='star', parent=None)"",
            ""VARARGS_SPECIALS = {'star', 'double_star'}"",
            ""class MockSymbols:\n    star_expr = 'star_expr'\n\nsyms = MockSymbols()"",
            ""within = {'VARARGS_PARENTS', 'UNPACKING_PARENTS'}""
        ]
    },
    {
        ""imports"": [],
        ""initialization"": [
            ""class MockLeaf:\n    def __init__(self, type_, parent):\n        self.type = type_\n        self.parent = parent\n\nleaf_parent = MockLeaf(type='double_star', parent=None)\nleaf = MockLeaf(type='star', parent=leaf_parent)"",
            ""VARARGS_SPECIALS = {'star', 'double_star'}"",
            ""class MockSymbols:\n    star_expr = 'star_expr'\n\nsyms = MockSymbols()"",
            ""within = {'VARARGS_PARENTS', 'UNPACKING_PARENTS'}""
        ]
    },
    {
        ""imports"": [
            ""from typing import Optional""
        ],
        ""initialization"": [
            ""class MockLeaf:\n    def __init__(self, type_, parent):\n        self.type = type_\n        self.parent = parent\n\nleaf = MockLeaf(type='star', parent=None)"",
            ""VARARGS_SPECIALS = {'star', 'double_star'}"",
            ""class MockSymbols:\n    star_expr = 'star_expr'\n\nsyms = MockSymbols()"",
            ""within = {'VARARGS_PARENTS', 'UNPACKING_PARENTS'}""
        ]
    },
    {
        ""imports"": [],
        ""initialization"": [
            ""class MockLeaf:\n    def __init__(self, type_, parent):\n        self.type = type_\n        self.parent = parent\n\nleaf = MockLeaf(type='star', parent=None)"",
            ""VARARGS_SPECIALS = {'star', 'double_star'}"",
            ""class MockSymbols:\n    star_expr = 'star_expr'\n\nsyms = MockSymbols()"",
            ""within = {'VARARGS_PARENTS'}""
        ]
    },
    {
        ""imports"": [
            ""from typing import Optional""
        ],
        ""initialization"": [
            ""class MockLeaf:\n    def __init__(self, type_, parent):\n        self.type = type_\n        self.parent = parent\n\nleaf = MockLeaf(type='star', parent=None)"",
            ""VARARGS_SPECIALS = {'star', 'double_star'}"",
            ""class MockSymbols:\n    star_expr = 'star_expr'\n\nsyms = MockSymbols()"",
            ""within = {'VARARGS_PARENTS'}""
        ]
    }
]","[
    {
        ""imports"": [
            ""from typing import Optional # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLeaf:# pragma: no cover"",
            ""    def __init__(self, type_, parent):# pragma: no cover"",
            ""        self.type = type_# pragma: no cover"",
            ""        self.parent = parent# pragma: no cover"",
            ""VARARGS_SPECIALS = {'star', 'double_star'} # pragma: no cover"",
            ""class MockSymbols:# pragma: no cover"",
            ""    star_expr = 'star_expr'# pragma: no cover"",
            ""# pragma: no cover"",
            ""syms = MockSymbols() # pragma: no cover"",
            ""within = {'VARARGS_PARENTS'} # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            """"
        ],
        ""initialization"": [
            ""class MockLeaf:# pragma: no cover"",
            ""    def __init__(self, type_, parent):# pragma: no cover"",
            ""        self.type = type_# pragma: no cover"",
            ""        self.parent = parent# pragma: no cover"",
            ""VARARGS_SPECIALS = {'star', 'double_star'} # pragma: no cover"",
            ""class MockSymbols:# pragma: no cover"",
            ""    star_expr = 'star_expr'# pragma: no cover"",
            ""# pragma: no cover"",
            ""syms = MockSymbols() # pragma: no cover"",
            ""within = {'VARARGS_PARENTS', 'UNPACKING_PARENTS'} # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            """"
        ],
        ""initialization"": [
            ""class MockLeaf:# pragma: no cover"",
            ""    def __init__(self, type_, parent):# pragma: no cover"",
            ""        self.type = type_# pragma: no cover"",
            ""        self.parent = parent# pragma: no cover"",
            ""VARARGS_SPECIALS = {'star', 'double_star'} # pragma: no cover"",
            ""class MockSymbols:# pragma: no cover"",
            ""    star_expr = 'star_expr'# pragma: no cover"",
            ""# pragma: no cover"",
            ""syms = MockSymbols() # pragma: no cover"",
            ""within = {'VARARGS_PARENTS', 'UNPACKING_PARENTS'} # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from typing import Optional # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLeaf:# pragma: no cover"",
            ""    def __init__(self, type_, parent):# pragma: no cover"",
            ""        self.type = type_# pragma: no cover"",
            ""        self.parent = parent# pragma: no cover"",
            ""VARARGS_SPECIALS = {'star', 'double_star'} # pragma: no cover"",
            ""class MockSymbols:# pragma: no cover"",
            ""    star_expr = 'star_expr'# pragma: no cover"",
            ""# pragma: no cover"",
            ""syms = MockSymbols() # pragma: no cover"",
            ""within = {'VARARGS_PARENTS', 'UNPACKING_PARENTS'} # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from typing import Optional # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLeaf:# pragma: no cover"",
            ""    def __init__(self, type_, parent):# pragma: no cover"",
            ""        self.type = type_# pragma: no cover"",
            ""        self.parent = parent# pragma: no cover"",
            ""VARARGS_SPECIALS = {'star', 'double_star'} # pragma: no cover"",
            ""class MockSymbols:# pragma: no cover"",
            ""    star_expr = 'star_expr'# pragma: no cover"",
            ""# pragma: no cover"",
            ""syms = MockSymbols() # pragma: no cover"",
            ""within = {'VARARGS_PARENTS', 'UNPACKING_PARENTS'} # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            """"
        ],
        ""initialization"": [
            ""class MockLeaf:# pragma: no cover"",
            ""    def __init__(self, type_, parent):# pragma: no cover"",
            ""        self.type = type_# pragma: no cover"",
            ""        self.parent = parent# pragma: no cover"",
            ""VARARGS_SPECIALS = {'star', 'double_star'} # pragma: no cover"",
            ""class MockSymbols:# pragma: no cover"",
            ""    star_expr = 'star_expr'# pragma: no cover"",
            ""# pragma: no cover"",
            ""syms = MockSymbols() # pragma: no cover"",
            ""within = {'VARARGS_PARENTS', 'UNPACKING_PARENTS'} # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            """"
        ],
        ""initialization"": [
            ""class MockLeaf:# pragma: no cover"",
            ""    def __init__(self, type_, parent):# pragma: no cover"",
            ""        self.type = type_# pragma: no cover"",
            ""        self.parent = parent# pragma: no cover"",
            ""VARARGS_SPECIALS = {'star', 'double_star'} # pragma: no cover"",
            ""class MockSymbols:# pragma: no cover"",
            ""    star_expr = 'star_expr'# pragma: no cover"",
            ""# pragma: no cover"",
            ""syms = MockSymbols() # pragma: no cover"",
            ""within = {'VARARGS_PARENTS', 'UNPACKING_PARENTS'} # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from typing import Optional # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLeaf:# pragma: no cover"",
            ""    def __init__(self, type_, parent):# pragma: no cover"",
            ""        self.type = type_# pragma: no cover"",
            ""        self.parent = parent# pragma: no cover"",
            ""VARARGS_SPECIALS = {'star', 'double_star'} # pragma: no cover"",
            ""class MockSymbols:# pragma: no cover"",
            ""    star_expr = 'star_expr'# pragma: no cover"",
            ""# pragma: no cover"",
            ""syms = MockSymbols() # pragma: no cover"",
            ""within = {'VARARGS_PARENTS', 'UNPACKING_PARENTS'} # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            """"
        ],
        ""initialization"": [
            ""class MockLeaf:# pragma: no cover"",
            ""    def __init__(self, type_, parent):# pragma: no cover"",
            ""        self.type = type_# pragma: no cover"",
            ""        self.parent = parent# pragma: no cover"",
            ""VARARGS_SPECIALS = {'star', 'double_star'} # pragma: no cover"",
            ""class MockSymbols:# pragma: no cover"",
            ""    star_expr = 'star_expr'# pragma: no cover"",
            ""# pragma: no cover"",
            ""syms = MockSymbols() # pragma: no cover"",
            ""within = {'VARARGS_PARENTS'} # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from typing import Optional # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockLeaf:# pragma: no cover"",
            ""    def __init__(self, type_, parent):# pragma: no cover"",
            ""        self.type = type_# pragma: no cover"",
            ""        self.parent = parent# pragma: no cover"",
            ""VARARGS_SPECIALS = {'star', 'double_star'} # pragma: no cover"",
            ""class MockSymbols:# pragma: no cover"",
            ""    star_expr = 'star_expr'# pragma: no cover"",
            ""# pragma: no cover"",
            ""syms = MockSymbols() # pragma: no cover"",
            ""within = {'VARARGS_PARENTS'} # pragma: no cover""
        ]
    }
]",2,906,0.000453,1277,0.0019155,0.0023685
"When trying to execute the code snippet with the provided imports and initialization, the lines with # uncovered are not executed.

# begin code snippet
""""""Return True if `leaf` is a star or double star in a vararg or kwarg.
    If `within` includes VARARGS_PARENTS, this applies to function signatures.
    If `within` includes UNPACKING_PARENTS, it applies to right hand-side
    extended iterable unpacking (PEP 3132) and additional unpacking
    generalizations (PEP 448).
    """"""
if leaf.type not in VARARGS_SPECIALS or not leaf.parent:
    aux = False
    exit(aux) # uncovered
p = leaf.parent # uncovered
if p.type == syms.star_expr: # uncovered
    # Star expressions are also used as assignment targets in extended
    # iterable unpacking (PEP 3132).  See what its parent is instead.
    if not p.parent: # uncovered
        aux = False # uncovered
        exit(aux) # uncovered
    p = p.parent # uncovered
aux = p.type in within # uncovered
exit(aux) # uncovered

# end code snippet

Please, provide self-contained and concrete Python modified values of the imports and initialization to execute one of the uncovered paths in the code snippet.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""from typing import Any"",
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('star_expr', None)"",
            ""within = ['star_expr']"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""syms = type('Symbols', (), {'star_expr': 'star_expr'})()""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Optional"",
            ""import typing_extensions as te""
        ],
        ""initialization"": [
            ""class MockNode: type = None; parent = None"",
            ""leaf = MockNode()"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""leaf.type = 'star_expr'"",
            ""leaf.parent = MockNode()"",
            ""leaf.parent.type = 'other_expr'"",
            ""within = ['star_expr', 'double_star_expr']""
        ]
    },
    {
        ""imports"": [
            ""from typing import Union, Optional"",
            ""import parso"",
            ""import sys""
        ],
        ""initialization"": [
            ""class MockNode:\n    def __init__(self, type, parent=None):\n        self.type = type\n        self.parent = parent"",
            ""leaf = MockNode(type='not_a_star', parent=None)"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""within = ['some_value']"",
            ""syms = type('MockSyms', (object,), {'star_expr': 'star_expr'})""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""VARARGS_SPECIALS = {'vararg', 'kwargs'}"",
            ""syms = type('Mock', (object,), {'star_expr': 'star_expr'})()"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])(type='star_expr', parent=None)"",
            ""within = {'star_expr'}""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple"",
            ""import sys""
        ],
        ""initialization"": [
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('some_type', None)"",
            ""VARARGS_SPECIALS = ['some_type']"",
            ""within = ['some_condition']"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})"",
            ""leaf = leaf._replace(parent=namedtuple('Parent', ['type', 'parent'])(syms.star_expr, None))""
        ]
    },
    {
        ""imports"": [
            ""from typing import Any, Dict""
        ],
        ""initialization"": [
            ""class Mock: pass"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})()"",
            ""leaf = type('MockLeaf', (), {'type': 'star_expr', 'parent': None})()"",
            ""within = ['some_type', 'star_expr']""
        ]
    },
    {
        ""imports"": [
            ""from typing import Any"",
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""VARARGS_SPECIALS = { 'star_expr', 'double_star_expr' }"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('star_expr', None)"",
            ""within = { 'star_expr', 'double_star_expr' }""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Optional, Dict"",
            ""import enum"",
            ""import nltk""
        ],
        ""initialization"": [
            ""class LeafType(enum.Enum):"",
            ""    star_expr = 1"",
            ""    other = 2"",
            """",
            ""class MockParent:"",
            ""    def __init__(self, type, parent=None):"",
            ""        self.type = type"",
            ""        self.parent = parent"",
            """",
            ""leaf = type('MockLeaf', (object,), {'type': LeafType.other, 'parent': None})()"",
            ""VARARGS_SPECIALS = {LeafType.other}"",
            ""within = {LeafType.star_expr}"",
            ""p = MockParent(type=LeafType.star_expr, parent=None)""
        ]
    },
    {
        ""imports"": [
            ""from typing import Optional"",
            ""import typing""
        ],
        ""initialization"": [
            ""class MockParent:  # This will simulate the parent nodes in the AST structure\n    def __init__(self, type=None, parent=None):\n        self.type = type\n        self.parent = parent"",
            ""class MockLeaf:\n    def __init__(self, type=None, parent=None):\n        self.type = type\n        self.parent = parent"",
            ""VARARGS_SPECIALS = ['star_expr']  # Simulate the allowed types for varargs\nleaf = MockLeaf(type='star_expr', parent=MockParent(type='star_expr', parent=None))"",
            ""within = ['star_expr', 'var_args']  # This simulates the scope of valid types""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""VARARGS_SPECIALS = ['vararg', 'kwarg']"",
            ""syms = type('Mock', (object,), {'star_expr': 'StarExpr'})()"",
            ""Leaf = namedtuple('Leaf', ['type', 'parent'])"",
            ""leaf = Leaf(type='vararg', parent=None)"",
            ""within = ['vararg', 'kwarg']""
        ]
    }
]","[
    {
        ""imports"": [
            ""from typing import Any # pragma: no cover"",
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('star_expr', None) # pragma: no cover"",
            ""within = ['star_expr'] # pragma: no cover"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""syms = type('Symbols', (), {'star_expr': 'star_expr'})() # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Optional # pragma: no cover"",
            ""import typing_extensions as te # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockNode: type = None; parent = None # pragma: no cover"",
            ""leaf = MockNode() # pragma: no cover"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""leaf.type = 'star_expr' # pragma: no cover"",
            ""leaf.parent = MockNode() # pragma: no cover"",
            ""leaf.parent.type = 'other_expr' # pragma: no cover"",
            ""within = ['star_expr', 'double_star_expr'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from typing import Union, Optional # pragma: no cover"",
            ""import parso # pragma: no cover"",
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockNode:# pragma: no cover"",
            ""    def __init__(self, type, parent=None):# pragma: no cover"",
            ""        self.type = type# pragma: no cover"",
            ""        self.parent = parent # pragma: no cover"",
            ""leaf = MockNode(type='not_a_star', parent=None) # pragma: no cover"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""within = ['some_value'] # pragma: no cover"",
            ""syms = type('MockSyms', (object,), {'star_expr': 'star_expr'}) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""VARARGS_SPECIALS = {'vararg', 'kwargs'} # pragma: no cover"",
            ""syms = type('Mock', (object,), {'star_expr': 'star_expr'})() # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])(type='star_expr', parent=None) # pragma: no cover"",
            ""within = {'star_expr'} # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover"",
            ""import sys # pragma: no cover""
        ],
        ""initialization"": [
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('some_type', None) # pragma: no cover"",
            ""VARARGS_SPECIALS = ['some_type'] # pragma: no cover"",
            ""within = ['some_condition'] # pragma: no cover"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'}) # pragma: no cover"",
            ""leaf = leaf._replace(parent=namedtuple('Parent', ['type', 'parent'])(syms.star_expr, None)) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from typing import Any, Dict # pragma: no cover""
        ],
        ""initialization"": [
            ""class Mock: pass # pragma: no cover"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})() # pragma: no cover"",
            ""leaf = type('MockLeaf', (), {'type': 'star_expr', 'parent': None})() # pragma: no cover"",
            ""within = ['some_type', 'star_expr'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from typing import Any # pragma: no cover"",
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""VARARGS_SPECIALS = { 'star_expr', 'double_star_expr' } # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('star_expr', None) # pragma: no cover"",
            ""within = { 'star_expr', 'double_star_expr' } # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from typing import List, Optional, Dict # pragma: no cover"",
            ""import enum # pragma: no cover"",
            ""import nltk # pragma: no cover""
        ],
        ""initialization"": [
            ""class LeafType(enum.Enum): # pragma: no cover"",
            ""    star_expr = 1 # pragma: no cover"",
            ""    other = 2 # pragma: no cover"",
            "" # pragma: no cover"",
            ""class MockParent: # pragma: no cover"",
            ""    def __init__(self, type, parent=None): # pragma: no cover"",
            ""        self.type = type # pragma: no cover"",
            ""        self.parent = parent # pragma: no cover"",
            "" # pragma: no cover"",
            ""leaf = type('MockLeaf', (object,), {'type': LeafType.other, 'parent': None})() # pragma: no cover"",
            ""VARARGS_SPECIALS = {LeafType.other} # pragma: no cover"",
            ""within = {LeafType.star_expr} # pragma: no cover"",
            ""p = MockParent(type=LeafType.star_expr, parent=None) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from typing import Optional # pragma: no cover"",
            ""import typing # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockParent:  # This will simulate the parent nodes in the AST structure# pragma: no cover"",
            ""    def __init__(self, type=None, parent=None):# pragma: no cover"",
            ""        self.type = type# pragma: no cover"",
            ""        self.parent = parent # pragma: no cover"",
            ""class MockLeaf:# pragma: no cover"",
            ""    def __init__(self, type=None, parent=None):# pragma: no cover"",
            ""        self.type = type# pragma: no cover"",
            ""        self.parent = parent # pragma: no cover"",
            ""VARARGS_SPECIALS = ['star_expr']  # Simulate the allowed types for varargs# pragma: no cover"",
            ""leaf = MockLeaf(type='star_expr', parent=MockParent(type='star_expr', parent=None)) # pragma: no cover"",
            ""within = ['star_expr', 'var_args']  # This simulates the scope of valid types # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""VARARGS_SPECIALS = ['vararg', 'kwarg'] # pragma: no cover"",
            ""syms = type('Mock', (object,), {'star_expr': 'StarExpr'})() # pragma: no cover"",
            ""Leaf = namedtuple('Leaf', ['type', 'parent']) # pragma: no cover"",
            ""leaf = Leaf(type='vararg', parent=None) # pragma: no cover"",
            ""within = ['vararg', 'kwarg'] # pragma: no cover""
        ]
    }
]",3,505,0.0002525,1245,0.0018675,0.00212
"When trying to execute the code snippet with the provided imports and initialization, the lines with # uncovered are not executed.

# begin code snippet
""""""Return True if `leaf` is a star or double star in a vararg or kwarg.
    If `within` includes VARARGS_PARENTS, this applies to function signatures.
    If `within` includes UNPACKING_PARENTS, it applies to right hand-side
    extended iterable unpacking (PEP 3132) and additional unpacking
    generalizations (PEP 448).
    """"""
if leaf.type not in VARARGS_SPECIALS or not leaf.parent:
    aux = False
    exit(aux) # uncovered
p = leaf.parent
if p.type == syms.star_expr:
    # Star expressions are also used as assignment targets in extended
    # iterable unpacking (PEP 3132).  See what its parent is instead.
    if not p.parent:
        aux = False
        exit(aux) # uncovered
    p = p.parent # uncovered
aux = p.type in within # uncovered
exit(aux) # uncovered

# end code snippet

Please, provide self-contained and concrete Python modified values of the imports and initialization to execute one of the uncovered paths in the code snippet.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""class MockNode:\n    def __init__(self, type, parent=None):\n        self.type = type\n        self.parent = parent"",
            ""leaf = MockNode(type='vararg', parent=None)"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""p = MockNode(type='star_expr', parent=None)"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})()"",
            ""p.parent = None"",
            ""within = ['vararg', 'star_expr']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})()"",
            ""Parent = namedtuple('Parent', ['type', 'parent'])"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('star_expr', Parent('another_expr', None))"",
            ""within = ['another_expr']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})()"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', None)"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""within = ['star_expr']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""syms = type('Mock', (object,), {'star_expr': 'star_expr'})()"",
            ""Parent = namedtuple('Parent', ['type', 'parent'])"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('star_expr', Parent(type='other_expr', parent=None))"",
            ""within = ['other_expr']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""syms = type('Mock', (object,), {'star_expr': 'star_expr'})()"",
            ""Parent = namedtuple('Parent', ['type', 'parent'])"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', None)"",
            ""p = Parent(type='other_expr', parent=None)"",
            ""within = ['star_expr', 'vararg']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""syms = type('MockSymbols', (), {'star_expr': 'star_expr'})()"",
            ""Parent = namedtuple('Parent', ['type', 'parent'])"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('star_expr', Parent('some_other_expr', None))"",
            ""within = ['some_other_expr']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""VARARGS_SPECIALS = ['vararg', 'kwarg']"",
            ""syms = type('Symbols', (), {'star_expr': 'star_expr'})()"",
            ""Leaf = namedtuple('Leaf', ['type', 'parent'])"",
            ""parent_node = Leaf(type=None, parent=None)"",
            ""leaf = Leaf(type='some_other_type', parent=parent_node)"",
            ""within = ['vararg', 'another_condition']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""class Mock: pass"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""syms = Mock()"",
            ""syms.star_expr = 'star_expr'"",
            ""p = namedtuple('Parent', ['type', 'parent'])(type='some_other_expr', parent=None)"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('star_expr', p)"",
            ""within = ['some_other_expr']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""syms = type('MockSyms', (object,), {'star_expr': 'star_expr'})()"",
            ""Parent = namedtuple('Parent', ['type', 'parent'])"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('some_type', Parent('star_expr', None))"",
            ""within = ['some_type']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""class MockParent:\n    def __init__(self, type=None, parent=None):\n        self.type = type\n        self.parent = parent"",
            ""syms = type('MockSyms', (object,), {'star_expr': 'star_expr'})()"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('vararg', MockParent(type='star_expr', parent=None))"",
            ""VARARGS_SPECIALS = ['vararg', 'kwarg']"",
            ""within = ['star_expr']""
        ]
    }
]","[
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockNode:# pragma: no cover"",
            ""    def __init__(self, type, parent=None):# pragma: no cover"",
            ""        self.type = type# pragma: no cover"",
            ""        self.parent = parent # pragma: no cover"",
            ""leaf = MockNode(type='vararg', parent=None) # pragma: no cover"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""p = MockNode(type='star_expr', parent=None) # pragma: no cover"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})() # pragma: no cover"",
            ""p.parent = None # pragma: no cover"",
            ""within = ['vararg', 'star_expr'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})() # pragma: no cover"",
            ""Parent = namedtuple('Parent', ['type', 'parent']) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('star_expr', Parent('another_expr', None)) # pragma: no cover"",
            ""within = ['another_expr'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})() # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', None) # pragma: no cover"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""within = ['star_expr'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""syms = type('Mock', (object,), {'star_expr': 'star_expr'})() # pragma: no cover"",
            ""Parent = namedtuple('Parent', ['type', 'parent']) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('star_expr', Parent(type='other_expr', parent=None)) # pragma: no cover"",
            ""within = ['other_expr'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""syms = type('Mock', (object,), {'star_expr': 'star_expr'})() # pragma: no cover"",
            ""Parent = namedtuple('Parent', ['type', 'parent']) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', None) # pragma: no cover"",
            ""p = Parent(type='other_expr', parent=None) # pragma: no cover"",
            ""within = ['star_expr', 'vararg'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""syms = type('MockSymbols', (), {'star_expr': 'star_expr'})() # pragma: no cover"",
            ""Parent = namedtuple('Parent', ['type', 'parent']) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('star_expr', Parent('some_other_expr', None)) # pragma: no cover"",
            ""within = ['some_other_expr'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""VARARGS_SPECIALS = ['vararg', 'kwarg'] # pragma: no cover"",
            ""syms = type('Symbols', (), {'star_expr': 'star_expr'})() # pragma: no cover"",
            ""Leaf = namedtuple('Leaf', ['type', 'parent']) # pragma: no cover"",
            ""parent_node = Leaf(type=None, parent=None) # pragma: no cover"",
            ""leaf = Leaf(type='some_other_type', parent=parent_node) # pragma: no cover"",
            ""within = ['vararg', 'another_condition'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class Mock: pass # pragma: no cover"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""syms = Mock() # pragma: no cover"",
            ""syms.star_expr = 'star_expr' # pragma: no cover"",
            ""p = namedtuple('Parent', ['type', 'parent'])(type='some_other_expr', parent=None) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('star_expr', p) # pragma: no cover"",
            ""within = ['some_other_expr'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""syms = type('MockSyms', (object,), {'star_expr': 'star_expr'})() # pragma: no cover"",
            ""Parent = namedtuple('Parent', ['type', 'parent']) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('some_type', Parent('star_expr', None)) # pragma: no cover"",
            ""within = ['some_type'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockParent:# pragma: no cover"",
            ""    def __init__(self, type=None, parent=None):# pragma: no cover"",
            ""        self.type = type# pragma: no cover"",
            ""        self.parent = parent # pragma: no cover"",
            ""syms = type('MockSyms', (object,), {'star_expr': 'star_expr'})() # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('vararg', MockParent(type='star_expr', parent=None)) # pragma: no cover"",
            ""VARARGS_SPECIALS = ['vararg', 'kwarg'] # pragma: no cover"",
            ""within = ['star_expr'] # pragma: no cover""
        ]
    }
]",3,2222,0.001111,1268,0.001902,0.003013
"When trying to execute the code snippet with the provided imports and initialization, the lines with # uncovered are not executed.

# begin code snippet
""""""Return True if `leaf` is a star or double star in a vararg or kwarg.
    If `within` includes VARARGS_PARENTS, this applies to function signatures.
    If `within` includes UNPACKING_PARENTS, it applies to right hand-side
    extended iterable unpacking (PEP 3132) and additional unpacking
    generalizations (PEP 448).
    """"""
if leaf.type not in VARARGS_SPECIALS or not leaf.parent:
    aux = False
    exit(aux) # uncovered
p = leaf.parent
if p.type == syms.star_expr:
    # Star expressions are also used as assignment targets in extended
    # iterable unpacking (PEP 3132).  See what its parent is instead.
    if not p.parent:
        aux = False
        exit(aux) # uncovered
    p = p.parent # uncovered
aux = p.type in within
exit(aux) # uncovered

# end code snippet

Please, provide self-contained and concrete Python modified values of the imports and initialization to execute one of the uncovered paths in the code snippet.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""class Mock: pass"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""syms = type('MockSyms', (object,), {'star_expr': 'star_expr'})()"",
            ""Parent = namedtuple('Parent', ['type', 'parent'])"",
            ""p = Parent('some_other_expr', None)"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('star_expr', p)"",
            ""within = ['some_other_expr']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""class MockNode:\n    def __init__(self, type, parent=None):\n        self.type = type\n        self.parent = parent"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""node = MockNode(type='not_a_star', parent=None)"",
            ""leaf = MockNode(type='some_type', parent=node)"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})()"",
            ""within = ['another_expression']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""class MockParent:\n    def __init__(self, type, parent=None):\n        self.type = type\n        self.parent = parent"",
            ""class MockSymbols:\n    star_expr = 'star_expr'"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""syms = MockSymbols()"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('some_type', None)"",
            ""p = MockParent('star_expr', None)"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('star_expr', p)"",
            ""within = ['some_other_type']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""class Mock: pass"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""syms = Mock()"",
            ""syms.star_expr = 'star_expr'"",
            ""parent_node = namedtuple('Parent', ['type', 'parent'])(type='some_other_expr', parent=None)"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('star_expr', parent_node)"",
            ""within = ['some_other_expr']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""class MockSymbols:\n    star_expr = 'star_expr'"",
            ""syms = MockSymbols()"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('non_star_expr', None)"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""p = namedtuple('Parent', ['type', 'parent'])(type='star_expr', parent=None)"",
            ""within = ['wired_condition']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""class Mock: pass"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""syms = Mock()"",
            ""syms.star_expr = 'star_expr'"",
            ""Parent = namedtuple('Parent', ['type', 'parent'])"",
            ""parent_node = Parent('not_star_expr', None)"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_star_expr', parent_node)"",
            ""within = ['some_condition']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})()"",
            ""Parent = namedtuple('Parent', ['type', 'parent'])"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('some_other_type', None)"",
            ""p = Parent(type='star_expr', parent=None)"",
            ""leaf = leaf._replace(parent=p)"",
            ""within = ['some_other_type']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""class MockParent:\n    def __init__(self, type=None, parent=None):\n        self.type = type\n        self.parent = parent"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})()"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('some_type', MockParent(type=None, parent=None))"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""within = ['valid_type']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})()"",
            ""Parent = namedtuple('Parent', ['type', 'parent'])"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', Parent('star_expr', None))"",
            ""within = ['some_other_type']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""class MockParent:\n    def __init__(self, type, parent=None):\n        self.type = type\n        self.parent = parent"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})()"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('some_type', None)"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""p = MockParent(type='star_expr', parent=MockParent(type=None, parent=None))"",
            ""within = ['some_type']""
        ]
    }
]","[
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class Mock: pass # pragma: no cover"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""syms = type('MockSyms', (object,), {'star_expr': 'star_expr'})() # pragma: no cover"",
            ""Parent = namedtuple('Parent', ['type', 'parent']) # pragma: no cover"",
            ""p = Parent('some_other_expr', None) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('star_expr', p) # pragma: no cover"",
            ""within = ['some_other_expr'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockNode:# pragma: no cover"",
            ""    def __init__(self, type, parent=None):# pragma: no cover"",
            ""        self.type = type# pragma: no cover"",
            ""        self.parent = parent # pragma: no cover"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""node = MockNode(type='not_a_star', parent=None) # pragma: no cover"",
            ""leaf = MockNode(type='some_type', parent=node) # pragma: no cover"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})() # pragma: no cover"",
            ""within = ['another_expression'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockParent:# pragma: no cover"",
            ""    def __init__(self, type, parent=None):# pragma: no cover"",
            ""        self.type = type# pragma: no cover"",
            ""        self.parent = parent # pragma: no cover"",
            ""class MockSymbols:# pragma: no cover"",
            ""    star_expr = 'star_expr' # pragma: no cover"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""syms = MockSymbols() # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('some_type', None) # pragma: no cover"",
            ""p = MockParent('star_expr', None) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('star_expr', p) # pragma: no cover"",
            ""within = ['some_other_type'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class Mock: pass # pragma: no cover"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""syms = Mock() # pragma: no cover"",
            ""syms.star_expr = 'star_expr' # pragma: no cover"",
            ""parent_node = namedtuple('Parent', ['type', 'parent'])(type='some_other_expr', parent=None) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('star_expr', parent_node) # pragma: no cover"",
            ""within = ['some_other_expr'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockSymbols:# pragma: no cover"",
            ""    star_expr = 'star_expr' # pragma: no cover"",
            ""syms = MockSymbols() # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('non_star_expr', None) # pragma: no cover"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""p = namedtuple('Parent', ['type', 'parent'])(type='star_expr', parent=None) # pragma: no cover"",
            ""within = ['wired_condition'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class Mock: pass # pragma: no cover"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""syms = Mock() # pragma: no cover"",
            ""syms.star_expr = 'star_expr' # pragma: no cover"",
            ""Parent = namedtuple('Parent', ['type', 'parent']) # pragma: no cover"",
            ""parent_node = Parent('not_star_expr', None) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_star_expr', parent_node) # pragma: no cover"",
            ""within = ['some_condition'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})() # pragma: no cover"",
            ""Parent = namedtuple('Parent', ['type', 'parent']) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('some_other_type', None) # pragma: no cover"",
            ""p = Parent(type='star_expr', parent=None) # pragma: no cover"",
            ""leaf = leaf._replace(parent=p) # pragma: no cover"",
            ""within = ['some_other_type'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockParent:# pragma: no cover"",
            ""    def __init__(self, type=None, parent=None):# pragma: no cover"",
            ""        self.type = type# pragma: no cover"",
            ""        self.parent = parent # pragma: no cover"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})() # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('some_type', MockParent(type=None, parent=None)) # pragma: no cover"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""within = ['valid_type'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})() # pragma: no cover"",
            ""Parent = namedtuple('Parent', ['type', 'parent']) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', Parent('star_expr', None)) # pragma: no cover"",
            ""within = ['some_other_type'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockParent:# pragma: no cover"",
            ""    def __init__(self, type, parent=None):# pragma: no cover"",
            ""        self.type = type# pragma: no cover"",
            ""        self.parent = parent # pragma: no cover"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})() # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('some_type', None) # pragma: no cover"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""p = MockParent(type='star_expr', parent=MockParent(type=None, parent=None)) # pragma: no cover"",
            ""within = ['some_type'] # pragma: no cover""
        ]
    }
]",3,3960,0.00198,1394,0.002091,0.004071
"When trying to execute the code snippet with the provided imports and initialization, the lines with # uncovered are not executed.

# begin code snippet
""""""Return True if `leaf` is a star or double star in a vararg or kwarg.
    If `within` includes VARARGS_PARENTS, this applies to function signatures.
    If `within` includes UNPACKING_PARENTS, it applies to right hand-side
    extended iterable unpacking (PEP 3132) and additional unpacking
    generalizations (PEP 448).
    """"""
if leaf.type not in VARARGS_SPECIALS or not leaf.parent:
    aux = False
    exit(aux) # uncovered
p = leaf.parent
if p.type == syms.star_expr:
    # Star expressions are also used as assignment targets in extended
    # iterable unpacking (PEP 3132).  See what its parent is instead.
    if not p.parent:
        aux = False
        exit(aux) # uncovered
    p = p.parent # uncovered
aux = p.type in within
exit(aux) # uncovered

# end code snippet

Please, provide self-contained and concrete Python modified values of the imports and initialization to execute one of the uncovered paths in the code snippet.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})()"",
            ""Parent = namedtuple('Parent', ['type', 'parent'])"",
            ""p = Parent(type='star_expr', parent=None)"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', p)"",
            ""within = ['another_condition']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""class Mock: pass"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""syms = type('MockSyms', (object,), {'star_expr': 'star_expr'})()"",
            ""Parent = namedtuple('Parent', ['type', 'parent'])"",
            ""parent_node = Parent(type=None, parent=None)"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', parent_node)"",
            ""within = ['not_a_star']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""class MockParent:\n    def __init__(self, type, parent=None):\n        self.type = type\n        self.parent = parent"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})()"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', None)"",
            ""p = MockParent('star_expr', parent=None)"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('some_type', p)"",
            ""within = ['some_other_type']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""class MockSymbols:\n    star_expr = 'star_expr'"",
            ""syms = MockSymbols()"",
            ""Parent = namedtuple('Parent', ['type', 'parent'])"",
            ""p = Parent(type=None, parent=None)"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('vararg', p)"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""within = ['some_other_type']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})()"",
            ""Parent = namedtuple('Parent', ['type', 'parent'])"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('non_star_expr', Parent('star_expr', None))"",
            ""within = ['some_condition']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""class MockParent:\n    def __init__(self, type, parent=None):\n        self.type = type\n        self.parent = parent"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})()"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('non_vararg', None)"",
            ""p = MockParent(type='star_expr', parent=None)"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('star_expr', p)"",
            ""within = ['non_vararg']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""class MockParent:\n    def __init__(self, type=None, parent=None):\n        self.type = type\n        self.parent = parent"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})()"",
            ""parent_node = MockParent(type=None, parent=None)"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('some_type', parent_node)"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""within = ['some_other_type']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""class MockNode:\n    def __init__(self, type, parent=None):\n        self.type = type\n        self.parent = parent"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""leaf = MockNode(type='some_type', parent=None)"",
            ""p = MockNode(type='star_expr', parent=None)"",
            ""p.parent = None"",
            ""within = ['some_other_type']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""class MockParent:\n    def __init__(self, type, parent=None):\n        self.type = type\n        self.parent = parent"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})()"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('some_type', None)"",
            ""p = MockParent(type='star_expr', parent=None)"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('some_type', p)"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""within = ['another_type']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""class MockParent:\n    def __init__(self, type=None, parent=None):\n        self.type = type\n        self.parent = parent"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})()"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('some_type', None)"",
            ""parent_node = MockParent(type='star_expr', parent=None)"",
            ""leaf = leaf._replace(parent=parent_node)"",
            ""VARARGS_SPECIALS = ['vararg', 'kwarg']"",
            ""within = ['some_other_type']""
        ]
    }
]","[
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})() # pragma: no cover"",
            ""Parent = namedtuple('Parent', ['type', 'parent']) # pragma: no cover"",
            ""p = Parent(type='star_expr', parent=None) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', p) # pragma: no cover"",
            ""within = ['another_condition'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class Mock: pass # pragma: no cover"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""syms = type('MockSyms', (object,), {'star_expr': 'star_expr'})() # pragma: no cover"",
            ""Parent = namedtuple('Parent', ['type', 'parent']) # pragma: no cover"",
            ""parent_node = Parent(type=None, parent=None) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', parent_node) # pragma: no cover"",
            ""within = ['not_a_star'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockParent:# pragma: no cover"",
            ""    def __init__(self, type, parent=None):# pragma: no cover"",
            ""        self.type = type# pragma: no cover"",
            ""        self.parent = parent # pragma: no cover"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})() # pragma: no cover"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', None) # pragma: no cover"",
            ""p = MockParent('star_expr', parent=None) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('some_type', p) # pragma: no cover"",
            ""within = ['some_other_type'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockSymbols:# pragma: no cover"",
            ""    star_expr = 'star_expr' # pragma: no cover"",
            ""syms = MockSymbols() # pragma: no cover"",
            ""Parent = namedtuple('Parent', ['type', 'parent']) # pragma: no cover"",
            ""p = Parent(type=None, parent=None) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('vararg', p) # pragma: no cover"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""within = ['some_other_type'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})() # pragma: no cover"",
            ""Parent = namedtuple('Parent', ['type', 'parent']) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('non_star_expr', Parent('star_expr', None)) # pragma: no cover"",
            ""within = ['some_condition'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockParent:# pragma: no cover"",
            ""    def __init__(self, type, parent=None):# pragma: no cover"",
            ""        self.type = type# pragma: no cover"",
            ""        self.parent = parent # pragma: no cover"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})() # pragma: no cover"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('non_vararg', None) # pragma: no cover"",
            ""p = MockParent(type='star_expr', parent=None) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('star_expr', p) # pragma: no cover"",
            ""within = ['non_vararg'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockParent:# pragma: no cover"",
            ""    def __init__(self, type=None, parent=None):# pragma: no cover"",
            ""        self.type = type# pragma: no cover"",
            ""        self.parent = parent # pragma: no cover"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})() # pragma: no cover"",
            ""parent_node = MockParent(type=None, parent=None) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('some_type', parent_node) # pragma: no cover"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""within = ['some_other_type'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockNode:# pragma: no cover"",
            ""    def __init__(self, type, parent=None):# pragma: no cover"",
            ""        self.type = type# pragma: no cover"",
            ""        self.parent = parent # pragma: no cover"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""leaf = MockNode(type='some_type', parent=None) # pragma: no cover"",
            ""p = MockNode(type='star_expr', parent=None) # pragma: no cover"",
            ""p.parent = None # pragma: no cover"",
            ""within = ['some_other_type'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockParent:# pragma: no cover"",
            ""    def __init__(self, type, parent=None):# pragma: no cover"",
            ""        self.type = type# pragma: no cover"",
            ""        self.parent = parent # pragma: no cover"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})() # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('some_type', None) # pragma: no cover"",
            ""p = MockParent(type='star_expr', parent=None) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('some_type', p) # pragma: no cover"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""within = ['another_type'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockParent:# pragma: no cover"",
            ""    def __init__(self, type=None, parent=None):# pragma: no cover"",
            ""        self.type = type# pragma: no cover"",
            ""        self.parent = parent # pragma: no cover"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})() # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('some_type', None) # pragma: no cover"",
            ""parent_node = MockParent(type='star_expr', parent=None) # pragma: no cover"",
            ""leaf = leaf._replace(parent=parent_node) # pragma: no cover"",
            ""VARARGS_SPECIALS = ['vararg', 'kwarg'] # pragma: no cover"",
            ""within = ['some_other_type'] # pragma: no cover""
        ]
    }
]",3,5824,0.002912,1458,0.002187,0.005099
"When trying to execute the code snippet with the provided imports and initialization, the lines with # uncovered are not executed.

# begin code snippet
""""""Return True if `leaf` is a star or double star in a vararg or kwarg.
    If `within` includes VARARGS_PARENTS, this applies to function signatures.
    If `within` includes UNPACKING_PARENTS, it applies to right hand-side
    extended iterable unpacking (PEP 3132) and additional unpacking
    generalizations (PEP 448).
    """"""
if leaf.type not in VARARGS_SPECIALS or not leaf.parent:
    aux = False
    exit(aux) # uncovered
p = leaf.parent
if p.type == syms.star_expr:
    # Star expressions are also used as assignment targets in extended
    # iterable unpacking (PEP 3132).  See what its parent is instead.
    if not p.parent:
        aux = False
        exit(aux) # uncovered
    p = p.parent # uncovered
aux = p.type in within
exit(aux) # uncovered

# end code snippet

Please, provide self-contained and concrete Python modified values of the imports and initialization to execute one of the uncovered paths in the code snippet.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""class Mock: pass"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})()"",
            ""Parent = namedtuple('Parent', ['type', 'parent'])"",
            ""p = Parent(type=None, parent=None)"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', p)"",
            ""within = ['some_condition']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})()"",
            ""Parent = namedtuple('Parent', ['type', 'parent'])"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('non_star_expr', Parent('star_expr', Parent('another_type', None)))"",
            ""within = ['another_type']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})()"",
            ""Parent = namedtuple('Parent', ['type', 'parent'])"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('non_star_expr', None)"",
            ""p = Parent(type='star_expr', parent=None)"",
            ""leaf = leaf._replace(parent=p)"",
            ""within = ['some_other_type']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})()"",
            ""Parent = namedtuple('Parent', ['type', 'parent'])"",
            ""parent_node = Parent(type=None, parent=None)"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('some_type', parent_node)"",
            ""within = ['some_other_type']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""class MockParent:\n    def __init__(self, type=None, parent=None):\n        self.type = type\n        self.parent = parent"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})()"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""p = MockParent(type='star_expr', parent=None)"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', None)"",
            ""within = ['some_condition']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""class Mock: pass"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})()"",
            ""Parent = namedtuple('Parent', ['type', 'parent'])"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('some_type', Parent('another_type', None))"",
            ""p = Parent(type='star_expr', parent=None)"",
            ""within = ['non_star']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""class MockParent:\n    def __init__(self, type=None, parent=None):\n        self.type = type\n        self.parent = parent"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})()"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('some_type', None)"",
            ""p = MockParent(type='star_expr', parent=None)"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('some_type', p)"",
            ""within = ['another_type']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""class MockParent:\n    def __init__(self, type=None, parent=None):\n        self.type = type\n        self.parent = parent"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})()"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', None)"",
            ""p = MockParent(type='star_expr', parent=None)"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('some_type', p)"",
            ""within = ['some_other_type']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})()"",
            ""Parent = namedtuple('Parent', ['type', 'parent'])"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('some_type', None)"",
            ""p = Parent(type='star_expr', parent=None)"",
            ""leaf = leaf._replace(parent=p)"",
            ""within = ['another_condition']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})()"",
            ""Parent = namedtuple('Parent', ['type', 'parent'])"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', Parent('star_expr', None))"",
            ""within = ['some_other_type']""
        ]
    }
]","[
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class Mock: pass # pragma: no cover"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})() # pragma: no cover"",
            ""Parent = namedtuple('Parent', ['type', 'parent']) # pragma: no cover"",
            ""p = Parent(type=None, parent=None) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', p) # pragma: no cover"",
            ""within = ['some_condition'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})() # pragma: no cover"",
            ""Parent = namedtuple('Parent', ['type', 'parent']) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('non_star_expr', Parent('star_expr', Parent('another_type', None))) # pragma: no cover"",
            ""within = ['another_type'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})() # pragma: no cover"",
            ""Parent = namedtuple('Parent', ['type', 'parent']) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('non_star_expr', None) # pragma: no cover"",
            ""p = Parent(type='star_expr', parent=None) # pragma: no cover"",
            ""leaf = leaf._replace(parent=p) # pragma: no cover"",
            ""within = ['some_other_type'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})() # pragma: no cover"",
            ""Parent = namedtuple('Parent', ['type', 'parent']) # pragma: no cover"",
            ""parent_node = Parent(type=None, parent=None) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('some_type', parent_node) # pragma: no cover"",
            ""within = ['some_other_type'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockParent:# pragma: no cover"",
            ""    def __init__(self, type=None, parent=None):# pragma: no cover"",
            ""        self.type = type# pragma: no cover"",
            ""        self.parent = parent # pragma: no cover"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})() # pragma: no cover"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""p = MockParent(type='star_expr', parent=None) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', None) # pragma: no cover"",
            ""within = ['some_condition'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class Mock: pass # pragma: no cover"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})() # pragma: no cover"",
            ""Parent = namedtuple('Parent', ['type', 'parent']) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('some_type', Parent('another_type', None)) # pragma: no cover"",
            ""p = Parent(type='star_expr', parent=None) # pragma: no cover"",
            ""within = ['non_star'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockParent:# pragma: no cover"",
            ""    def __init__(self, type=None, parent=None):# pragma: no cover"",
            ""        self.type = type# pragma: no cover"",
            ""        self.parent = parent # pragma: no cover"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})() # pragma: no cover"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('some_type', None) # pragma: no cover"",
            ""p = MockParent(type='star_expr', parent=None) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('some_type', p) # pragma: no cover"",
            ""within = ['another_type'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockParent:# pragma: no cover"",
            ""    def __init__(self, type=None, parent=None):# pragma: no cover"",
            ""        self.type = type# pragma: no cover"",
            ""        self.parent = parent # pragma: no cover"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})() # pragma: no cover"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', None) # pragma: no cover"",
            ""p = MockParent(type='star_expr', parent=None) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('some_type', p) # pragma: no cover"",
            ""within = ['some_other_type'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})() # pragma: no cover"",
            ""Parent = namedtuple('Parent', ['type', 'parent']) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('some_type', None) # pragma: no cover"",
            ""p = Parent(type='star_expr', parent=None) # pragma: no cover"",
            ""leaf = leaf._replace(parent=p) # pragma: no cover"",
            ""within = ['another_condition'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})() # pragma: no cover"",
            ""Parent = namedtuple('Parent', ['type', 'parent']) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', Parent('star_expr', None)) # pragma: no cover"",
            ""within = ['some_other_type'] # pragma: no cover""
        ]
    }
]",3,7752,0.003876,1418,0.002127,0.006003
"When trying to execute the code snippet with the provided imports and initialization, the lines with # uncovered are not executed.

# begin code snippet
""""""Return True if `leaf` is a star or double star in a vararg or kwarg.
    If `within` includes VARARGS_PARENTS, this applies to function signatures.
    If `within` includes UNPACKING_PARENTS, it applies to right hand-side
    extended iterable unpacking (PEP 3132) and additional unpacking
    generalizations (PEP 448).
    """"""
if leaf.type not in VARARGS_SPECIALS or not leaf.parent:
    aux = False
    exit(aux) # uncovered
p = leaf.parent
if p.type == syms.star_expr:
    # Star expressions are also used as assignment targets in extended
    # iterable unpacking (PEP 3132).  See what its parent is instead.
    if not p.parent:
        aux = False
        exit(aux) # uncovered
    p = p.parent # uncovered
aux = p.type in within
exit(aux) # uncovered

# end code snippet

Please, provide self-contained and concrete Python modified values of the imports and initialization to execute one of the uncovered paths in the code snippet.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""class MockSymbols:\n    star_expr = 'star_expr'"",
            ""syms = MockSymbols()"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""Parent = namedtuple('Parent', ['type', 'parent'])"",
            ""parent_node = Parent(type=None, parent=None)"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('some_non_star_type', parent_node)"",
            ""within = ['another_type']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})()"",
            ""Parent = namedtuple('Parent', ['type', 'parent'])"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', Parent(type=None, parent=None))"",
            ""p = Parent(type=None, parent=None)"",
            ""leaf = leaf._replace(parent=p)"",
            ""within = ['some_other_type']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""class MockParent:\n    def __init__(self, type=None, parent=None):\n        self.type = type\n        self.parent = parent"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})()"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('non_star', None)"",
            ""p = MockParent(type='star_expr', parent=None)"",
            ""within = ['some_type']"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('some_type', p)""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""class Mock: pass"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})()"",
            ""Parent = namedtuple('Parent', ['type', 'parent'])"",
            ""p = Parent(type=None, parent=None)"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', p)"",
            ""within = ['some_other_type']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""class Mock: pass"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})()"",
            ""Parent = namedtuple('Parent', ['type', 'parent'])"",
            ""p = Parent('star_expr', None)"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', p)"",
            ""within = ['some_other_type']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""class MockParent:\n    def __init__(self, type=None, parent=None):\n        self.type = type\n        self.parent = parent"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})()"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', None)"",
            ""p = MockParent(type='star_expr', parent=None)"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('some_type', p)"",
            ""within = ['some_condition']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})()"",
            ""Parent = namedtuple('Parent', ['type', 'parent'])"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('some_type', Parent('star_expr', Parent('another_type', None)))"",
            ""within = ['another_type']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})()"",
            ""Parent = namedtuple('Parent', ['type', 'parent'])"",
            ""parent_node = Parent(type=None, parent=None)"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('some_type', parent_node)"",
            ""within = ['some_type']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""class MockSymbols:\n    star_expr = 'star_expr'"",
            ""syms = MockSymbols()"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""Parent = namedtuple('Parent', ['type', 'parent'])"",
            ""parent_node = Parent(type='other_type', parent=None)"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('some_type', parent_node)"",
            ""within = ['valid_type']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""class MockParent:\n    def __init__(self, type=None, parent=None):\n        self.type = type\n        self.parent = parent"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})()"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', None)"",
            ""p = MockParent(type='star_expr', parent=None)"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('another_type', p)"",
            ""within = ['some_other_type']""
        ]
    }
]","[
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockSymbols:# pragma: no cover"",
            ""    star_expr = 'star_expr' # pragma: no cover"",
            ""syms = MockSymbols() # pragma: no cover"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""Parent = namedtuple('Parent', ['type', 'parent']) # pragma: no cover"",
            ""parent_node = Parent(type=None, parent=None) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('some_non_star_type', parent_node) # pragma: no cover"",
            ""within = ['another_type'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})() # pragma: no cover"",
            ""Parent = namedtuple('Parent', ['type', 'parent']) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', Parent(type=None, parent=None)) # pragma: no cover"",
            ""p = Parent(type=None, parent=None) # pragma: no cover"",
            ""leaf = leaf._replace(parent=p) # pragma: no cover"",
            ""within = ['some_other_type'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockParent:# pragma: no cover"",
            ""    def __init__(self, type=None, parent=None):# pragma: no cover"",
            ""        self.type = type# pragma: no cover"",
            ""        self.parent = parent # pragma: no cover"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})() # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('non_star', None) # pragma: no cover"",
            ""p = MockParent(type='star_expr', parent=None) # pragma: no cover"",
            ""within = ['some_type'] # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('some_type', p) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class Mock: pass # pragma: no cover"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})() # pragma: no cover"",
            ""Parent = namedtuple('Parent', ['type', 'parent']) # pragma: no cover"",
            ""p = Parent(type=None, parent=None) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', p) # pragma: no cover"",
            ""within = ['some_other_type'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class Mock: pass # pragma: no cover"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})() # pragma: no cover"",
            ""Parent = namedtuple('Parent', ['type', 'parent']) # pragma: no cover"",
            ""p = Parent('star_expr', None) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', p) # pragma: no cover"",
            ""within = ['some_other_type'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockParent:# pragma: no cover"",
            ""    def __init__(self, type=None, parent=None):# pragma: no cover"",
            ""        self.type = type# pragma: no cover"",
            ""        self.parent = parent # pragma: no cover"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})() # pragma: no cover"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', None) # pragma: no cover"",
            ""p = MockParent(type='star_expr', parent=None) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('some_type', p) # pragma: no cover"",
            ""within = ['some_condition'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})() # pragma: no cover"",
            ""Parent = namedtuple('Parent', ['type', 'parent']) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('some_type', Parent('star_expr', Parent('another_type', None))) # pragma: no cover"",
            ""within = ['another_type'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})() # pragma: no cover"",
            ""Parent = namedtuple('Parent', ['type', 'parent']) # pragma: no cover"",
            ""parent_node = Parent(type=None, parent=None) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('some_type', parent_node) # pragma: no cover"",
            ""within = ['some_type'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockSymbols:# pragma: no cover"",
            ""    star_expr = 'star_expr' # pragma: no cover"",
            ""syms = MockSymbols() # pragma: no cover"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""Parent = namedtuple('Parent', ['type', 'parent']) # pragma: no cover"",
            ""parent_node = Parent(type='other_type', parent=None) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('some_type', parent_node) # pragma: no cover"",
            ""within = ['valid_type'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockParent:# pragma: no cover"",
            ""    def __init__(self, type=None, parent=None):# pragma: no cover"",
            ""        self.type = type# pragma: no cover"",
            ""        self.parent = parent # pragma: no cover"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})() # pragma: no cover"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', None) # pragma: no cover"",
            ""p = MockParent(type='star_expr', parent=None) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('another_type', p) # pragma: no cover"",
            ""within = ['some_other_type'] # pragma: no cover""
        ]
    }
]",3,9640,0.00482,1426,0.002139,0.006959
"When trying to execute the code snippet with the provided imports and initialization, the lines with # uncovered are not executed.

# begin code snippet
""""""Return True if `leaf` is a star or double star in a vararg or kwarg.
    If `within` includes VARARGS_PARENTS, this applies to function signatures.
    If `within` includes UNPACKING_PARENTS, it applies to right hand-side
    extended iterable unpacking (PEP 3132) and additional unpacking
    generalizations (PEP 448).
    """"""
if leaf.type not in VARARGS_SPECIALS or not leaf.parent:
    aux = False
    exit(aux) # uncovered
p = leaf.parent
if p.type == syms.star_expr:
    # Star expressions are also used as assignment targets in extended
    # iterable unpacking (PEP 3132).  See what its parent is instead.
    if not p.parent:
        aux = False
        exit(aux) # uncovered
    p = p.parent # uncovered
aux = p.type in within
exit(aux) # uncovered

# end code snippet

Please, provide self-contained and concrete Python modified values of the imports and initialization to execute one of the uncovered paths in the code snippet.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""class MockSymbols:\n    star_expr = 'star_expr'"",
            ""syms = MockSymbols()"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""Parent = namedtuple('Parent', ['type', 'parent'])"",
            ""p = Parent(type='star_expr', parent=None)"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', p)"",
            ""within = ['some_condition']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""class MockSymbols:\n    star_expr = 'star_expr'"",
            ""syms = MockSymbols()"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""Parent = namedtuple('Parent', ['type', 'parent'])"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', None)"",
            ""p = Parent(type='star_expr', parent=None)"",
            ""leaf = leaf._replace(parent=p)"",
            ""within = ['not_a_star']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""class MockParent:\n    def __init__(self, type=None, parent=None):\n        self.type = type\n        self.parent = parent"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})()"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', None)"",
            ""parent_node = MockParent(type='star_expr', parent=None)"",
            ""leaf = leaf._replace(parent=parent_node)"",
            ""within = ['another_type']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})()"",
            ""Parent = namedtuple('Parent', ['type', 'parent'])"",
            ""parent_node = Parent(type=None, parent=None)"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', parent_node)"",
            ""within = ['not_a_star']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})()"",
            ""Parent = namedtuple('Parent', ['type', 'parent'])"",
            ""parent_node = Parent(type=None, parent=None)"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', parent_node)"",
            ""within = ['some_other_type']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""class MockSymbols:\n    star_expr = 'star_expr'"",
            ""syms = MockSymbols()"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""Parent = namedtuple('Parent', ['type', 'parent'])"",
            ""parent_node = Parent(type='star_expr', parent=None)"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', parent_node)"",
            ""within = ['some_other_type']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""class MockSymbols:\n    star_expr = 'star_expr'"",
            ""syms = MockSymbols()"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""Parent = namedtuple('Parent', ['type', 'parent'])"",
            ""p = Parent(type=None, parent=None)"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', p)"",
            ""within = ['some_type']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""class MockSymbols:\n    star_expr = 'star_expr'"",
            ""syms = MockSymbols()"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""Parent = namedtuple('Parent', ['type', 'parent'])"",
            ""parent_node = Parent(type='some_other_type', parent=None)"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', parent_node)"",
            ""within = ['another_condition']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})()"",
            ""Parent = namedtuple('Parent', ['type', 'parent'])"",
            ""parent_node = Parent(type='not_star', parent=None)"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', parent_node)"",
            ""within = ['some_other_condition']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""class MockSymbols:\n    star_expr = 'star_expr'"",
            ""syms = MockSymbols()"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""Parent = namedtuple('Parent', ['type', 'parent'])"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('some_type', None)"",
            ""p = Parent(type=None, parent=None)"",
            ""leaf = leaf._replace(parent=p)"",
            ""within = ['another_type']""
        ]
    }
]","[
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockSymbols:# pragma: no cover"",
            ""    star_expr = 'star_expr' # pragma: no cover"",
            ""syms = MockSymbols() # pragma: no cover"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""Parent = namedtuple('Parent', ['type', 'parent']) # pragma: no cover"",
            ""p = Parent(type='star_expr', parent=None) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', p) # pragma: no cover"",
            ""within = ['some_condition'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockSymbols:# pragma: no cover"",
            ""    star_expr = 'star_expr' # pragma: no cover"",
            ""syms = MockSymbols() # pragma: no cover"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""Parent = namedtuple('Parent', ['type', 'parent']) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', None) # pragma: no cover"",
            ""p = Parent(type='star_expr', parent=None) # pragma: no cover"",
            ""leaf = leaf._replace(parent=p) # pragma: no cover"",
            ""within = ['not_a_star'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockParent:# pragma: no cover"",
            ""    def __init__(self, type=None, parent=None):# pragma: no cover"",
            ""        self.type = type# pragma: no cover"",
            ""        self.parent = parent # pragma: no cover"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})() # pragma: no cover"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', None) # pragma: no cover"",
            ""parent_node = MockParent(type='star_expr', parent=None) # pragma: no cover"",
            ""leaf = leaf._replace(parent=parent_node) # pragma: no cover"",
            ""within = ['another_type'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})() # pragma: no cover"",
            ""Parent = namedtuple('Parent', ['type', 'parent']) # pragma: no cover"",
            ""parent_node = Parent(type=None, parent=None) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', parent_node) # pragma: no cover"",
            ""within = ['not_a_star'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})() # pragma: no cover"",
            ""Parent = namedtuple('Parent', ['type', 'parent']) # pragma: no cover"",
            ""parent_node = Parent(type=None, parent=None) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', parent_node) # pragma: no cover"",
            ""within = ['some_other_type'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockSymbols:# pragma: no cover"",
            ""    star_expr = 'star_expr' # pragma: no cover"",
            ""syms = MockSymbols() # pragma: no cover"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""Parent = namedtuple('Parent', ['type', 'parent']) # pragma: no cover"",
            ""parent_node = Parent(type='star_expr', parent=None) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', parent_node) # pragma: no cover"",
            ""within = ['some_other_type'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockSymbols:# pragma: no cover"",
            ""    star_expr = 'star_expr' # pragma: no cover"",
            ""syms = MockSymbols() # pragma: no cover"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""Parent = namedtuple('Parent', ['type', 'parent']) # pragma: no cover"",
            ""p = Parent(type=None, parent=None) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', p) # pragma: no cover"",
            ""within = ['some_type'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockSymbols:# pragma: no cover"",
            ""    star_expr = 'star_expr' # pragma: no cover"",
            ""syms = MockSymbols() # pragma: no cover"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""Parent = namedtuple('Parent', ['type', 'parent']) # pragma: no cover"",
            ""parent_node = Parent(type='some_other_type', parent=None) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', parent_node) # pragma: no cover"",
            ""within = ['another_condition'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""syms = type('MockSyms', (), {'star_expr': 'star_expr'})() # pragma: no cover"",
            ""Parent = namedtuple('Parent', ['type', 'parent']) # pragma: no cover"",
            ""parent_node = Parent(type='not_star', parent=None) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', parent_node) # pragma: no cover"",
            ""within = ['some_other_condition'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockSymbols:# pragma: no cover"",
            ""    star_expr = 'star_expr' # pragma: no cover"",
            ""syms = MockSymbols() # pragma: no cover"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""Parent = namedtuple('Parent', ['type', 'parent']) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('some_type', None) # pragma: no cover"",
            ""p = Parent(type=None, parent=None) # pragma: no cover"",
            ""leaf = leaf._replace(parent=p) # pragma: no cover"",
            ""within = ['another_type'] # pragma: no cover""
        ]
    }
]",3,11536,0.005768,1365,0.0020475,0.0078155
"When trying to execute the code snippet with the provided imports and initialization, the lines with # uncovered are not executed.

# begin code snippet
""""""Return True if `leaf` is a star or double star in a vararg or kwarg.
    If `within` includes VARARGS_PARENTS, this applies to function signatures.
    If `within` includes UNPACKING_PARENTS, it applies to right hand-side
    extended iterable unpacking (PEP 3132) and additional unpacking
    generalizations (PEP 448).
    """"""
if leaf.type not in VARARGS_SPECIALS or not leaf.parent:
    aux = False
    exit(aux) # uncovered
p = leaf.parent
if p.type == syms.star_expr:
    # Star expressions are also used as assignment targets in extended
    # iterable unpacking (PEP 3132).  See what its parent is instead.
    if not p.parent:
        aux = False
        exit(aux) # uncovered
    p = p.parent # uncovered
aux = p.type in within
exit(aux) # uncovered

# end code snippet

Please, provide self-contained and concrete Python modified values of the imports and initialization to execute one of the uncovered paths in the code snippet.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""class MockSymbols:\n    star_expr = 'star_expr'"",
            ""syms = MockSymbols()"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""Parent = namedtuple('Parent', ['type', 'parent'])"",
            ""p = Parent(type='star_expr', parent=None)"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', p)"",
            ""within = ['some_condition']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""class MockSymbols:\n    star_expr = 'star_expr'"",
            ""syms = MockSymbols()"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""Parent = namedtuple('Parent', ['type', 'parent'])"",
            ""parent_node = Parent(type='star_expr', parent=None)"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', parent_node)"",
            ""within = ['some_condition']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""class MockSymbols:\n    star_expr = 'star_expr'"",
            ""syms = MockSymbols()"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""Parent = namedtuple('Parent', ['type', 'parent'])"",
            ""parent_node = Parent(type='not_star', parent=None)"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', parent_node)"",
            ""within = ['some_condition']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""class MockSymbols:\n    star_expr = 'star_expr'"",
            ""syms = MockSymbols()"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""Parent = namedtuple('Parent', ['type', 'parent'])"",
            ""p = Parent(type=None, parent=None)"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', p)"",
            ""within = ['some_condition']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""class MockSymbols:\n    star_expr = 'star_expr'"",
            ""syms = MockSymbols()"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""Parent = namedtuple('Parent', ['type', 'parent'])"",
            ""parent_node = Parent(type=None, parent=None)"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', parent_node)"",
            ""within = ['some_condition']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""class MockSymbols:\n    star_expr = 'star_expr'"",
            ""syms = MockSymbols()"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""Parent = namedtuple('Parent', ['type', 'parent'])"",
            ""p = Parent(type='star_expr', parent=None)"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', p)"",
            ""within = ['some_condition']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""class MockSymbols:\n    star_expr = 'star_expr'"",
            ""syms = MockSymbols()"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""Parent = namedtuple('Parent', ['type', 'parent'])"",
            ""parent_node = Parent(type='star_expr', parent=None)"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('some_other_type', parent_node)"",
            ""within = ['other_type']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""class MockSymbols:\n    star_expr = 'star_expr'"",
            ""syms = MockSymbols()"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""Parent = namedtuple('Parent', ['type', 'parent'])"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('some_type', None)"",
            ""p = Parent(type=None, parent=None)"",
            ""leaf = leaf._replace(parent=p)"",
            ""within = ['another_condition']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""class MockSymbols:\n    star_expr = 'star_expr'"",
            ""syms = MockSymbols()"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""Parent = namedtuple('Parent', ['type', 'parent'])"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('some_type', None)"",
            ""p = Parent(type='star_expr', parent=None)"",
            ""leaf = leaf._replace(parent=p)"",
            ""within = ['some_condition']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""class MockSymbols:\n    star_expr = 'star_expr'"",
            ""syms = MockSymbols()"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""Parent = namedtuple('Parent', ['type', 'parent'])"",
            ""parent_node = Parent(type=None, parent=None)"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('some_type', parent_node)"",
            ""within = ['some_condition']""
        ]
    }
]","[
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockSymbols:# pragma: no cover"",
            ""    star_expr = 'star_expr' # pragma: no cover"",
            ""syms = MockSymbols() # pragma: no cover"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""Parent = namedtuple('Parent', ['type', 'parent']) # pragma: no cover"",
            ""p = Parent(type='star_expr', parent=None) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', p) # pragma: no cover"",
            ""within = ['some_condition'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockSymbols:# pragma: no cover"",
            ""    star_expr = 'star_expr' # pragma: no cover"",
            ""syms = MockSymbols() # pragma: no cover"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""Parent = namedtuple('Parent', ['type', 'parent']) # pragma: no cover"",
            ""parent_node = Parent(type='star_expr', parent=None) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', parent_node) # pragma: no cover"",
            ""within = ['some_condition'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockSymbols:# pragma: no cover"",
            ""    star_expr = 'star_expr' # pragma: no cover"",
            ""syms = MockSymbols() # pragma: no cover"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""Parent = namedtuple('Parent', ['type', 'parent']) # pragma: no cover"",
            ""parent_node = Parent(type='not_star', parent=None) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', parent_node) # pragma: no cover"",
            ""within = ['some_condition'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockSymbols:# pragma: no cover"",
            ""    star_expr = 'star_expr' # pragma: no cover"",
            ""syms = MockSymbols() # pragma: no cover"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""Parent = namedtuple('Parent', ['type', 'parent']) # pragma: no cover"",
            ""p = Parent(type=None, parent=None) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', p) # pragma: no cover"",
            ""within = ['some_condition'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockSymbols:# pragma: no cover"",
            ""    star_expr = 'star_expr' # pragma: no cover"",
            ""syms = MockSymbols() # pragma: no cover"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""Parent = namedtuple('Parent', ['type', 'parent']) # pragma: no cover"",
            ""parent_node = Parent(type=None, parent=None) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', parent_node) # pragma: no cover"",
            ""within = ['some_condition'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockSymbols:# pragma: no cover"",
            ""    star_expr = 'star_expr' # pragma: no cover"",
            ""syms = MockSymbols() # pragma: no cover"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""Parent = namedtuple('Parent', ['type', 'parent']) # pragma: no cover"",
            ""p = Parent(type='star_expr', parent=None) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', p) # pragma: no cover"",
            ""within = ['some_condition'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockSymbols:# pragma: no cover"",
            ""    star_expr = 'star_expr' # pragma: no cover"",
            ""syms = MockSymbols() # pragma: no cover"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""Parent = namedtuple('Parent', ['type', 'parent']) # pragma: no cover"",
            ""parent_node = Parent(type='star_expr', parent=None) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('some_other_type', parent_node) # pragma: no cover"",
            ""within = ['other_type'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockSymbols:# pragma: no cover"",
            ""    star_expr = 'star_expr' # pragma: no cover"",
            ""syms = MockSymbols() # pragma: no cover"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""Parent = namedtuple('Parent', ['type', 'parent']) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('some_type', None) # pragma: no cover"",
            ""p = Parent(type=None, parent=None) # pragma: no cover"",
            ""leaf = leaf._replace(parent=p) # pragma: no cover"",
            ""within = ['another_condition'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockSymbols:# pragma: no cover"",
            ""    star_expr = 'star_expr' # pragma: no cover"",
            ""syms = MockSymbols() # pragma: no cover"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""Parent = namedtuple('Parent', ['type', 'parent']) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('some_type', None) # pragma: no cover"",
            ""p = Parent(type='star_expr', parent=None) # pragma: no cover"",
            ""leaf = leaf._replace(parent=p) # pragma: no cover"",
            ""within = ['some_condition'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockSymbols:# pragma: no cover"",
            ""    star_expr = 'star_expr' # pragma: no cover"",
            ""syms = MockSymbols() # pragma: no cover"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""Parent = namedtuple('Parent', ['type', 'parent']) # pragma: no cover"",
            ""parent_node = Parent(type=None, parent=None) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('some_type', parent_node) # pragma: no cover"",
            ""within = ['some_condition'] # pragma: no cover""
        ]
    }
]",3,11644,0.005822,1338,0.002007,0.007829
"When trying to execute the code snippet with the provided imports and initialization, the lines with # uncovered are not executed.

# begin code snippet
""""""Return True if `leaf` is a star or double star in a vararg or kwarg.
    If `within` includes VARARGS_PARENTS, this applies to function signatures.
    If `within` includes UNPACKING_PARENTS, it applies to right hand-side
    extended iterable unpacking (PEP 3132) and additional unpacking
    generalizations (PEP 448).
    """"""
if leaf.type not in VARARGS_SPECIALS or not leaf.parent:
    aux = False
    exit(aux) # uncovered
p = leaf.parent
if p.type == syms.star_expr:
    # Star expressions are also used as assignment targets in extended
    # iterable unpacking (PEP 3132).  See what its parent is instead.
    if not p.parent:
        aux = False
        exit(aux) # uncovered
    p = p.parent # uncovered
aux = p.type in within
exit(aux) # uncovered

# end code snippet

Please, provide self-contained and concrete Python modified values of the imports and initialization to execute one of the uncovered paths in the code snippet.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""class MockSymbols:\n    star_expr = 'star_expr'"",
            ""syms = MockSymbols()"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""Parent = namedtuple('Parent', ['type', 'parent'])"",
            ""parent_node = Parent(type=None, parent=None)"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', parent_node)"",
            ""within = ['some_type']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""class MockSymbols:\n    star_expr = 'star_expr'"",
            ""syms = MockSymbols()"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""Parent = namedtuple('Parent', ['type', 'parent'])"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', None)"",
            ""p = Parent(type='star_expr', parent=None)"",
            ""leaf = leaf._replace(parent=p)"",
            ""within = ['some_other_condition']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""class MockSymbols:\n    star_expr = 'star_expr'"",
            ""syms = MockSymbols()"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""Parent = namedtuple('Parent', ['type', 'parent'])"",
            ""parent_node = Parent(type='star_expr', parent=None)"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', parent_node)"",
            ""within = ['some_other_condition']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""class MockSymbols:\n    star_expr = 'star_expr'"",
            ""syms = MockSymbols()"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""Parent = namedtuple('Parent', ['type', 'parent'])"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('some_type', None)"",
            ""p = Parent(type='star_expr', parent=None)"",
            ""leaf = leaf._replace(parent=p)"",
            ""within = ['some_other_type']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""class MockSymbols:\n    star_expr = 'star_expr'"",
            ""syms = MockSymbols()"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""Parent = namedtuple('Parent', ['type', 'parent'])"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', Parent('star_expr', None))"",
            ""p = leaf.parent"",
            ""within = ['another_type']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""class MockSymbols:\n    star_expr = 'star_expr'"",
            ""syms = MockSymbols()"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""Parent = namedtuple('Parent', ['type', 'parent'])"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', None)"",
            ""p = Parent(type=None, parent=None)"",
            ""leaf = leaf._replace(parent=p)"",
            ""within = ['some_condition']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""class MockSymbols:\n    star_expr = 'star_expr'"",
            ""syms = MockSymbols()"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""Parent = namedtuple('Parent', ['type', 'parent'])"",
            ""parent_node = Parent(type='some_other_type', parent=None)"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', parent_node)"",
            ""within = ['some_condition']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""class MockSymbols:\n    star_expr = 'star_expr'"",
            ""syms = MockSymbols()"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""Parent = namedtuple('Parent', ['type', 'parent'])"",
            ""p = Parent(type='star_expr', parent=None)"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('non_star', p)"",
            ""within = ['some_condition']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""class MockSymbols:\n    star_expr = 'star_expr'"",
            ""syms = MockSymbols()"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""Parent = namedtuple('Parent', ['type', 'parent'])"",
            ""p = Parent(type='star_expr', parent=None)"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', p)"",
            ""within = ['condition']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""class MockSymbols:\n    star_expr = 'star_expr'"",
            ""syms = MockSymbols()"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""Parent = namedtuple('Parent', ['type', 'parent'])"",
            ""parent_node = Parent(type=None, parent=None)"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('some_type', parent_node)"",
            ""within = ['some_condition']""
        ]
    }
]","[
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockSymbols:# pragma: no cover"",
            ""    star_expr = 'star_expr' # pragma: no cover"",
            ""syms = MockSymbols() # pragma: no cover"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""Parent = namedtuple('Parent', ['type', 'parent']) # pragma: no cover"",
            ""parent_node = Parent(type=None, parent=None) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', parent_node) # pragma: no cover"",
            ""within = ['some_type'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockSymbols:# pragma: no cover"",
            ""    star_expr = 'star_expr' # pragma: no cover"",
            ""syms = MockSymbols() # pragma: no cover"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""Parent = namedtuple('Parent', ['type', 'parent']) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', None) # pragma: no cover"",
            ""p = Parent(type='star_expr', parent=None) # pragma: no cover"",
            ""leaf = leaf._replace(parent=p) # pragma: no cover"",
            ""within = ['some_other_condition'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockSymbols:# pragma: no cover"",
            ""    star_expr = 'star_expr' # pragma: no cover"",
            ""syms = MockSymbols() # pragma: no cover"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""Parent = namedtuple('Parent', ['type', 'parent']) # pragma: no cover"",
            ""parent_node = Parent(type='star_expr', parent=None) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', parent_node) # pragma: no cover"",
            ""within = ['some_other_condition'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockSymbols:# pragma: no cover"",
            ""    star_expr = 'star_expr' # pragma: no cover"",
            ""syms = MockSymbols() # pragma: no cover"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""Parent = namedtuple('Parent', ['type', 'parent']) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('some_type', None) # pragma: no cover"",
            ""p = Parent(type='star_expr', parent=None) # pragma: no cover"",
            ""leaf = leaf._replace(parent=p) # pragma: no cover"",
            ""within = ['some_other_type'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockSymbols:# pragma: no cover"",
            ""    star_expr = 'star_expr' # pragma: no cover"",
            ""syms = MockSymbols() # pragma: no cover"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""Parent = namedtuple('Parent', ['type', 'parent']) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', Parent('star_expr', None)) # pragma: no cover"",
            ""p = leaf.parent # pragma: no cover"",
            ""within = ['another_type'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockSymbols:# pragma: no cover"",
            ""    star_expr = 'star_expr' # pragma: no cover"",
            ""syms = MockSymbols() # pragma: no cover"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""Parent = namedtuple('Parent', ['type', 'parent']) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', None) # pragma: no cover"",
            ""p = Parent(type=None, parent=None) # pragma: no cover"",
            ""leaf = leaf._replace(parent=p) # pragma: no cover"",
            ""within = ['some_condition'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockSymbols:# pragma: no cover"",
            ""    star_expr = 'star_expr' # pragma: no cover"",
            ""syms = MockSymbols() # pragma: no cover"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""Parent = namedtuple('Parent', ['type', 'parent']) # pragma: no cover"",
            ""parent_node = Parent(type='some_other_type', parent=None) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', parent_node) # pragma: no cover"",
            ""within = ['some_condition'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockSymbols:# pragma: no cover"",
            ""    star_expr = 'star_expr' # pragma: no cover"",
            ""syms = MockSymbols() # pragma: no cover"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""Parent = namedtuple('Parent', ['type', 'parent']) # pragma: no cover"",
            ""p = Parent(type='star_expr', parent=None) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('non_star', p) # pragma: no cover"",
            ""within = ['some_condition'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockSymbols:# pragma: no cover"",
            ""    star_expr = 'star_expr' # pragma: no cover"",
            ""syms = MockSymbols() # pragma: no cover"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""Parent = namedtuple('Parent', ['type', 'parent']) # pragma: no cover"",
            ""p = Parent(type='star_expr', parent=None) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', p) # pragma: no cover"",
            ""within = ['condition'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockSymbols:# pragma: no cover"",
            ""    star_expr = 'star_expr' # pragma: no cover"",
            ""syms = MockSymbols() # pragma: no cover"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""Parent = namedtuple('Parent', ['type', 'parent']) # pragma: no cover"",
            ""parent_node = Parent(type=None, parent=None) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('some_type', parent_node) # pragma: no cover"",
            ""within = ['some_condition'] # pragma: no cover""
        ]
    }
]",3,11712,0.005856,1351,0.0020265,0.0078825
"When trying to execute the code snippet with the provided imports and initialization, the lines with # uncovered are not executed.

# begin code snippet
""""""Return True if `leaf` is a star or double star in a vararg or kwarg.
    If `within` includes VARARGS_PARENTS, this applies to function signatures.
    If `within` includes UNPACKING_PARENTS, it applies to right hand-side
    extended iterable unpacking (PEP 3132) and additional unpacking
    generalizations (PEP 448).
    """"""
if leaf.type not in VARARGS_SPECIALS or not leaf.parent:
    aux = False
    exit(aux) # uncovered
p = leaf.parent
if p.type == syms.star_expr:
    # Star expressions are also used as assignment targets in extended
    # iterable unpacking (PEP 3132).  See what its parent is instead.
    if not p.parent:
        aux = False
        exit(aux) # uncovered
    p = p.parent # uncovered
aux = p.type in within
exit(aux) # uncovered

# end code snippet

Please, provide self-contained and concrete Python modified values of the imports and initialization to execute one of the uncovered paths in the code snippet.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""class MockSymbols:\n    star_expr = 'star_expr'"",
            ""syms = MockSymbols()"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""Parent = namedtuple('Parent', ['type', 'parent'])"",
            ""p = Parent(type=None, parent=None)"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', p)"",
            ""within = ['some_type']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""class MockSymbols:\n    star_expr = 'star_expr'"",
            ""syms = MockSymbols()"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""Parent = namedtuple('Parent', ['type', 'parent'])"",
            ""parent_node = Parent(type='another_type', parent=None)"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', parent_node)"",
            ""within = ['some_condition']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""class MockSymbols:\n    star_expr = 'star_expr'"",
            ""syms = MockSymbols()"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""Parent = namedtuple('Parent', ['type', 'parent'])"",
            ""p = Parent(type=None, parent=None)"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', p)"",
            ""within = ['some_other_type']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""class MockSymbols:\n    star_expr = 'star_expr'"",
            ""syms = MockSymbols()"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""Parent = namedtuple('Parent', ['type', 'parent'])"",
            ""p = Parent(type='star_expr', parent=None)"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', p)"",
            ""within = ['not_a_star']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""class MockSymbols:\n    star_expr = 'star_expr'"",
            ""syms = MockSymbols()"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""Parent = namedtuple('Parent', ['type', 'parent'])"",
            ""parent_node = Parent(type='not_a_star', parent=None)"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', parent_node)"",
            ""within = ['another_type']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""class MockSymbols:\n    star_expr = 'star_expr'"",
            ""syms = MockSymbols()"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""Parent = namedtuple('Parent', ['type', 'parent'])"",
            ""p = Parent('star_expr', None)"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', p)"",
            ""within = ['some_other_type']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""class MockSymbols:\n    star_expr = 'star_expr'"",
            ""syms = MockSymbols()"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""Parent = namedtuple('Parent', ['type', 'parent'])"",
            ""parent_node = Parent(type='not_a_star', parent=None)"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('some_type', parent_node)"",
            ""within = ['another_type']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""class MockSymbols:\n    star_expr = 'star_expr'"",
            ""syms = MockSymbols()"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""Parent = namedtuple('Parent', ['type', 'parent'])"",
            ""parent_node = Parent(type=None, parent=None)"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', parent_node)"",
            ""within = ['some_other_type']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""class MockSymbols:\n    star_expr = 'star_expr'"",
            ""syms = MockSymbols()"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""Parent = namedtuple('Parent', ['type', 'parent'])"",
            ""parent_node = Parent(type=None, parent=None)"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('some_type', parent_node)"",
            ""within = ['some_other_type']""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple""
        ],
        ""initialization"": [
            ""class MockSymbols:\n    star_expr = 'star_expr'"",
            ""syms = MockSymbols()"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr']"",
            ""Parent = namedtuple('Parent', ['type', 'parent'])"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('some_type', None)"",
            ""parent_node = Parent(type='star_expr', parent=None)"",
            ""leaf = leaf._replace(parent=parent_node)"",
            ""within = ['not_a_star']""
        ]
    }
]","[
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockSymbols:# pragma: no cover"",
            ""    star_expr = 'star_expr' # pragma: no cover"",
            ""syms = MockSymbols() # pragma: no cover"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""Parent = namedtuple('Parent', ['type', 'parent']) # pragma: no cover"",
            ""p = Parent(type=None, parent=None) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', p) # pragma: no cover"",
            ""within = ['some_type'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockSymbols:# pragma: no cover"",
            ""    star_expr = 'star_expr' # pragma: no cover"",
            ""syms = MockSymbols() # pragma: no cover"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""Parent = namedtuple('Parent', ['type', 'parent']) # pragma: no cover"",
            ""parent_node = Parent(type='another_type', parent=None) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', parent_node) # pragma: no cover"",
            ""within = ['some_condition'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockSymbols:# pragma: no cover"",
            ""    star_expr = 'star_expr' # pragma: no cover"",
            ""syms = MockSymbols() # pragma: no cover"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""Parent = namedtuple('Parent', ['type', 'parent']) # pragma: no cover"",
            ""p = Parent(type=None, parent=None) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', p) # pragma: no cover"",
            ""within = ['some_other_type'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockSymbols:# pragma: no cover"",
            ""    star_expr = 'star_expr' # pragma: no cover"",
            ""syms = MockSymbols() # pragma: no cover"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""Parent = namedtuple('Parent', ['type', 'parent']) # pragma: no cover"",
            ""p = Parent(type='star_expr', parent=None) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', p) # pragma: no cover"",
            ""within = ['not_a_star'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockSymbols:# pragma: no cover"",
            ""    star_expr = 'star_expr' # pragma: no cover"",
            ""syms = MockSymbols() # pragma: no cover"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""Parent = namedtuple('Parent', ['type', 'parent']) # pragma: no cover"",
            ""parent_node = Parent(type='not_a_star', parent=None) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', parent_node) # pragma: no cover"",
            ""within = ['another_type'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockSymbols:# pragma: no cover"",
            ""    star_expr = 'star_expr' # pragma: no cover"",
            ""syms = MockSymbols() # pragma: no cover"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""Parent = namedtuple('Parent', ['type', 'parent']) # pragma: no cover"",
            ""p = Parent('star_expr', None) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', p) # pragma: no cover"",
            ""within = ['some_other_type'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockSymbols:# pragma: no cover"",
            ""    star_expr = 'star_expr' # pragma: no cover"",
            ""syms = MockSymbols() # pragma: no cover"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""Parent = namedtuple('Parent', ['type', 'parent']) # pragma: no cover"",
            ""parent_node = Parent(type='not_a_star', parent=None) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('some_type', parent_node) # pragma: no cover"",
            ""within = ['another_type'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockSymbols:# pragma: no cover"",
            ""    star_expr = 'star_expr' # pragma: no cover"",
            ""syms = MockSymbols() # pragma: no cover"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""Parent = namedtuple('Parent', ['type', 'parent']) # pragma: no cover"",
            ""parent_node = Parent(type=None, parent=None) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('not_a_star', parent_node) # pragma: no cover"",
            ""within = ['some_other_type'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockSymbols:# pragma: no cover"",
            ""    star_expr = 'star_expr' # pragma: no cover"",
            ""syms = MockSymbols() # pragma: no cover"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""Parent = namedtuple('Parent', ['type', 'parent']) # pragma: no cover"",
            ""parent_node = Parent(type=None, parent=None) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('some_type', parent_node) # pragma: no cover"",
            ""within = ['some_other_type'] # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from collections import namedtuple # pragma: no cover""
        ],
        ""initialization"": [
            ""class MockSymbols:# pragma: no cover"",
            ""    star_expr = 'star_expr' # pragma: no cover"",
            ""syms = MockSymbols() # pragma: no cover"",
            ""VARARGS_SPECIALS = ['star_expr', 'double_star_expr'] # pragma: no cover"",
            ""Parent = namedtuple('Parent', ['type', 'parent']) # pragma: no cover"",
            ""leaf = namedtuple('Leaf', ['type', 'parent'])('some_type', None) # pragma: no cover"",
            ""parent_node = Parent(type='star_expr', parent=None) # pragma: no cover"",
            ""leaf = leaf._replace(parent=parent_node) # pragma: no cover"",
            ""within = ['not_a_star'] # pragma: no cover""
        ]
    }
]",3,11669,0.0058345,1336,0.002004,0.0078385
