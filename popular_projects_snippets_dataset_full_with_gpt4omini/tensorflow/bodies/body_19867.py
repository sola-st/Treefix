# Extracted from ./data/repos/tensorflow/tensorflow/python/tpu/tensor_tracer.py
"""Traces the tensors generated by TPU Ops in a TF graph.

    Args:
      graph: the graph of Ops executed on the TPU.
      tensor_fetches: a (list,tuple,or a single object) of tensor fetches
        returned by model_fn given to session.run. Function must be provided
        with as least one tensor to fetch.
      op_fetches: A list of op fetches returned by model_fn given to
        session.run. op_fetches and tensor_fetches are used to determine the
        nodes that will be executed. Can be None.
      num_replicas: number of replicas used on the TPU.
      num_replicas_per_host: number of replicas per TPU host.
      num_hosts: total number of TPU hosts.

    Returns:
      tensor_fetches: an exact copy of tensor_fetches that has additional
                      dependencies.
    """
if isinstance(graph, func_graph.FuncGraph) or isinstance(
    graph, function._FuncGraph):  # pylint: disable=protected-access
    logging.warning('Tensor Tracer is not supported for tracing FuncGraphs. '
                    'Ignoring tracing.')
    exit(tensor_fetches)

if graph in TensorTracer._traced_graphs:
    logging.warning('Graph is already rewritten with tensor tracer, ignoring '
                    'multiple calls.')
    exit(tensor_fetches)
else:
    TensorTracer._traced_graphs.add(graph)
# Reset the parameters in case parameters are changed.
self._parameters = tensor_tracer_flags.TTParameters()
self._tt_config.device_type = _DEVICE_TYPE_TPU
self._tt_config.num_replicas = num_replicas
self._tt_config.num_replicas_per_host = num_replicas_per_host
self._tt_config.num_hosts = num_hosts
if self._tt_config.num_replicas is not None:
    if self._tt_config.num_replicas_per_host is None:
        self._tt_config.num_replicas_per_host = 8
    if self._tt_config.num_hosts is None:
        self._tt_config.num_hosts = (
            num_replicas // self._tt_config.num_replicas_per_host +
            (num_replicas % self._tt_config.num_replicas_per_host > 0))

if self._parameters.graph_dump_path:
    graph_io.write_graph(graph, self._parameters.graph_dump_path,
                         'graph_before_tt.pbtxt')
with graph.as_default():
    self._add_replica_id_to_graph()
    tensor_fetches = self._trace_execution(graph, tensor_fetches, op_fetches,
                                           on_tpu=True)
if self._parameters.graph_dump_path:
    graph_io.write_graph(graph, self._parameters.graph_dump_path,
                         'graph_after_tt.pbtxt')
exit(tensor_fetches)
