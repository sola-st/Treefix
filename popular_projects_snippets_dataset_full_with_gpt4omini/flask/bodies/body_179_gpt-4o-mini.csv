prompt,raw_predictions,predictions,prompt_type,input_size,input_price,output_size,output_price,total_price
"Provide self-contained and concrete Python values to initialize the undefined variables in the code snippet.

# begin code snippet
""""""Render a template by name with the given context.

    :param template_name_or_list: The name of the template to render. If
        a list is given, the first name to exist will be rendered.
    :param context: The variables to make available in the template.
    """"""
app = current_app._get_current_object()  # type: ignore[attr-defined]
template = app.jinja_env.get_or_select_template(template_name_or_list)
exit(_render(app, template, context))

# end code snippet

# begin undefined variables
current_app
template_name_or_list
_render
context
# end undefined variables

# begin undefined attributes and methods
current_app._get_current_object
# end undefined attributes and methods

Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""from flask import Flask"",
            ""from jinja2 import Environment, FileSystemLoader""
        ],
        ""initialization"": [
            ""app = Flask(__name__)"",
            ""current_app = app"",
            ""template_name_or_list = 'example_template.html'"",
            ""def _render(app, template, context): return template.render(context)"",
            ""context = {'key': 'value'}""
        ]
    },
    {
        ""imports"": [
            ""from flask import Flask, current_app"",
            ""from jinja2 import Template""
        ],
        ""initialization"": [
            ""app = Flask(__name__)"",
            ""current_app = app"",
            ""template_name_or_list = 'example_template.html'"",
            ""def _render(app, template, context): return template.render(context)"",
            ""context = { 'key': 'value' }""
        ]
    },
    {
        ""imports"": [
            ""from flask import Flask, render_template"",
            ""from jinja2 import Environment, FileSystemLoader""
        ],
        ""initialization"": [
            ""app = Flask(__name__)"",
            ""app.jinja_env = Environment(loader=FileSystemLoader('.'))"",
            ""current_app = app"",
            ""template_name_or_list = 'example_template.html'"",
            ""_render = lambda app, template, context: render_template(template, **context)"",
            ""context = {'key1': 'value1', 'key2': 'value2'}""
        ]
    },
    {
        ""imports"": [
            ""from flask import Flask, current_app, render_template""
        ],
        ""initialization"": [
            ""app = Flask(__name__)"",
            ""current_app = app"",
            ""template_name_or_list = 'example_template.html'"",
            ""_render = lambda app, template, context: render_template(template, **context)"",
            ""context = {'key': 'value'}""
        ]
    },
    {
        ""imports"": [
            ""from flask import Flask, current_app"",
            ""from jinja2 import Template""
        ],
        ""initialization"": [
            ""app = Flask(__name__)"",
            ""current_app = app"",
            ""template_name_or_list = 'example_template.html'"",
            ""def _render(app, template, context): return template.render(context)"",
            ""context = {'key': 'value'}""
        ]
    },
    {
        ""imports"": [
            ""from flask import Flask, current_app"",
            ""from jinja2 import Template""
        ],
        ""initialization"": [
            ""app = Flask(__name__)"",
            ""current_app = app"",
            ""template_name_or_list = 'example_template.html'"",
            ""_render = lambda app, template, context: f'Rendered template with context: {context}'"",
            ""context = {'key': 'value'}""
        ]
    },
    {
        ""imports"": [
            ""from flask import Flask, current_app"",
            ""from jinja2 import Environment, FileSystemLoader""
        ],
        ""initialization"": [
            ""app = Flask(__name__)"",
            ""current_app = app"",
            ""template_name_or_list = 'index.html'"",
            ""_render = lambda app, template, context: '<html>Rendered Template</html>'"",
            ""context = {'key': 'value'}""
        ]
    },
    {
        ""imports"": [
            ""from flask import Flask, current_app"",
            ""from jinja2 import Template""
        ],
        ""initialization"": [
            ""app = Flask(__name__)"",
            ""current_app = app"",
            ""template_name_or_list = 'example.html'"",
            ""_render = lambda app, template, context: template.render(context)"",
            ""context = {'key': 'value'}""
        ]
    },
    {
        ""imports"": [
            ""from flask import Flask, render_template_string"",
            ""from jinja2 import Template""
        ],
        ""initialization"": [
            ""current_app = Flask(__name__)"",
            ""template_name_or_list = 'example_template.html'"",
            ""_render = lambda app, template, context: render_template_string(template.render(context))"",
            ""context = {'key': 'value'}""
        ]
    },
    {
        ""imports"": [
            ""from flask import Flask, current_app, render_template_string""
        ],
        ""initialization"": [
            ""app = Flask(__name__)"",
            ""current_app = app"",
            ""template_name_or_list = 'example_template'"",
            ""_render = lambda app, template, context: render_template_string(template, **context)"",
            ""context = {'key': 'value'}""
        ]
    }
]","[
    {
        ""imports"": [
            ""from flask import Flask # pragma: no cover"",
            ""from jinja2 import Environment, FileSystemLoader # pragma: no cover""
        ],
        ""initialization"": [
            ""app = Flask(__name__) # pragma: no cover"",
            ""current_app = app # pragma: no cover"",
            ""template_name_or_list = 'example_template.html' # pragma: no cover"",
            ""def _render(app, template, context): return template.render(context) # pragma: no cover"",
            ""context = {'key': 'value'} # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from flask import Flask, current_app # pragma: no cover"",
            ""from jinja2 import Template # pragma: no cover""
        ],
        ""initialization"": [
            ""app = Flask(__name__) # pragma: no cover"",
            ""current_app = app # pragma: no cover"",
            ""template_name_or_list = 'example_template.html' # pragma: no cover"",
            ""def _render(app, template, context): return template.render(context) # pragma: no cover"",
            ""context = { 'key': 'value' } # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from flask import Flask, render_template # pragma: no cover"",
            ""from jinja2 import Environment, FileSystemLoader # pragma: no cover""
        ],
        ""initialization"": [
            ""app = Flask(__name__) # pragma: no cover"",
            ""app.jinja_env = Environment(loader=FileSystemLoader('.')) # pragma: no cover"",
            ""current_app = app # pragma: no cover"",
            ""template_name_or_list = 'example_template.html' # pragma: no cover"",
            ""_render = lambda app, template, context: render_template(template, **context) # pragma: no cover"",
            ""context = {'key1': 'value1', 'key2': 'value2'} # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from flask import Flask, current_app, render_template # pragma: no cover""
        ],
        ""initialization"": [
            ""app = Flask(__name__) # pragma: no cover"",
            ""current_app = app # pragma: no cover"",
            ""template_name_or_list = 'example_template.html' # pragma: no cover"",
            ""_render = lambda app, template, context: render_template(template, **context) # pragma: no cover"",
            ""context = {'key': 'value'} # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from flask import Flask, current_app # pragma: no cover"",
            ""from jinja2 import Template # pragma: no cover""
        ],
        ""initialization"": [
            ""app = Flask(__name__) # pragma: no cover"",
            ""current_app = app # pragma: no cover"",
            ""template_name_or_list = 'example_template.html' # pragma: no cover"",
            ""def _render(app, template, context): return template.render(context) # pragma: no cover"",
            ""context = {'key': 'value'} # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from flask import Flask, current_app # pragma: no cover"",
            ""from jinja2 import Template # pragma: no cover""
        ],
        ""initialization"": [
            ""app = Flask(__name__) # pragma: no cover"",
            ""current_app = app # pragma: no cover"",
            ""template_name_or_list = 'example_template.html' # pragma: no cover"",
            ""_render = lambda app, template, context: f'Rendered template with context: {context}' # pragma: no cover"",
            ""context = {'key': 'value'} # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from flask import Flask, current_app # pragma: no cover"",
            ""from jinja2 import Environment, FileSystemLoader # pragma: no cover""
        ],
        ""initialization"": [
            ""app = Flask(__name__) # pragma: no cover"",
            ""current_app = app # pragma: no cover"",
            ""template_name_or_list = 'index.html' # pragma: no cover"",
            ""_render = lambda app, template, context: '<html>Rendered Template</html>' # pragma: no cover"",
            ""context = {'key': 'value'} # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from flask import Flask, current_app # pragma: no cover"",
            ""from jinja2 import Template # pragma: no cover""
        ],
        ""initialization"": [
            ""app = Flask(__name__) # pragma: no cover"",
            ""current_app = app # pragma: no cover"",
            ""template_name_or_list = 'example.html' # pragma: no cover"",
            ""_render = lambda app, template, context: template.render(context) # pragma: no cover"",
            ""context = {'key': 'value'} # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from flask import Flask, render_template_string # pragma: no cover"",
            ""from jinja2 import Template # pragma: no cover""
        ],
        ""initialization"": [
            ""current_app = Flask(__name__) # pragma: no cover"",
            ""template_name_or_list = 'example_template.html' # pragma: no cover"",
            ""_render = lambda app, template, context: render_template_string(template.render(context)) # pragma: no cover"",
            ""context = {'key': 'value'} # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from flask import Flask, current_app, render_template_string # pragma: no cover""
        ],
        ""initialization"": [
            ""app = Flask(__name__) # pragma: no cover"",
            ""current_app = app # pragma: no cover"",
            ""template_name_or_list = 'example_template' # pragma: no cover"",
            ""_render = lambda app, template, context: render_template_string(template, **context) # pragma: no cover"",
            ""context = {'key': 'value'} # pragma: no cover""
        ]
    }
]",1,405,0.0002025,998,0.001497,0.0016995
"When trying to execute the code snippet with the provided imports and initialization, the following error happens:
# begin error message
Execution error at line 17:
    app = current_app._get_current_object()  # type: ignore[attr-defined]
AttributeError: 'Flask' object has no attribute '_get_current_object'
# end error message

Please, provide self-contained and concrete Python fixed values of the imports and initialization to solve the error and make the code snippet executable.
Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""from flask import Flask, render_template"",
            ""from jinja2 import Environment, FileSystemLoader""
        ],
        ""initialization"": [
            ""app = Flask(__name__)"",
            ""current_app = app"",
            ""template_name_or_list = 'example_template.html'"",
            ""def _render(app, template, context): return template.render(context)"",
            ""context = {'key': 'value'}"",
            ""app.jinja_env = Environment(loader=FileSystemLoader('./')), "",
            ""app.jinja_env.get_or_select_template = lambda name_or_list: app.jinja_env.get_template(name_or_list)""
        ]
    },
    {
        ""imports"": [
            ""from flask import Flask, render_template_string"",
            ""from jinja2 import Environment, FileSystemLoader""
        ],
        ""initialization"": [
            ""app = Flask(__name__)"",
            ""def _get_current_object(): return app"",
            ""current_app = type('MockCurrentApp', (object,), {'_get_current_object': _get_current_object})()"",
            ""template_name_or_list = 'example_template.html'"",
            ""def _render(app, template, context): return template.render(context)"",
            ""template_loader = FileSystemLoader('.')"",
            ""jinja_env = Environment(loader=template_loader)"",
            ""template = jinja_env.get_template(template_name_or_list)"",
            ""context = {'key': 'value'}""
        ]
    },
    {
        ""imports"": [
            ""from flask import Flask, render_template_string"",
            ""from jinja2 import Environment, FileSystemLoader""
        ],
        ""initialization"": [
            ""app = Flask(__name__)"",
            ""current_app = app"",
            ""template_name_or_list = 'example_template.html'"",
            ""def _render(app, template, context): return template.render(context)"",
            ""context = {'key': 'value'}"",
            ""app.jinja_env = Environment(loader=FileSystemLoader('.'))"",
            ""app.jinja_env.get_or_select_template = lambda name: app.jinja_env.get_template(name)"",
            ""template = app.jinja_env.get_template(template_name_or_list)""
        ]
    },
    {
        ""imports"": [
            ""from flask import Flask, current_app"",
            ""from jinja2 import Template""
        ],
        ""initialization"": [
            ""app = Flask(__name__)"",
            ""current_app = app"",
            ""template_name_or_list = 'example_template.html'"",
            ""def _render(app, template, context): return template.render(context)"",
            ""template = Template('<h1>{{ key }}</h1>')"",
            ""context = {'key': 'value'}""
        ]
    },
    {
        ""imports"": [
            ""from flask import Flask, render_template_string"",
            ""from jinja2 import Environment, FileSystemLoader""
        ],
        ""initialization"": [
            ""app = Flask(__name__)"",
            ""current_app = app"",
            ""template_name_or_list = 'example_template.html'"",
            ""def _render(app, template, context): return template.render(context)"",
            ""context = {'key': 'value'}"",
            ""app.jinja_env = Environment(loader=FileSystemLoader('/path/to/templates'))"",
            ""app.jinja_env.get_or_select_template = lambda name: app.jinja_env.get_template(name)"",
            ""template = app.jinja_env.get_template(template_name_or_list)""
        ]
    },
    {
        ""imports"": [
            ""from flask import Flask, render_template_string"",
            ""from jinja2 import Environment, FileSystemLoader""
        ],
        ""initialization"": [
            ""app = Flask(__name__)"",
            ""current_app = app"",
            ""template_name_or_list = 'example_template.html'"",
            ""def _render(app, template, context): return render_template_string(template, **context)"",
            ""context = {'key': 'value'}"",
            ""app.jinja_env = Environment(loader=FileSystemLoader('.'))"",
            ""app.jinja_env.get_or_select_template = lambda names: app.jinja_env.get_template(names)""
        ]
    },
    {
        ""imports"": [
            ""from flask import Flask, render_template_string"",
            ""from jinja2 import Environment, FileSystemLoader""
        ],
        ""initialization"": [
            ""app = Flask(__name__)"",
            ""current_app = type('MockCurrentApp', (object,), {'_get_current_object': lambda self: app, 'jinja_env': app.jinja_env})()"",
            ""template_name_or_list = 'example_template.html'"",
            ""def _render(app, template, context): return template.render(context)"",
            ""context = {'key': 'value'}"",
            ""app.jinja_env = Environment(loader=FileSystemLoader('.'))"",
            ""app.jinja_env.loader.get_source = lambda env, template: ('<h1>{{ key }}</h1>', 'example_template.html', lambda: None)""
        ]
    },
    {
        ""imports"": [
            ""from flask import Flask, render_template_string"",
            ""from jinja2 import Environment, FileSystemLoader""
        ],
        ""initialization"": [
            ""app = Flask(__name__)"",
            ""current_app = app"",
            ""template_name_or_list = 'example_template.html'"",
            ""def _render(app, template, context): return template.render(context)"",
            ""context = {'key': 'value'}"",
            ""app.jinja_env = Environment(loader=FileSystemLoader('./')), app.jinja_env.get_or_select_template = lambda name: render_template_string('<h1>{{ key }}</h1>')""
        ]
    },
    {
        ""imports"": [
            ""from flask import Flask, render_template_string"",
            ""from jinja2 import Environment, FileSystemLoader""
        ],
        ""initialization"": [
            ""app = Flask(__name__)"",
            ""current_app = type('CurrentApp', (object,), {'_get_current_object': lambda self: app, 'jinja_env': app.jinja_env})()"",
            ""template_name_or_list = 'example_template.html'"",
            ""def _render(app, template, context): return template.render(context)"",
            ""context = {'key': 'value'}"",
            ""app.jinja_env = Environment(loader=FileSystemLoader('.'))"",
            ""app.jinja_env.get_or_select_template = lambda name: render_template_string('<h1>{{ key }}</h1>')""
        ]
    },
    {
        ""imports"": [
            ""from flask import Flask, render_template"",
            ""from jinja2 import Environment, FileSystemLoader""
        ],
        ""initialization"": [
            ""app = Flask(__name__)"",
            ""current_app = app"",
            ""template_name_or_list = 'example_template.html'"",
            ""def _render(app, template, context): return template.render(context)"",
            ""context = {'key': 'value'}"",
            ""app.jinja_env = Environment(loader=FileSystemLoader('./'))"",
            ""app.jinja_env.get_or_select_template = lambda name: app.jinja_env.get_template(name)""
        ]
    }
]","[
    {
        ""imports"": [
            ""from flask import Flask, render_template # pragma: no cover"",
            ""from jinja2 import Environment, FileSystemLoader # pragma: no cover""
        ],
        ""initialization"": [
            ""app = Flask(__name__) # pragma: no cover"",
            ""current_app = app # pragma: no cover"",
            ""template_name_or_list = 'example_template.html' # pragma: no cover"",
            ""def _render(app, template, context): return template.render(context) # pragma: no cover"",
            ""context = {'key': 'value'} # pragma: no cover"",
            ""app.jinja_env = Environment(loader=FileSystemLoader('./')),  # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from flask import Flask, render_template_string # pragma: no cover"",
            ""from jinja2 import Environment, FileSystemLoader # pragma: no cover""
        ],
        ""initialization"": [
            ""app = Flask(__name__) # pragma: no cover"",
            ""def _get_current_object(): return app # pragma: no cover"",
            ""current_app = type('MockCurrentApp', (object,), {'_get_current_object': _get_current_object})() # pragma: no cover"",
            ""template_name_or_list = 'example_template.html' # pragma: no cover"",
            ""def _render(app, template, context): return template.render(context) # pragma: no cover"",
            ""template_loader = FileSystemLoader('.') # pragma: no cover"",
            ""jinja_env = Environment(loader=template_loader) # pragma: no cover"",
            ""context = {'key': 'value'} # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from flask import Flask, render_template_string # pragma: no cover"",
            ""from jinja2 import Environment, FileSystemLoader # pragma: no cover""
        ],
        ""initialization"": [
            ""app = Flask(__name__) # pragma: no cover"",
            ""current_app = app # pragma: no cover"",
            ""template_name_or_list = 'example_template.html' # pragma: no cover"",
            ""def _render(app, template, context): return template.render(context) # pragma: no cover"",
            ""context = {'key': 'value'} # pragma: no cover"",
            ""app.jinja_env = Environment(loader=FileSystemLoader('.')) # pragma: no cover"",
            ""app.jinja_env.get_or_select_template = lambda name: app.jinja_env.get_template(name) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from flask import Flask, current_app # pragma: no cover"",
            ""from jinja2 import Template # pragma: no cover""
        ],
        ""initialization"": [
            ""app = Flask(__name__) # pragma: no cover"",
            ""current_app = app # pragma: no cover"",
            ""template_name_or_list = 'example_template.html' # pragma: no cover"",
            ""def _render(app, template, context): return template.render(context) # pragma: no cover"",
            ""template = Template('<h1>{{ key }}</h1>') # pragma: no cover"",
            ""context = {'key': 'value'} # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from flask import Flask, render_template_string # pragma: no cover"",
            ""from jinja2 import Environment, FileSystemLoader # pragma: no cover""
        ],
        ""initialization"": [
            ""app = Flask(__name__) # pragma: no cover"",
            ""current_app = app # pragma: no cover"",
            ""template_name_or_list = 'example_template.html' # pragma: no cover"",
            ""def _render(app, template, context): return template.render(context) # pragma: no cover"",
            ""context = {'key': 'value'} # pragma: no cover"",
            ""app.jinja_env = Environment(loader=FileSystemLoader('/path/to/templates')) # pragma: no cover"",
            ""app.jinja_env.get_or_select_template = lambda name: app.jinja_env.get_template(name) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from flask import Flask, render_template_string # pragma: no cover"",
            ""from jinja2 import Environment, FileSystemLoader # pragma: no cover""
        ],
        ""initialization"": [
            ""app = Flask(__name__) # pragma: no cover"",
            ""current_app = app # pragma: no cover"",
            ""template_name_or_list = 'example_template.html' # pragma: no cover"",
            ""def _render(app, template, context): return render_template_string(template, **context) # pragma: no cover"",
            ""context = {'key': 'value'} # pragma: no cover"",
            ""app.jinja_env = Environment(loader=FileSystemLoader('.')) # pragma: no cover"",
            ""app.jinja_env.get_or_select_template = lambda names: app.jinja_env.get_template(names) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from flask import Flask, render_template_string # pragma: no cover"",
            ""from jinja2 import Environment, FileSystemLoader # pragma: no cover""
        ],
        ""initialization"": [
            ""app = Flask(__name__) # pragma: no cover"",
            ""current_app = type('MockCurrentApp', (object,), {'_get_current_object': lambda self: app, 'jinja_env': app.jinja_env})() # pragma: no cover"",
            ""template_name_or_list = 'example_template.html' # pragma: no cover"",
            ""def _render(app, template, context): return template.render(context) # pragma: no cover"",
            ""context = {'key': 'value'} # pragma: no cover"",
            ""app.jinja_env = Environment(loader=FileSystemLoader('.')) # pragma: no cover"",
            ""app.jinja_env.loader.get_source = lambda env, template: ('<h1>{{ key }}</h1>', 'example_template.html', lambda: None) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from flask import Flask, render_template_string # pragma: no cover"",
            ""from jinja2 import Environment, FileSystemLoader # pragma: no cover""
        ],
        ""initialization"": [
            ""app = Flask(__name__) # pragma: no cover"",
            ""current_app = app # pragma: no cover"",
            ""template_name_or_list = 'example_template.html' # pragma: no cover"",
            ""def _render(app, template, context): return template.render(context) # pragma: no cover"",
            ""context = {'key': 'value'} # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from flask import Flask, render_template_string # pragma: no cover"",
            ""from jinja2 import Environment, FileSystemLoader # pragma: no cover""
        ],
        ""initialization"": [
            ""app = Flask(__name__) # pragma: no cover"",
            ""current_app = type('CurrentApp', (object,), {'_get_current_object': lambda self: app, 'jinja_env': app.jinja_env})() # pragma: no cover"",
            ""template_name_or_list = 'example_template.html' # pragma: no cover"",
            ""def _render(app, template, context): return template.render(context) # pragma: no cover"",
            ""context = {'key': 'value'} # pragma: no cover"",
            ""app.jinja_env = Environment(loader=FileSystemLoader('.')) # pragma: no cover"",
            ""app.jinja_env.get_or_select_template = lambda name: render_template_string('<h1>{{ key }}</h1>') # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""from flask import Flask, render_template # pragma: no cover"",
            ""from jinja2 import Environment, FileSystemLoader # pragma: no cover""
        ],
        ""initialization"": [
            ""app = Flask(__name__) # pragma: no cover"",
            ""current_app = app # pragma: no cover"",
            ""template_name_or_list = 'example_template.html' # pragma: no cover"",
            ""def _render(app, template, context): return template.render(context) # pragma: no cover"",
            ""context = {'key': 'value'} # pragma: no cover"",
            ""app.jinja_env = Environment(loader=FileSystemLoader('./')) # pragma: no cover"",
            ""app.jinja_env.get_or_select_template = lambda name: app.jinja_env.get_template(name) # pragma: no cover""
        ]
    }
]",2,809,0.0004045,1511,0.0022665,0.0026709999999999998
