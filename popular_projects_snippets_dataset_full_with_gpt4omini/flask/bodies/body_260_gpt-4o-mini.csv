prompt,raw_predictions,predictions,prompt_type,input_size,input_price,output_size,output_price,total_price
"Provide self-contained and concrete Python values to initialize the undefined variables in the code snippet.

# begin code snippet
# If the flag isn't provided, it will default to False. Don't use
# that, let debug be set by env in that case.
source = ctx.get_parameter_source(param.name)  # type: ignore[arg-type]

if source is not None and source in (
    ParameterSource.DEFAULT,
    ParameterSource.DEFAULT_MAP,
):
    exit(None)

# Set with env var instead of ScriptInfo.load so that it can be
# accessed early during a factory function.
os.environ[""FLASK_DEBUG""] = ""1"" if value else ""0""
exit(value)

# end code snippet

# begin undefined variables
ctx
param
ParameterSource
os
value
# end undefined variables

# begin undefined attributes and methods
ctx.get_parameter_source
param.name
ParameterSource.DEFAULT
ParameterSource.DEFAULT_MAP
os.environ
# end undefined attributes and methods

Respond strictly with JSON. The JSON should be compatible with the TypeScript type `Response` from the following:

```ts
interface Response {
// Python import statements needed in the initialization code. One string per import.
imports: string[];
// Python code to initialize the undefined variables and make the code snippet executable. One string per undefined variable. The statements in the code snippet above are not part of the initialization of undefined variables. Therefore, their copy or modified versions should not be added here. The values should be self-contained and concrete, i.e. without assumptions or expected replacements of any code that is not present in the code snippet. In case there are undefined attributes or methods and the attribute or method base is not initialized, initialize the attribute or method base using type(""Mock"", bases, dict), where bases is a tuple containing the base classes that the Mock object inherits from, e.g. object, and dict is a dictionary containing the initialization of the undefined attributes and methods in the code snippet.
initialization: string[];
}
```","[
    {
        ""imports"": [
            ""import os"",
            ""from unittest.mock import MagicMock""
        ],
        ""initialization"": [
            ""ctx = MagicMock()"",
            ""param = MagicMock(name='param')"",
            ""param.name = 'test_param'"",
            ""ParameterSource = type('ParameterSource', (), {'DEFAULT': 'default', 'DEFAULT_MAP': 'default_map'})"",
            ""value = True"",
            ""ctx.get_parameter_source = MagicMock(return_value=ParameterSource.DEFAULT)""
        ]
    },
    {
        ""imports"": [
            ""import os"",
            ""from unittest.mock import MagicMock""
        ],
        ""initialization"": [
            ""ctx = type('Mock', (), {'get_parameter_source': MagicMock(return_value=ParameterSource.DEFAULT)})()"",
            ""param = type('Mock', (), {'name': 'test_param'})()"",
            ""class ParameterSource: DEFAULT = 'default'; DEFAULT_MAP = 'default_map'"",
            ""os = type('Mock', (), {'environ': {}})()"",
            ""value = True""
        ]
    },
    {
        ""imports"": [
            ""import os"",
            ""from enum import Enum""
        ],
        ""initialization"": [
            ""class ParameterSource(Enum): DEFAULT = 1; DEFAULT_MAP = 2"",
            ""class MockContext: def get_parameter_source(self, name): return ParameterSource.DEFAULT if name == 'test_param' else None"",
            ""ctx = MockContext()"",
            ""class MockParam: name = 'test_param'"",
            ""param = MockParam()"",
            ""value = True""
        ]
    },
    {
        ""imports"": [
            ""import os"",
            ""from unittest.mock import Mock""
        ],
        ""initialization"": [
            ""ctx = Mock()"",
            ""param = Mock(name='param')"",
            ""param.name = 'some_parameter'"",
            ""ParameterSource = Mock()"",
            ""ParameterSource.DEFAULT = 'DEFAULT_SOURCE'"",
            ""ParameterSource.DEFAULT_MAP = 'DEFAULT_MAP_SOURCE'"",
            ""os = Mock()"",
            ""os.environ = {}"",
            ""value = True""
        ]
    },
    {
        ""imports"": [
            ""import os"",
            ""from unittest.mock import Mock""
        ],
        ""initialization"": [
            ""ctx = Mock()"",
            ""param = Mock(name='param')"",
            ""ParameterSource = Mock()"",
            ""os = Mock()"",
            ""value = True"",
            ""ctx.get_parameter_source = Mock(return_value=ParameterSource.DEFAULT)"",
            ""param.name = 'test_param'"",
            ""ParameterSource.DEFAULT = 'default_source'"",
            ""ParameterSource.DEFAULT_MAP = 'default_map'"",
            ""os.environ = {}""
        ]
    },
    {
        ""imports"": [
            ""import os"",
            ""from unittest.mock import Mock""
        ],
        ""initialization"": [
            ""ctx = Mock()"",
            ""param = Mock(name='param')"",
            ""ParameterSource = Mock()"",
            ""os = Mock()"",
            ""value = True"",
            ""ctx.get_parameter_source = Mock(return_value=ParameterSource.DEFAULT)"",
            ""param.name = 'test_param'"",
            ""ParameterSource.DEFAULT = 'default_source'"",
            ""ParameterSource.DEFAULT_MAP = 'default_map'"",
            ""os.environ = {}""
        ]
    },
    {
        ""imports"": [
            ""import os"",
            ""from unittest.mock import Mock""
        ],
        ""initialization"": [
            ""ctx = Mock()"",
            ""param = Mock(name='param')"",
            ""param.name = 'example_param'"",
            ""ParameterSource = Mock()"",
            ""ParameterSource.DEFAULT = 'default_value'"",
            ""ParameterSource.DEFAULT_MAP = 'default_map_value'"",
            ""os = Mock()"",
            ""os.environ = {}"",
            ""value = True""
        ]
    },
    {
        ""imports"": [
            ""import os"",
            ""from unittest.mock import Mock""
        ],
        ""initialization"": [
            ""ctx = Mock()"",
            ""param = Mock(name='param')"",
            ""param.name = 'test_param'"",
            ""ParameterSource = Mock()"",
            ""ParameterSource.DEFAULT = 'default_value'"",
            ""ParameterSource.DEFAULT_MAP = 'default_map_value'"",
            ""os = Mock()"",
            ""os.environ = {}"",
            ""value = True""
        ]
    },
    {
        ""imports"": [
            ""import os"",
            ""from unittest.mock import Mock""
        ],
        ""initialization"": [
            ""ctx = Mock()"",
            ""param = Mock(name='param')"",
            ""param.name = 'example_param'"",
            ""ParameterSource = Mock()"",
            ""ParameterSource.DEFAULT = 'default_source'"",
            ""ParameterSource.DEFAULT_MAP = 'default_map'"",
            ""os = Mock()"",
            ""os.environ = {}"",
            ""value = True""
        ]
    },
    {
        ""imports"": [
            ""import os"",
            ""from unittest.mock import Mock""
        ],
        ""initialization"": [
            ""ctx = Mock()"",
            ""param = Mock(name='param')"",
            ""param.name = 'test_param'"",
            ""ParameterSource = Mock()"",
            ""ParameterSource.DEFAULT = 'default_source'"",
            ""ParameterSource.DEFAULT_MAP = 'default_map'"",
            ""os = Mock()"",
            ""os.environ = {}"",
            ""value = True""
        ]
    }
]","[
    {
        ""imports"": [
            ""import os # pragma: no cover"",
            ""from unittest.mock import MagicMock # pragma: no cover""
        ],
        ""initialization"": [
            ""ctx = MagicMock() # pragma: no cover"",
            ""param = MagicMock(name='param') # pragma: no cover"",
            ""param.name = 'test_param' # pragma: no cover"",
            ""ParameterSource = type('ParameterSource', (), {'DEFAULT': 'default', 'DEFAULT_MAP': 'default_map'}) # pragma: no cover"",
            ""value = True # pragma: no cover"",
            ""ctx.get_parameter_source = MagicMock(return_value=ParameterSource.DEFAULT) # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover"",
            ""from unittest.mock import MagicMock # pragma: no cover""
        ],
        ""initialization"": [
            ""param = type('Mock', (), {'name': 'test_param'})() # pragma: no cover"",
            ""class ParameterSource: DEFAULT = 'default'; DEFAULT_MAP = 'default_map' # pragma: no cover"",
            ""os = type('Mock', (), {'environ': {}})() # pragma: no cover"",
            ""value = True # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover"",
            ""from enum import Enum # pragma: no cover""
        ],
        ""initialization"": [
            ""class ParameterSource(Enum): DEFAULT = 1; DEFAULT_MAP = 2 # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover"",
            ""from unittest.mock import Mock # pragma: no cover""
        ],
        ""initialization"": [
            ""ctx = Mock() # pragma: no cover"",
            ""param = Mock(name='param') # pragma: no cover"",
            ""param.name = 'some_parameter' # pragma: no cover"",
            ""ParameterSource = Mock() # pragma: no cover"",
            ""ParameterSource.DEFAULT = 'DEFAULT_SOURCE' # pragma: no cover"",
            ""ParameterSource.DEFAULT_MAP = 'DEFAULT_MAP_SOURCE' # pragma: no cover"",
            ""os = Mock() # pragma: no cover"",
            ""os.environ = {} # pragma: no cover"",
            ""value = True # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover"",
            ""from unittest.mock import Mock # pragma: no cover""
        ],
        ""initialization"": [
            ""ctx = Mock() # pragma: no cover"",
            ""param = Mock(name='param') # pragma: no cover"",
            ""ParameterSource = Mock() # pragma: no cover"",
            ""os = Mock() # pragma: no cover"",
            ""value = True # pragma: no cover"",
            ""ctx.get_parameter_source = Mock(return_value=ParameterSource.DEFAULT) # pragma: no cover"",
            ""param.name = 'test_param' # pragma: no cover"",
            ""ParameterSource.DEFAULT = 'default_source' # pragma: no cover"",
            ""ParameterSource.DEFAULT_MAP = 'default_map' # pragma: no cover"",
            ""os.environ = {} # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover"",
            ""from unittest.mock import Mock # pragma: no cover""
        ],
        ""initialization"": [
            ""ctx = Mock() # pragma: no cover"",
            ""param = Mock(name='param') # pragma: no cover"",
            ""ParameterSource = Mock() # pragma: no cover"",
            ""os = Mock() # pragma: no cover"",
            ""value = True # pragma: no cover"",
            ""ctx.get_parameter_source = Mock(return_value=ParameterSource.DEFAULT) # pragma: no cover"",
            ""param.name = 'test_param' # pragma: no cover"",
            ""ParameterSource.DEFAULT = 'default_source' # pragma: no cover"",
            ""ParameterSource.DEFAULT_MAP = 'default_map' # pragma: no cover"",
            ""os.environ = {} # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover"",
            ""from unittest.mock import Mock # pragma: no cover""
        ],
        ""initialization"": [
            ""ctx = Mock() # pragma: no cover"",
            ""param = Mock(name='param') # pragma: no cover"",
            ""param.name = 'example_param' # pragma: no cover"",
            ""ParameterSource = Mock() # pragma: no cover"",
            ""ParameterSource.DEFAULT = 'default_value' # pragma: no cover"",
            ""ParameterSource.DEFAULT_MAP = 'default_map_value' # pragma: no cover"",
            ""os = Mock() # pragma: no cover"",
            ""os.environ = {} # pragma: no cover"",
            ""value = True # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover"",
            ""from unittest.mock import Mock # pragma: no cover""
        ],
        ""initialization"": [
            ""ctx = Mock() # pragma: no cover"",
            ""param = Mock(name='param') # pragma: no cover"",
            ""param.name = 'test_param' # pragma: no cover"",
            ""ParameterSource = Mock() # pragma: no cover"",
            ""ParameterSource.DEFAULT = 'default_value' # pragma: no cover"",
            ""ParameterSource.DEFAULT_MAP = 'default_map_value' # pragma: no cover"",
            ""os = Mock() # pragma: no cover"",
            ""os.environ = {} # pragma: no cover"",
            ""value = True # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover"",
            ""from unittest.mock import Mock # pragma: no cover""
        ],
        ""initialization"": [
            ""ctx = Mock() # pragma: no cover"",
            ""param = Mock(name='param') # pragma: no cover"",
            ""param.name = 'example_param' # pragma: no cover"",
            ""ParameterSource = Mock() # pragma: no cover"",
            ""ParameterSource.DEFAULT = 'default_source' # pragma: no cover"",
            ""ParameterSource.DEFAULT_MAP = 'default_map' # pragma: no cover"",
            ""os = Mock() # pragma: no cover"",
            ""os.environ = {} # pragma: no cover"",
            ""value = True # pragma: no cover""
        ]
    },
    {
        ""imports"": [
            ""import os # pragma: no cover"",
            ""from unittest.mock import Mock # pragma: no cover""
        ],
        ""initialization"": [
            ""ctx = Mock() # pragma: no cover"",
            ""param = Mock(name='param') # pragma: no cover"",
            ""param.name = 'test_param' # pragma: no cover"",
            ""ParameterSource = Mock() # pragma: no cover"",
            ""ParameterSource.DEFAULT = 'default_source' # pragma: no cover"",
            ""ParameterSource.DEFAULT_MAP = 'default_map' # pragma: no cover"",
            ""os = Mock() # pragma: no cover"",
            ""os.environ = {} # pragma: no cover"",
            ""value = True # pragma: no cover""
        ]
    }
]",1,431,0.0002155,1151,0.0017265,0.001942
